INFO  02:50:59,093 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  02:50:59,151 - #2 program
INFO  02:50:59,151 - #27 MJProgram
INFO  02:50:59,151 - #23 const
INFO  02:50:59,153 - #27 int
INFO  02:50:59,153 - #27 nula
INFO  02:50:59,154 - #12 =
INFO  02:50:59,154 - #26 0
INFO  02:50:59,154 - #5 ;
INFO  02:50:59,155 - #23 const
INFO  02:50:59,155 - #27 int
INFO  02:50:59,155 - #27 jedan
INFO  02:50:59,155 - #12 =
INFO  02:50:59,155 - #26 1
INFO  02:50:59,155 - #5 ;
INFO  02:50:59,155 - #23 const
INFO  02:50:59,156 - #27 int
INFO  02:50:59,156 - #27 pet
INFO  02:50:59,156 - #12 =
INFO  02:50:59,156 - #26 5
INFO  02:50:59,156 - #5 ;
INFO  02:50:59,157 - #23 const
INFO  02:50:59,157 - #27 char
INFO  02:50:59,157 - #27 pet1
INFO  02:50:59,157 - #12 =
INFO  02:50:59,157 - #28 c
INFO  02:50:59,157 - #5 ;
INFO  02:50:59,158 - #27 int
INFO  02:50:59,158 - #27 niz
INFO  02:50:59,158 - #20 [
INFO  02:50:59,158 - #21 ]
INFO  02:50:59,158 - #8 ,
INFO  02:50:59,158 - #27 niz2
INFO  02:50:59,158 - #20 [
INFO  02:50:59,158 - #21 ]
INFO  02:50:59,158 - #8 ,
INFO  02:50:59,158 - #27 a
INFO  02:50:59,159 - #8 ,
INFO  02:50:59,159 - #27 b
INFO  02:50:59,159 - #5 ;
INFO  02:50:59,159 - #27 char
INFO  02:50:59,159 - #27 nizch
INFO  02:50:59,160 - #20 [
INFO  02:50:59,160 - #21 ]
INFO  02:50:59,160 - #8 ,
INFO  02:50:59,160 - #27 c
INFO  02:50:59,160 - #5 ;
INFO  02:50:59,160 - #27 bool
INFO  02:50:59,160 - #27 s1
INFO  02:50:59,160 - #5 ;
INFO  02:50:59,160 - #27 bool
INFO  02:50:59,160 - #27 nizbool
INFO  02:50:59,160 - #20 [
INFO  02:50:59,160 - #21 ]
INFO  02:50:59,161 - #5 ;
INFO  02:50:59,161 - #3 {
INFO  02:50:59,161 - #13 void
INFO  02:50:59,161 - #27 main
INFO  02:50:59,162 - #6 (
INFO  02:50:59,162 - #7 )
INFO  02:50:59,162 - #27 int
INFO  02:50:59,162 - #27 bodovi
INFO  02:50:59,162 - #5 ;
INFO  02:50:59,163 - #27 bool
INFO  02:50:59,163 - #27 bt
INFO  02:50:59,163 - #5 ;
INFO  02:50:59,163 - #27 int
INFO  02:50:59,163 - #27 s
INFO  02:50:59,163 - #5 ;
INFO  02:50:59,163 - #3 {
INFO  02:50:59,163 - #9 print
INFO  02:50:59,164 - #6 (
INFO  02:50:59,164 - #26 1
INFO  02:50:59,164 - #7 )
INFO  02:50:59,165 - #5 ;
INFO  02:50:59,166 - #4 }
INFO  02:50:59,166 - #4 }
INFO  02:50:59,176 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:50:59,177 - ===================================
INFO  02:50:59,196 - Deklarisana je konsanta int nula = 0
INFO  02:50:59,196 - Deklarisana je konsanta int jedan = 1
INFO  02:50:59,196 - Deklarisana je konsanta int pet = 5
INFO  02:50:59,197 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  02:50:59,197 - Deklarisan je niz niz
INFO  02:50:59,197 - Deklarisan je niz niz2
INFO  02:50:59,197 - Deklarisana promenljiva a
INFO  02:50:59,197 - Deklarisana promenljiva b
INFO  02:50:59,197 - Deklarisan je niz nizch
INFO  02:50:59,197 - Deklarisana promenljiva c
INFO  02:50:59,197 - Deklarisana promenljiva s1
INFO  02:50:59,198 - Deklarisan je niz nizbool
INFO  02:50:59,198 - Obradjuje se funkcija main na liniji 13
INFO  02:50:59,198 - Deklarisana promenljiva bodovi
INFO  02:50:59,198 - Deklarisana promenljiva bt
INFO  02:50:59,198 - Deklarisana promenljiva s
INFO  02:50:59,198 -  Print count calls = 1
INFO  02:50:59,198 -  Deklarisanih promenljivih ima = 11
INFO  02:50:59,199 - ===================================
INFO  02:51:32,156 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  02:51:32,192 - #2 program
INFO  02:51:32,192 - #27 MJProgram
INFO  02:51:32,192 - #23 const
INFO  02:51:32,193 - #27 int
INFO  02:51:32,193 - #27 nula
INFO  02:51:32,194 - #12 =
INFO  02:51:32,194 - #26 0
INFO  02:51:32,194 - #5 ;
INFO  02:51:32,195 - #23 const
INFO  02:51:32,195 - #27 int
INFO  02:51:32,195 - #27 jedan
INFO  02:51:32,195 - #12 =
INFO  02:51:32,195 - #26 1
INFO  02:51:32,195 - #5 ;
INFO  02:51:32,196 - #23 const
INFO  02:51:32,196 - #27 int
INFO  02:51:32,196 - #27 pet
INFO  02:51:32,196 - #12 =
INFO  02:51:32,196 - #26 5
INFO  02:51:32,196 - #5 ;
INFO  02:51:32,196 - #23 const
INFO  02:51:32,196 - #27 char
INFO  02:51:32,196 - #27 pet1
INFO  02:51:32,197 - #12 =
INFO  02:51:32,197 - #28 c
INFO  02:51:32,197 - #5 ;
INFO  02:51:32,197 - #27 int
INFO  02:51:32,197 - #27 niz
INFO  02:51:32,197 - #20 [
INFO  02:51:32,197 - #21 ]
INFO  02:51:32,197 - #8 ,
INFO  02:51:32,198 - #27 niz2
INFO  02:51:32,198 - #20 [
INFO  02:51:32,198 - #21 ]
INFO  02:51:32,198 - #8 ,
INFO  02:51:32,198 - #27 a
INFO  02:51:32,198 - #8 ,
INFO  02:51:32,198 - #27 b
INFO  02:51:32,198 - #5 ;
INFO  02:51:32,199 - #27 char
INFO  02:51:32,199 - #27 nizch
INFO  02:51:32,199 - #20 [
INFO  02:51:32,199 - #21 ]
INFO  02:51:32,199 - #8 ,
INFO  02:51:32,199 - #27 c
INFO  02:51:32,200 - #5 ;
INFO  02:51:32,200 - #27 bool
INFO  02:51:32,200 - #27 s1
INFO  02:51:32,200 - #5 ;
INFO  02:51:32,200 - #27 bool
INFO  02:51:32,200 - #27 nizbool
INFO  02:51:32,200 - #20 [
INFO  02:51:32,200 - #21 ]
INFO  02:51:32,200 - #5 ;
INFO  02:51:32,200 - #3 {
INFO  02:51:32,200 - #13 void
INFO  02:51:32,201 - #27 main
INFO  02:51:32,201 - #6 (
INFO  02:51:32,201 - #7 )
INFO  02:51:32,201 - #27 int
INFO  02:51:32,202 - #27 bodovi
INFO  02:51:32,202 - #5 ;
INFO  02:51:32,202 - #27 bool
INFO  02:51:32,202 - #27 bt
INFO  02:51:32,202 - #5 ;
INFO  02:51:32,202 - #27 int
INFO  02:51:32,202 - #27 s
INFO  02:51:32,202 - #5 ;
INFO  02:51:32,202 - #3 {
INFO  02:51:32,202 - #9 print
INFO  02:51:32,203 - #6 (
INFO  02:51:32,203 - #26 1
INFO  02:51:32,203 - #7 )
INFO  02:51:32,204 - #5 ;
INFO  02:51:32,204 - #4 }
INFO  02:51:32,204 - #4 }
INFO  02:51:32,211 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:51:32,212 - ===================================
INFO  02:51:32,214 - Deklarisana je konsanta int nula = 0
INFO  02:51:32,214 - Deklarisana je konsanta int jedan = 1
INFO  02:51:32,214 - Deklarisana je konsanta int pet = 5
INFO  02:51:32,214 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  02:51:32,215 - Deklarisan je niz niz
INFO  02:51:32,215 - Deklarisan je niz niz2
INFO  02:51:32,215 - Deklarisana promenljiva a
INFO  02:51:32,215 - Deklarisana promenljiva b
INFO  02:51:32,215 - Deklarisan je niz nizch
INFO  02:51:32,215 - Deklarisana promenljiva c
INFO  02:51:32,215 - Deklarisana promenljiva s1
INFO  02:51:32,215 - Deklarisan je niz nizbool
INFO  02:51:32,215 - Obradjuje se funkcija main na liniji 13
INFO  02:51:32,215 - Deklarisana promenljiva bodovi
INFO  02:51:32,215 - Deklarisana promenljiva bt
INFO  02:51:32,215 - Deklarisana promenljiva s
INFO  02:51:32,215 -  Print count calls = 1
INFO  02:51:32,216 -  Deklarisanih promenljivih ima = 11
INFO  02:51:32,216 - ===================================
INFO  02:51:32,220 - Parsiranje uspesno zavrseno!
INFO  02:51:40,453 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  02:51:40,505 - #2 program
INFO  02:51:40,505 - #27 MJProgram
INFO  02:51:40,505 - #23 const
INFO  02:51:40,507 - #27 int
INFO  02:51:40,507 - #27 nula
INFO  02:51:40,508 - #12 =
INFO  02:51:40,508 - #26 0
INFO  02:51:40,508 - #5 ;
INFO  02:51:40,508 - #23 const
INFO  02:51:40,509 - #27 int
INFO  02:51:40,509 - #27 jedan
INFO  02:51:40,509 - #12 =
INFO  02:51:40,509 - #26 1
INFO  02:51:40,509 - #5 ;
INFO  02:51:40,509 - #23 const
INFO  02:51:40,509 - #27 int
INFO  02:51:40,509 - #27 pet
INFO  02:51:40,509 - #12 =
INFO  02:51:40,509 - #26 5
INFO  02:51:40,509 - #5 ;
INFO  02:51:40,509 - #23 const
INFO  02:51:40,510 - #27 char
INFO  02:51:40,510 - #27 pet1
INFO  02:51:40,510 - #12 =
INFO  02:51:40,510 - #28 c
INFO  02:51:40,510 - #5 ;
INFO  02:51:40,510 - #27 int
INFO  02:51:40,510 - #27 niz
INFO  02:51:40,510 - #20 [
INFO  02:51:40,510 - #21 ]
INFO  02:51:40,510 - #8 ,
INFO  02:51:40,511 - #27 niz2
INFO  02:51:40,511 - #20 [
INFO  02:51:40,511 - #21 ]
INFO  02:51:40,511 - #8 ,
INFO  02:51:40,511 - #27 a
INFO  02:51:40,511 - #8 ,
INFO  02:51:40,511 - #27 b
INFO  02:51:40,512 - #5 ;
INFO  02:51:40,512 - #27 char
INFO  02:51:40,512 - #27 nizch
INFO  02:51:40,512 - #20 [
INFO  02:51:40,512 - #21 ]
INFO  02:51:40,513 - #8 ,
INFO  02:51:40,513 - #27 c
INFO  02:51:40,513 - #5 ;
INFO  02:51:40,513 - #27 bool
INFO  02:51:40,513 - #27 s1
INFO  02:51:40,513 - #5 ;
INFO  02:51:40,513 - #27 bool
INFO  02:51:40,513 - #27 nizbool
INFO  02:51:40,513 - #20 [
INFO  02:51:40,513 - #21 ]
INFO  02:51:40,513 - #5 ;
INFO  02:51:40,514 - #3 {
INFO  02:51:40,514 - #13 void
INFO  02:51:40,515 - #27 main
INFO  02:51:40,515 - #6 (
INFO  02:51:40,515 - #7 )
INFO  02:51:40,515 - #27 int
INFO  02:51:40,515 - #27 bodovi
INFO  02:51:40,515 - #5 ;
INFO  02:51:40,516 - #27 bool
INFO  02:51:40,516 - #27 bt
INFO  02:51:40,516 - #5 ;
INFO  02:51:40,516 - #27 int
INFO  02:51:40,516 - #27 s
INFO  02:51:40,516 - #5 ;
INFO  02:51:40,516 - #3 {
INFO  02:51:40,516 - #9 print
INFO  02:51:40,517 - #6 (
INFO  02:51:40,517 - #26 1
INFO  02:51:40,517 - #7 )
INFO  02:51:40,518 - #5 ;
INFO  02:51:40,518 - #4 }
INFO  02:51:40,519 - #4 }
INFO  02:51:40,531 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:51:40,531 - ===================================
INFO  02:51:40,551 - Deklarisana je konsanta int nula = 0
INFO  02:51:40,552 - Deklarisana je konsanta int jedan = 1
INFO  02:51:40,552 - Deklarisana je konsanta int pet = 5
INFO  02:51:40,552 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  02:51:40,553 - Deklarisan je niz niz
INFO  02:51:40,553 - Deklarisan je niz niz2
INFO  02:51:40,553 - Deklarisana promenljiva a
INFO  02:51:40,554 - Deklarisana promenljiva b
INFO  02:51:40,554 - Deklarisan je niz nizch
INFO  02:51:40,554 - Deklarisana promenljiva c
INFO  02:51:40,554 - Deklarisana promenljiva s1
INFO  02:51:40,554 - Deklarisan je niz nizbool
INFO  02:51:40,554 - Obradjuje se funkcija main na liniji 13
INFO  02:51:40,554 - Deklarisana promenljiva bodovi
INFO  02:51:40,554 - Deklarisana promenljiva bt
INFO  02:51:40,554 - Deklarisana promenljiva s
INFO  02:51:40,554 -  Print count calls = 1
INFO  02:51:40,554 -  Deklarisanih promenljivih ima = 11
INFO  02:51:40,555 - ===================================
INFO  02:52:04,550 - Parsiranje uspesno zavrseno!
INFO  02:57:49,020 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  02:57:49,081 - #2 program
INFO  02:57:49,081 - #27 MJProgram
INFO  02:57:49,081 - #23 const
INFO  02:57:49,083 - #27 int
INFO  02:57:49,083 - #27 nula
INFO  02:57:49,084 - #12 =
INFO  02:57:49,084 - #26 0
INFO  02:57:49,085 - #5 ;
INFO  02:57:49,085 - #23 const
INFO  02:57:49,085 - #27 int
INFO  02:57:49,085 - #27 jedan
INFO  02:57:49,085 - #12 =
INFO  02:57:49,085 - #26 1
INFO  02:57:49,085 - #5 ;
INFO  02:57:49,085 - #23 const
INFO  02:57:49,086 - #27 int
INFO  02:57:49,086 - #27 pet
INFO  02:57:49,086 - #12 =
INFO  02:57:49,086 - #26 5
INFO  02:57:49,086 - #5 ;
INFO  02:57:49,086 - #23 const
INFO  02:57:49,086 - #27 char
INFO  02:57:49,086 - #27 pet1
INFO  02:57:49,086 - #12 =
INFO  02:57:49,086 - #28 c
INFO  02:57:49,086 - #5 ;
INFO  02:57:49,087 - #27 int
INFO  02:57:49,087 - #27 niz
INFO  02:57:49,087 - #20 [
INFO  02:57:49,087 - #21 ]
INFO  02:57:49,087 - #8 ,
INFO  02:57:49,087 - #27 niz2
INFO  02:57:49,087 - #20 [
INFO  02:57:49,087 - #21 ]
INFO  02:57:49,087 - #8 ,
INFO  02:57:49,087 - #27 a
INFO  02:57:49,088 - #8 ,
INFO  02:57:49,088 - #27 b
INFO  02:57:49,088 - #5 ;
INFO  02:57:49,088 - #27 char
INFO  02:57:49,088 - #27 nizch
INFO  02:57:49,088 - #20 [
INFO  02:57:49,089 - #21 ]
INFO  02:57:49,089 - #8 ,
INFO  02:57:49,089 - #27 c
INFO  02:57:49,089 - #5 ;
INFO  02:57:49,089 - #27 bool
INFO  02:57:49,089 - #27 s1
INFO  02:57:49,089 - #5 ;
INFO  02:57:49,089 - #27 bool
INFO  02:57:49,089 - #27 nizbool
INFO  02:57:49,089 - #20 [
INFO  02:57:49,089 - #21 ]
INFO  02:57:49,089 - #5 ;
INFO  02:57:49,089 - #3 {
INFO  02:57:49,090 - #13 void
INFO  02:57:49,091 - #27 main
INFO  02:57:49,091 - #6 (
INFO  02:57:49,091 - #7 )
INFO  02:57:49,091 - #27 int
INFO  02:57:49,091 - #27 bodovi
INFO  02:57:49,091 - #5 ;
INFO  02:57:49,092 - #27 bool
INFO  02:57:49,092 - #27 bt
INFO  02:57:49,092 - #5 ;
INFO  02:57:49,092 - #27 int
INFO  02:57:49,092 - #27 s
INFO  02:57:49,092 - #5 ;
INFO  02:57:49,092 - #3 {
INFO  02:57:49,092 - #9 print
INFO  02:57:49,094 - #6 (
INFO  02:57:49,094 - #26 1
INFO  02:57:49,094 - #7 )
INFO  02:57:49,095 - #5 ;
INFO  02:57:49,095 - #4 }
INFO  02:57:49,096 - #4 }
INFO  02:57:49,107 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:57:49,107 - ===================================
INFO  02:57:49,123 - Deklarisana je konsanta int nula = 0
INFO  02:57:49,123 - Deklarisana je konsanta int jedan = 1
INFO  02:57:49,123 - Deklarisana je konsanta int pet = 5
INFO  02:57:49,123 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  02:57:49,123 - Deklarisan je niz niz
INFO  02:57:49,123 - Deklarisan je niz niz2
INFO  02:57:49,123 - Deklarisana promenljiva a
INFO  02:57:49,123 - Deklarisana promenljiva b
INFO  02:57:49,123 - Deklarisan je niz nizch
INFO  02:57:49,123 - Deklarisana promenljiva c
INFO  02:57:49,124 - Deklarisana promenljiva s1
INFO  02:57:49,124 - Deklarisan je niz nizbool
INFO  02:57:49,124 - Obradjuje se funkcija main na liniji 13
INFO  02:57:49,124 - Deklarisana promenljiva bodovi
INFO  02:57:49,124 - Deklarisana promenljiva bt
INFO  02:57:49,124 - Deklarisana promenljiva s
INFO  02:57:49,124 -  Print count calls = 1
INFO  02:57:49,124 -  Deklarisanih promenljivih ima = 11
INFO  02:57:49,124 - ===================================
INFO  02:58:29,782 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  02:58:29,845 - #2 program
INFO  02:58:29,845 - #27 MJProgram
INFO  02:58:29,845 - #23 const
INFO  02:58:29,847 - #27 int
INFO  02:58:29,847 - #27 nula
INFO  02:58:29,848 - #12 =
INFO  02:58:29,848 - #26 0
INFO  02:58:29,848 - #5 ;
INFO  02:58:29,849 - #23 const
INFO  02:58:29,849 - #27 int
INFO  02:58:29,849 - #27 jedan
INFO  02:58:29,849 - #12 =
INFO  02:58:29,849 - #26 1
INFO  02:58:29,849 - #5 ;
INFO  02:58:29,849 - #23 const
INFO  02:58:29,849 - #27 int
INFO  02:58:29,849 - #27 pet
INFO  02:58:29,850 - #12 =
INFO  02:58:29,850 - #26 5
INFO  02:58:29,850 - #5 ;
INFO  02:58:29,850 - #23 const
INFO  02:58:29,850 - #27 char
INFO  02:58:29,850 - #27 pet1
INFO  02:58:29,850 - #12 =
INFO  02:58:29,850 - #28 c
INFO  02:58:29,850 - #5 ;
INFO  02:58:29,850 - #27 int
INFO  02:58:29,850 - #27 niz
INFO  02:58:29,850 - #20 [
INFO  02:58:29,850 - #21 ]
INFO  02:58:29,850 - #8 ,
INFO  02:58:29,851 - #27 niz2
INFO  02:58:29,851 - #20 [
INFO  02:58:29,851 - #21 ]
INFO  02:58:29,851 - #8 ,
INFO  02:58:29,851 - #27 a
INFO  02:58:29,851 - #8 ,
INFO  02:58:29,851 - #27 b
INFO  02:58:29,851 - #5 ;
INFO  02:58:29,851 - #27 char
INFO  02:58:29,852 - #27 nizch
INFO  02:58:29,852 - #20 [
INFO  02:58:29,852 - #21 ]
INFO  02:58:29,852 - #8 ,
INFO  02:58:29,852 - #27 c
INFO  02:58:29,852 - #5 ;
INFO  02:58:29,852 - #27 bool
INFO  02:58:29,852 - #27 s1
INFO  02:58:29,852 - #5 ;
INFO  02:58:29,852 - #27 bool
INFO  02:58:29,852 - #27 nizbool
INFO  02:58:29,852 - #20 [
INFO  02:58:29,852 - #21 ]
INFO  02:58:29,852 - #5 ;
INFO  02:58:29,853 - #3 {
INFO  02:58:29,853 - #13 void
INFO  02:58:29,854 - #27 main
INFO  02:58:29,854 - #6 (
INFO  02:58:29,854 - #7 )
INFO  02:58:29,854 - #27 int
INFO  02:58:29,854 - #27 bodovi
INFO  02:58:29,854 - #5 ;
INFO  02:58:29,854 - #27 bool
INFO  02:58:29,854 - #27 bt
INFO  02:58:29,854 - #5 ;
INFO  02:58:29,855 - #27 int
INFO  02:58:29,855 - #27 s
INFO  02:58:29,855 - #5 ;
INFO  02:58:29,855 - #3 {
INFO  02:58:29,855 - #9 print
INFO  02:58:29,856 - #6 (
INFO  02:58:29,856 - #26 1
INFO  02:58:29,856 - #7 )
INFO  02:58:29,857 - #5 ;
INFO  02:58:29,857 - #4 }
INFO  02:58:29,857 - #4 }
INFO  02:58:29,867 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:58:29,868 - ===================================
INFO  02:58:29,885 - Deklarisana je konsanta int nula = 0
INFO  02:58:29,885 - Deklarisana je konsanta int jedan = 1
INFO  02:58:29,885 - Deklarisana je konsanta int pet = 5
INFO  02:58:29,885 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  02:58:29,885 - Deklarisan je niz niz
INFO  02:58:29,886 - Deklarisan je niz niz2
INFO  02:58:29,886 - Deklarisana promenljiva a
INFO  02:58:29,886 - Deklarisana promenljiva b
INFO  02:58:29,886 - Deklarisan je niz nizch
INFO  02:58:29,886 - Deklarisana promenljiva c
INFO  02:58:29,886 - Deklarisana promenljiva s1
INFO  02:58:29,886 - Deklarisan je niz nizbool
INFO  02:58:29,886 - Obradjuje se funkcija main na liniji 13
INFO  02:58:29,886 - Deklarisana promenljiva bodovi
INFO  02:58:29,886 - Deklarisana promenljiva bt
INFO  02:58:29,886 - Deklarisana promenljiva s
INFO  02:58:29,886 -  Print count calls = 1
INFO  02:58:29,886 -  Deklarisanih promenljivih ima = 11
INFO  02:58:29,886 - ===================================
INFO  03:00:31,833 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:00:31,887 - #2 program
INFO  03:00:31,887 - #27 MJProgram
INFO  03:00:31,887 - #23 const
INFO  03:00:31,889 - #27 int
INFO  03:00:31,889 - #27 nula
INFO  03:00:31,890 - #12 =
INFO  03:00:31,890 - #26 0
INFO  03:00:31,890 - #5 ;
INFO  03:00:31,890 - #23 const
INFO  03:00:31,891 - #27 int
INFO  03:00:31,891 - #27 jedan
INFO  03:00:31,891 - #12 =
INFO  03:00:31,891 - #26 1
INFO  03:00:31,891 - #5 ;
INFO  03:00:31,891 - #23 const
INFO  03:00:31,891 - #27 int
INFO  03:00:31,891 - #27 pet
INFO  03:00:31,891 - #12 =
INFO  03:00:31,891 - #26 5
INFO  03:00:31,891 - #5 ;
INFO  03:00:31,891 - #23 const
INFO  03:00:31,891 - #27 char
INFO  03:00:31,891 - #27 pet1
INFO  03:00:31,892 - #12 =
INFO  03:00:31,892 - #28 c
INFO  03:00:31,892 - #5 ;
INFO  03:00:31,892 - #27 int
INFO  03:00:31,892 - #27 niz
INFO  03:00:31,892 - #20 [
INFO  03:00:31,892 - #21 ]
INFO  03:00:31,892 - #8 ,
INFO  03:00:31,892 - #27 niz2
INFO  03:00:31,892 - #20 [
INFO  03:00:31,892 - #21 ]
INFO  03:00:31,892 - #8 ,
INFO  03:00:31,892 - #27 a
INFO  03:00:31,893 - #8 ,
INFO  03:00:31,893 - #27 b
INFO  03:00:31,893 - #5 ;
INFO  03:00:31,894 - #27 char
INFO  03:00:31,894 - #27 nizch
INFO  03:00:31,894 - #20 [
INFO  03:00:31,895 - #21 ]
INFO  03:00:31,895 - #8 ,
INFO  03:00:31,895 - #27 c
INFO  03:00:31,895 - #5 ;
INFO  03:00:31,895 - #27 bool
INFO  03:00:31,895 - #27 s1
INFO  03:00:31,895 - #5 ;
INFO  03:00:31,895 - #27 bool
INFO  03:00:31,895 - #27 nizbool
INFO  03:00:31,896 - #20 [
INFO  03:00:31,896 - #21 ]
INFO  03:00:31,896 - #5 ;
INFO  03:00:31,896 - #3 {
INFO  03:00:31,896 - #13 void
INFO  03:00:31,897 - #27 main
INFO  03:00:31,897 - #6 (
INFO  03:00:31,898 - #7 )
INFO  03:00:31,898 - #27 int
INFO  03:00:31,898 - #27 bodovi
INFO  03:00:31,898 - #5 ;
INFO  03:00:31,898 - #27 bool
INFO  03:00:31,898 - #27 bt
INFO  03:00:31,898 - #5 ;
INFO  03:00:31,898 - #27 int
INFO  03:00:31,898 - #27 s
INFO  03:00:31,899 - #5 ;
INFO  03:00:31,899 - #3 {
INFO  03:00:31,899 - #9 print
INFO  03:00:31,900 - #6 (
INFO  03:00:31,900 - #26 1
INFO  03:00:31,900 - #7 )
INFO  03:00:31,902 - #5 ;
INFO  03:00:31,902 - #4 }
INFO  03:00:31,902 - #4 }
INFO  03:00:31,915 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:00:31,916 - ===================================
INFO  03:00:31,934 - Deklarisana je konsanta int nula = 0
INFO  03:00:31,934 - Deklarisana je konsanta int jedan = 1
INFO  03:00:31,935 - Deklarisana je konsanta int pet = 5
INFO  03:00:31,935 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:00:31,935 - Deklarisan je niz niz
INFO  03:00:31,935 - Deklarisan je niz niz2
INFO  03:00:31,935 - Deklarisana promenljiva a
INFO  03:00:31,935 - Deklarisana promenljiva b
INFO  03:00:31,935 - Deklarisan je niz nizch
INFO  03:00:31,936 - Deklarisana promenljiva c
INFO  03:00:31,936 - Deklarisana promenljiva s1
INFO  03:00:31,936 - Deklarisan je niz nizbool
INFO  03:00:31,936 - Obradjuje se funkcija main na liniji 13
INFO  03:00:31,936 - Deklarisana promenljiva bodovi
INFO  03:00:31,936 - Deklarisana promenljiva bt
INFO  03:00:31,936 - Deklarisana promenljiva s
INFO  03:00:31,936 -  Print count calls = 1
INFO  03:00:31,936 -  Deklarisanih promenljivih ima = 11
INFO  03:00:31,936 - ===================================
INFO  03:01:43,660 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:01:43,742 - #2 program
INFO  03:01:43,743 - #27 MJProgram
INFO  03:01:43,743 - #23 const
INFO  03:01:43,745 - #27 int
INFO  03:01:43,745 - #27 nula
INFO  03:01:43,747 - #12 =
INFO  03:01:43,747 - #26 0
INFO  03:01:43,747 - #5 ;
INFO  03:01:43,747 - #23 const
INFO  03:01:43,748 - #27 int
INFO  03:01:43,748 - #27 jedan
INFO  03:01:43,748 - #12 =
INFO  03:01:43,748 - #26 1
INFO  03:01:43,748 - #5 ;
INFO  03:01:43,748 - #23 const
INFO  03:01:43,748 - #27 int
INFO  03:01:43,748 - #27 pet
INFO  03:01:43,748 - #12 =
INFO  03:01:43,748 - #26 5
INFO  03:01:43,749 - #5 ;
INFO  03:01:43,749 - #23 const
INFO  03:01:43,749 - #27 char
INFO  03:01:43,749 - #27 pet1
INFO  03:01:43,749 - #12 =
INFO  03:01:43,749 - #28 c
INFO  03:01:43,749 - #5 ;
INFO  03:01:43,749 - #27 int
INFO  03:01:43,749 - #27 niz
INFO  03:01:43,750 - #20 [
INFO  03:01:43,750 - #21 ]
INFO  03:01:43,750 - #8 ,
INFO  03:01:43,750 - #27 niz2
INFO  03:01:43,750 - #20 [
INFO  03:01:43,750 - #21 ]
INFO  03:01:43,750 - #8 ,
INFO  03:01:43,750 - #27 a
INFO  03:01:43,750 - #8 ,
INFO  03:01:43,751 - #27 b
INFO  03:01:43,751 - #5 ;
INFO  03:01:43,751 - #27 char
INFO  03:01:43,751 - #27 nizch
INFO  03:01:43,752 - #20 [
INFO  03:01:43,752 - #21 ]
INFO  03:01:43,752 - #8 ,
INFO  03:01:43,752 - #27 c
INFO  03:01:43,752 - #5 ;
INFO  03:01:43,752 - #27 bool
INFO  03:01:43,752 - #27 s1
INFO  03:01:43,752 - #5 ;
INFO  03:01:43,752 - #27 bool
INFO  03:01:43,752 - #27 nizbool
INFO  03:01:43,753 - #20 [
INFO  03:01:43,753 - #21 ]
INFO  03:01:43,753 - #5 ;
INFO  03:01:43,753 - #3 {
INFO  03:01:43,753 - #13 void
INFO  03:01:43,754 - #27 main
INFO  03:01:43,755 - #6 (
INFO  03:01:43,755 - #7 )
INFO  03:01:43,755 - #27 int
INFO  03:01:43,755 - #27 bodovi
INFO  03:01:43,755 - #5 ;
INFO  03:01:43,755 - #27 bool
INFO  03:01:43,756 - #27 bt
INFO  03:01:43,756 - #5 ;
INFO  03:01:43,756 - #27 int
INFO  03:01:43,756 - #27 s
INFO  03:01:43,756 - #5 ;
INFO  03:01:43,756 - #3 {
INFO  03:01:43,756 - #9 print
INFO  03:01:43,758 - #6 (
INFO  03:01:43,758 - #26 1
INFO  03:01:43,758 - #7 )
INFO  03:01:43,760 - #5 ;
INFO  03:01:43,760 - #4 }
INFO  03:01:43,761 - #4 }
INFO  03:01:43,778 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:01:43,779 - ===================================
INFO  03:01:43,803 - Deklarisana je konsanta int nula = 0
INFO  03:01:43,803 - Deklarisana je konsanta int jedan = 1
INFO  03:01:43,803 - Deklarisana je konsanta int pet = 5
INFO  03:01:43,803 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:01:43,803 - Deklarisan je niz niz
INFO  03:01:43,804 - Deklarisan je niz niz2
INFO  03:01:43,804 - Deklarisana promenljiva a
INFO  03:01:43,804 - Deklarisana promenljiva b
INFO  03:01:43,804 - Deklarisan je niz nizch
INFO  03:01:43,804 - Deklarisana promenljiva c
INFO  03:01:43,804 - Deklarisana promenljiva s1
INFO  03:01:43,804 - Deklarisan je niz nizbool
INFO  03:01:43,804 - Obradjuje se funkcija main na liniji 13
INFO  03:01:43,804 - Deklarisana promenljiva bodovi
INFO  03:01:43,805 - Deklarisana promenljiva bt
INFO  03:01:43,805 - Deklarisana promenljiva s
INFO  03:01:43,805 -  Print count calls = 1
INFO  03:01:43,805 -  Deklarisanih promenljivih ima = 11
INFO  03:01:43,805 - ===================================
INFO  03:02:05,760 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:02:05,828 - #2 program
INFO  03:02:05,828 - #27 MJProgram
INFO  03:02:05,828 - #23 const
INFO  03:02:05,830 - #27 int
INFO  03:02:05,830 - #27 nula
INFO  03:02:05,831 - #12 =
INFO  03:02:05,831 - #26 0
INFO  03:02:05,831 - #5 ;
INFO  03:02:05,832 - #23 const
INFO  03:02:05,832 - #27 int
INFO  03:02:05,832 - #27 jedan
INFO  03:02:05,833 - #12 =
INFO  03:02:05,833 - #26 1
INFO  03:02:05,833 - #5 ;
INFO  03:02:05,833 - #23 const
INFO  03:02:05,833 - #27 int
INFO  03:02:05,833 - #27 pet
INFO  03:02:05,833 - #12 =
INFO  03:02:05,834 - #26 5
INFO  03:02:05,834 - #5 ;
INFO  03:02:05,834 - #23 const
INFO  03:02:05,834 - #27 char
INFO  03:02:05,834 - #27 pet1
INFO  03:02:05,834 - #12 =
INFO  03:02:05,834 - #28 c
INFO  03:02:05,835 - #5 ;
INFO  03:02:05,835 - #27 int
INFO  03:02:05,835 - #27 niz
INFO  03:02:05,835 - #20 [
INFO  03:02:05,835 - #21 ]
INFO  03:02:05,835 - #8 ,
INFO  03:02:05,836 - #27 niz2
INFO  03:02:05,836 - #20 [
INFO  03:02:05,836 - #21 ]
INFO  03:02:05,836 - #8 ,
INFO  03:02:05,836 - #27 a
INFO  03:02:05,836 - #8 ,
INFO  03:02:05,836 - #27 b
INFO  03:02:05,837 - #5 ;
INFO  03:02:05,837 - #27 char
INFO  03:02:05,837 - #27 nizch
INFO  03:02:05,838 - #20 [
INFO  03:02:05,838 - #21 ]
INFO  03:02:05,838 - #8 ,
INFO  03:02:05,838 - #27 c
INFO  03:02:05,838 - #5 ;
INFO  03:02:05,838 - #27 bool
INFO  03:02:05,838 - #27 s1
INFO  03:02:05,839 - #5 ;
INFO  03:02:05,839 - #27 bool
INFO  03:02:05,839 - #27 nizbool
INFO  03:02:05,839 - #20 [
INFO  03:02:05,839 - #21 ]
INFO  03:02:05,839 - #5 ;
INFO  03:02:05,839 - #3 {
INFO  03:02:05,839 - #13 void
INFO  03:02:05,841 - #27 main
INFO  03:02:05,841 - #6 (
INFO  03:02:05,841 - #7 )
INFO  03:02:05,841 - #27 int
INFO  03:02:05,841 - #27 bodovi
INFO  03:02:05,842 - #5 ;
INFO  03:02:05,842 - #27 bool
INFO  03:02:05,842 - #27 bt
INFO  03:02:05,842 - #5 ;
INFO  03:02:05,842 - #27 int
INFO  03:02:05,842 - #27 s
INFO  03:02:05,842 - #5 ;
INFO  03:02:05,843 - #3 {
INFO  03:02:05,843 - #9 print
INFO  03:02:05,844 - #6 (
INFO  03:02:05,844 - #26 1
INFO  03:02:05,844 - #7 )
INFO  03:02:05,846 - #5 ;
INFO  03:02:05,846 - #4 }
INFO  03:02:05,846 - #4 }
INFO  03:02:05,857 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:02:05,858 - ===================================
INFO  03:02:05,862 - Deklarisana je konsanta int nula = 0
INFO  03:02:05,862 - Deklarisana je konsanta int jedan = 1
INFO  03:02:05,862 - Deklarisana je konsanta int pet = 5
INFO  03:02:05,863 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:02:05,863 - Deklarisan je niz niz
INFO  03:02:05,863 - Deklarisan je niz niz2
INFO  03:02:05,863 - Deklarisana promenljiva a
INFO  03:02:05,863 - Deklarisana promenljiva b
INFO  03:02:05,863 - Deklarisan je niz nizch
INFO  03:02:05,863 - Deklarisana promenljiva c
INFO  03:02:05,863 - Deklarisana promenljiva s1
INFO  03:02:05,864 - Deklarisan je niz nizbool
INFO  03:02:05,864 - Obradjuje se funkcija main na liniji 13
INFO  03:02:05,864 - Deklarisana promenljiva bodovi
INFO  03:02:05,864 - Deklarisana promenljiva bt
INFO  03:02:05,864 - Deklarisana promenljiva s
INFO  03:02:05,864 -  Print count calls = 1
INFO  03:02:05,864 -  Deklarisanih promenljivih ima = 11
INFO  03:02:05,865 - ===================================
INFO  03:02:05,872 - Parsiranje uspesno zavrseno!
INFO  03:02:12,705 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:02:12,789 - #2 program
INFO  03:02:12,789 - #27 MJProgram
INFO  03:02:12,789 - #23 const
INFO  03:02:12,792 - #27 int
INFO  03:02:12,792 - #27 nula
INFO  03:02:12,794 - #12 =
INFO  03:02:12,794 - #26 0
INFO  03:02:12,794 - #5 ;
INFO  03:02:12,795 - #23 const
INFO  03:02:12,795 - #27 int
INFO  03:02:12,795 - #27 jedan
INFO  03:02:12,795 - #12 =
INFO  03:02:12,795 - #26 1
INFO  03:02:12,795 - #5 ;
INFO  03:02:12,795 - #23 const
INFO  03:02:12,796 - #27 int
INFO  03:02:12,796 - #27 pet
INFO  03:02:12,796 - #12 =
INFO  03:02:12,796 - #26 5
INFO  03:02:12,796 - #5 ;
INFO  03:02:12,796 - #23 const
INFO  03:02:12,796 - #27 char
INFO  03:02:12,796 - #27 pet1
INFO  03:02:12,796 - #12 =
INFO  03:02:12,796 - #28 c
INFO  03:02:12,797 - #5 ;
INFO  03:02:12,797 - #27 int
INFO  03:02:12,797 - #27 niz
INFO  03:02:12,797 - #20 [
INFO  03:02:12,797 - #21 ]
INFO  03:02:12,797 - #8 ,
INFO  03:02:12,797 - #27 niz2
INFO  03:02:12,797 - #20 [
INFO  03:02:12,797 - #21 ]
INFO  03:02:12,798 - #8 ,
INFO  03:02:12,798 - #27 a
INFO  03:02:12,798 - #8 ,
INFO  03:02:12,798 - #27 b
INFO  03:02:12,798 - #5 ;
INFO  03:02:12,798 - #27 char
INFO  03:02:12,799 - #27 nizch
INFO  03:02:12,799 - #20 [
INFO  03:02:12,799 - #21 ]
INFO  03:02:12,799 - #8 ,
INFO  03:02:12,799 - #27 c
INFO  03:02:12,799 - #5 ;
INFO  03:02:12,799 - #27 bool
INFO  03:02:12,799 - #27 s1
INFO  03:02:12,799 - #5 ;
INFO  03:02:12,800 - #27 bool
INFO  03:02:12,800 - #27 nizbool
INFO  03:02:12,800 - #20 [
INFO  03:02:12,800 - #21 ]
INFO  03:02:12,800 - #5 ;
INFO  03:02:12,800 - #3 {
INFO  03:02:12,800 - #13 void
INFO  03:02:12,802 - #27 main
INFO  03:02:12,802 - #6 (
INFO  03:02:12,802 - #7 )
INFO  03:02:12,802 - #27 int
INFO  03:02:12,802 - #27 bodovi
INFO  03:02:12,803 - #5 ;
INFO  03:02:12,803 - #27 bool
INFO  03:02:12,803 - #27 bt
INFO  03:02:12,803 - #5 ;
INFO  03:02:12,803 - #27 int
INFO  03:02:12,803 - #27 s
INFO  03:02:12,804 - #5 ;
INFO  03:02:12,804 - #3 {
INFO  03:02:12,804 - #9 print
INFO  03:02:12,806 - #6 (
INFO  03:02:12,806 - #26 1
INFO  03:02:12,806 - #7 )
INFO  03:02:12,808 - #5 ;
INFO  03:02:12,808 - #4 }
INFO  03:02:12,808 - #4 }
INFO  03:02:12,826 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:02:12,827 - ===================================
INFO  03:02:12,856 - Deklarisana je konsanta int nula = 0
INFO  03:02:12,856 - Deklarisana je konsanta int jedan = 1
INFO  03:02:12,856 - Deklarisana je konsanta int pet = 5
INFO  03:02:12,856 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:02:12,856 - Deklarisan je niz niz
INFO  03:02:12,856 - Deklarisan je niz niz2
INFO  03:02:12,857 - Deklarisana promenljiva a
INFO  03:02:12,857 - Deklarisana promenljiva b
INFO  03:02:12,857 - Deklarisan je niz nizch
INFO  03:02:12,857 - Deklarisana promenljiva c
INFO  03:02:12,857 - Deklarisana promenljiva s1
INFO  03:02:12,857 - Deklarisan je niz nizbool
INFO  03:02:12,858 - Obradjuje se funkcija main na liniji 13
INFO  03:02:12,858 - Deklarisana promenljiva bodovi
INFO  03:02:12,858 - Deklarisana promenljiva bt
INFO  03:02:12,858 - Deklarisana promenljiva s
INFO  03:02:12,858 -  Print count calls = 1
INFO  03:02:12,859 -  Deklarisanih promenljivih ima = 11
INFO  03:02:12,859 - ===================================
INFO  03:02:53,247 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:02:53,333 - #2 program
INFO  03:02:53,333 - #27 MJProgram
INFO  03:02:53,334 - #23 const
INFO  03:02:53,337 - #27 int
INFO  03:02:53,337 - #27 nula
INFO  03:02:53,338 - #12 =
INFO  03:02:53,338 - #26 0
INFO  03:02:53,338 - #5 ;
INFO  03:02:53,339 - #23 const
INFO  03:02:53,339 - #27 int
INFO  03:02:53,339 - #27 jedan
INFO  03:02:53,339 - #12 =
INFO  03:02:53,339 - #26 1
INFO  03:02:53,339 - #5 ;
INFO  03:02:53,340 - #23 const
INFO  03:02:53,340 - #27 int
INFO  03:02:53,340 - #27 pet
INFO  03:02:53,340 - #12 =
INFO  03:02:53,340 - #26 5
INFO  03:02:53,340 - #5 ;
INFO  03:02:53,340 - #23 const
INFO  03:02:53,340 - #27 char
INFO  03:02:53,340 - #27 pet1
INFO  03:02:53,341 - #12 =
INFO  03:02:53,341 - #28 c
INFO  03:02:53,341 - #5 ;
INFO  03:02:53,341 - #27 int
INFO  03:02:53,341 - #27 niz
INFO  03:02:53,341 - #20 [
INFO  03:02:53,341 - #21 ]
INFO  03:02:53,342 - #8 ,
INFO  03:02:53,342 - #27 niz2
INFO  03:02:53,342 - #20 [
INFO  03:02:53,342 - #21 ]
INFO  03:02:53,342 - #8 ,
INFO  03:02:53,342 - #27 a
INFO  03:02:53,342 - #8 ,
INFO  03:02:53,342 - #27 b
INFO  03:02:53,343 - #5 ;
INFO  03:02:53,343 - #27 char
INFO  03:02:53,343 - #27 nizch
INFO  03:02:53,344 - #20 [
INFO  03:02:53,344 - #21 ]
INFO  03:02:53,344 - #8 ,
INFO  03:02:53,344 - #27 c
INFO  03:02:53,344 - #5 ;
INFO  03:02:53,344 - #27 bool
INFO  03:02:53,344 - #27 s1
INFO  03:02:53,344 - #5 ;
INFO  03:02:53,344 - #27 bool
INFO  03:02:53,345 - #27 nizbool
INFO  03:02:53,345 - #20 [
INFO  03:02:53,345 - #21 ]
INFO  03:02:53,345 - #5 ;
INFO  03:02:53,345 - #3 {
INFO  03:02:53,345 - #13 void
INFO  03:02:53,347 - #27 main
INFO  03:02:53,347 - #6 (
INFO  03:02:53,347 - #7 )
INFO  03:02:53,348 - #27 int
INFO  03:02:53,348 - #27 bodovi
INFO  03:02:53,348 - #5 ;
INFO  03:02:53,348 - #27 bool
INFO  03:02:53,348 - #27 bt
INFO  03:02:53,348 - #5 ;
INFO  03:02:53,348 - #27 int
INFO  03:02:53,348 - #27 s
INFO  03:02:53,349 - #5 ;
INFO  03:02:53,349 - #3 {
INFO  03:02:53,349 - #9 print
INFO  03:02:53,350 - #6 (
INFO  03:02:53,350 - #26 1
INFO  03:02:53,351 - #7 )
INFO  03:02:53,352 - #5 ;
INFO  03:02:53,352 - #4 }
INFO  03:02:53,353 - #4 }
INFO  03:02:53,372 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:02:53,374 - ===================================
INFO  03:02:53,401 - Deklarisana je konsanta int nula = 0
INFO  03:02:53,401 - Deklarisana je konsanta int jedan = 1
INFO  03:02:53,401 - Deklarisana je konsanta int pet = 5
INFO  03:02:53,401 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:02:53,401 - Deklarisan je niz niz
INFO  03:02:53,401 - Deklarisan je niz niz2
INFO  03:02:53,402 - Deklarisana promenljiva a
INFO  03:02:53,402 - Deklarisana promenljiva b
INFO  03:02:53,402 - Deklarisan je niz nizch
INFO  03:02:53,402 - Deklarisana promenljiva c
INFO  03:02:53,402 - Deklarisana promenljiva s1
INFO  03:02:53,402 - Deklarisan je niz nizbool
INFO  03:02:53,402 - Obradjuje se funkcija main na liniji 13
INFO  03:02:53,403 - Deklarisana promenljiva bodovi
INFO  03:02:53,403 - Deklarisana promenljiva bt
INFO  03:02:53,403 - Deklarisana promenljiva s
INFO  03:02:53,404 -  Print count calls = 1
INFO  03:02:53,404 -  Deklarisanih promenljivih ima = 11
INFO  03:02:53,404 - ===================================
INFO  03:04:50,134 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:04:50,219 - #2 program
INFO  03:04:50,219 - #27 MJProgram
INFO  03:04:50,219 - #23 const
INFO  03:04:50,222 - #27 int
INFO  03:04:50,223 - #27 nula
INFO  03:04:50,224 - #12 =
INFO  03:04:50,224 - #26 0
INFO  03:04:50,224 - #5 ;
INFO  03:04:50,225 - #23 const
INFO  03:04:50,225 - #27 int
INFO  03:04:50,225 - #27 jedan
INFO  03:04:50,225 - #12 =
INFO  03:04:50,225 - #26 1
INFO  03:04:50,225 - #5 ;
INFO  03:04:50,226 - #23 const
INFO  03:04:50,226 - #27 int
INFO  03:04:50,226 - #27 pet
INFO  03:04:50,226 - #12 =
INFO  03:04:50,226 - #26 5
INFO  03:04:50,226 - #5 ;
INFO  03:04:50,226 - #23 const
INFO  03:04:50,226 - #27 char
INFO  03:04:50,227 - #27 pet1
INFO  03:04:50,227 - #12 =
INFO  03:04:50,227 - #28 c
INFO  03:04:50,227 - #5 ;
INFO  03:04:50,227 - #27 int
INFO  03:04:50,227 - #27 niz
INFO  03:04:50,227 - #20 [
INFO  03:04:50,228 - #21 ]
INFO  03:04:50,228 - #8 ,
INFO  03:04:50,228 - #27 niz2
INFO  03:04:50,228 - #20 [
INFO  03:04:50,228 - #21 ]
INFO  03:04:50,229 - #8 ,
INFO  03:04:50,229 - #27 a
INFO  03:04:50,229 - #8 ,
INFO  03:04:50,229 - #27 b
INFO  03:04:50,229 - #5 ;
INFO  03:04:50,230 - #27 char
INFO  03:04:50,230 - #27 nizch
INFO  03:04:50,231 - #20 [
INFO  03:04:50,231 - #21 ]
INFO  03:04:50,231 - #8 ,
INFO  03:04:50,231 - #27 c
INFO  03:04:50,231 - #5 ;
INFO  03:04:50,231 - #27 bool
INFO  03:04:50,231 - #27 s1
INFO  03:04:50,232 - #5 ;
INFO  03:04:50,232 - #27 bool
INFO  03:04:50,232 - #27 nizbool
INFO  03:04:50,233 - #20 [
INFO  03:04:50,233 - #21 ]
INFO  03:04:50,233 - #5 ;
INFO  03:04:50,234 - #3 {
INFO  03:04:50,234 - #13 void
INFO  03:04:50,235 - #27 main
INFO  03:04:50,236 - #6 (
INFO  03:04:50,236 - #7 )
INFO  03:04:50,236 - #27 int
INFO  03:04:50,236 - #27 bodovi
INFO  03:04:50,237 - #5 ;
INFO  03:04:50,237 - #27 bool
INFO  03:04:50,237 - #27 bt
INFO  03:04:50,237 - #5 ;
INFO  03:04:50,237 - #27 int
INFO  03:04:50,237 - #27 s
INFO  03:04:50,238 - #5 ;
INFO  03:04:50,238 - #3 {
INFO  03:04:50,238 - #9 print
INFO  03:04:50,239 - #6 (
INFO  03:04:50,240 - #26 1
INFO  03:04:50,240 - #7 )
INFO  03:04:50,242 - #5 ;
INFO  03:04:50,242 - #4 }
INFO  03:04:50,243 - #4 }
INFO  03:04:50,267 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:04:50,270 - ===================================
INFO  03:04:50,296 - Deklarisana je konsanta int nula = 0
INFO  03:04:50,297 - Deklarisana je konsanta int jedan = 1
INFO  03:04:50,297 - Deklarisana je konsanta int pet = 5
INFO  03:04:50,297 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:04:50,297 - Deklarisan je niz niz
INFO  03:04:50,297 - Deklarisan je niz niz2
INFO  03:04:50,297 - Deklarisana promenljiva a
INFO  03:04:50,298 - Deklarisana promenljiva b
INFO  03:04:50,298 - Deklarisan je niz nizch
INFO  03:04:50,298 - Deklarisana promenljiva c
INFO  03:04:50,298 - Deklarisana promenljiva s1
INFO  03:04:50,298 - Deklarisan je niz nizbool
INFO  03:04:50,298 - Obradjuje se funkcija main na liniji 13
INFO  03:04:50,299 - Deklarisana promenljiva bodovi
INFO  03:04:50,300 - Deklarisana promenljiva bt
INFO  03:04:50,300 - Deklarisana promenljiva s
INFO  03:04:50,301 -  Print count calls = 1
INFO  03:04:50,301 -  Deklarisanih promenljivih ima = 11
INFO  03:04:50,301 - ===================================
INFO  03:05:46,009 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:05:46,093 - #2 program
INFO  03:05:46,093 - #27 MJProgram
INFO  03:05:46,094 - #23 const
INFO  03:05:46,096 - #27 int
INFO  03:05:46,096 - #27 nula
INFO  03:05:46,097 - #12 =
INFO  03:05:46,097 - #26 0
INFO  03:05:46,098 - #5 ;
INFO  03:05:46,098 - #23 const
INFO  03:05:46,098 - #27 int
INFO  03:05:46,098 - #27 jedan
INFO  03:05:46,098 - #12 =
INFO  03:05:46,099 - #26 1
INFO  03:05:46,099 - #5 ;
INFO  03:05:46,099 - #23 const
INFO  03:05:46,099 - #27 int
INFO  03:05:46,099 - #27 pet
INFO  03:05:46,099 - #12 =
INFO  03:05:46,099 - #26 5
INFO  03:05:46,099 - #5 ;
INFO  03:05:46,099 - #23 const
INFO  03:05:46,099 - #27 char
INFO  03:05:46,100 - #27 pet1
INFO  03:05:46,100 - #12 =
INFO  03:05:46,100 - #28 c
INFO  03:05:46,100 - #5 ;
INFO  03:05:46,100 - #27 int
INFO  03:05:46,100 - #27 niz
INFO  03:05:46,100 - #20 [
INFO  03:05:46,100 - #21 ]
INFO  03:05:46,100 - #8 ,
INFO  03:05:46,101 - #27 niz2
INFO  03:05:46,101 - #20 [
INFO  03:05:46,101 - #21 ]
INFO  03:05:46,101 - #8 ,
INFO  03:05:46,101 - #27 a
INFO  03:05:46,101 - #8 ,
INFO  03:05:46,101 - #27 b
INFO  03:05:46,101 - #5 ;
INFO  03:05:46,102 - #27 char
INFO  03:05:46,102 - #27 nizch
INFO  03:05:46,102 - #20 [
INFO  03:05:46,102 - #21 ]
INFO  03:05:46,102 - #8 ,
INFO  03:05:46,102 - #27 c
INFO  03:05:46,102 - #5 ;
INFO  03:05:46,102 - #27 bool
INFO  03:05:46,103 - #27 s1
INFO  03:05:46,103 - #5 ;
INFO  03:05:46,103 - #27 bool
INFO  03:05:46,103 - #27 nizbool
INFO  03:05:46,103 - #20 [
INFO  03:05:46,103 - #21 ]
INFO  03:05:46,103 - #5 ;
INFO  03:05:46,104 - #3 {
INFO  03:05:46,104 - #13 void
INFO  03:05:46,105 - #27 main
INFO  03:05:46,105 - #6 (
INFO  03:05:46,106 - #7 )
INFO  03:05:46,106 - #27 int
INFO  03:05:46,106 - #27 bodovi
INFO  03:05:46,106 - #5 ;
INFO  03:05:46,106 - #27 bool
INFO  03:05:46,106 - #27 bt
INFO  03:05:46,106 - #5 ;
INFO  03:05:46,106 - #27 int
INFO  03:05:46,107 - #27 s
INFO  03:05:46,107 - #5 ;
INFO  03:05:46,107 - #3 {
INFO  03:05:46,107 - #9 print
INFO  03:05:46,109 - #6 (
INFO  03:05:46,109 - #26 1
INFO  03:05:46,109 - #7 )
INFO  03:05:46,111 - #5 ;
INFO  03:05:46,111 - #4 }
INFO  03:05:46,112 - #4 }
INFO  03:05:46,131 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:05:46,132 - ===================================
INFO  03:05:46,155 - Deklarisana je konsanta int nula = 0
INFO  03:05:46,156 - Deklarisana je konsanta int jedan = 1
INFO  03:05:46,156 - Deklarisana je konsanta int pet = 5
INFO  03:05:46,156 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:05:46,156 - Deklarisan je niz niz
INFO  03:05:46,156 - Deklarisan je niz niz2
INFO  03:05:46,156 - Deklarisana promenljiva a
INFO  03:05:46,157 - Deklarisana promenljiva b
INFO  03:05:46,157 - Deklarisan je niz nizch
INFO  03:05:46,157 - Deklarisana promenljiva c
INFO  03:05:46,157 - Deklarisana promenljiva s1
INFO  03:05:46,157 - Deklarisan je niz nizbool
INFO  03:05:46,157 - Obradjuje se funkcija main na liniji 13
INFO  03:05:46,158 - Deklarisana promenljiva bodovi
INFO  03:05:46,158 - Deklarisana promenljiva bt
INFO  03:05:46,158 - Deklarisana promenljiva s
INFO  03:05:46,158 -  Print count calls = 1
INFO  03:05:46,158 -  Deklarisanih promenljivih ima = 11
INFO  03:05:46,158 - ===================================
INFO  03:07:03,179 - Parsiranje uspesno zavrseno!
INFO  03:18:49,218 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:18:49,286 - #2 program
INFO  03:18:49,286 - #27 MJProgram
INFO  03:18:49,286 - #23 const
INFO  03:18:49,289 - #27 int
INFO  03:18:49,289 - #27 nula
INFO  03:18:49,290 - #12 =
INFO  03:18:49,291 - #26 0
INFO  03:18:49,291 - #5 ;
INFO  03:18:49,291 - #23 const
INFO  03:18:49,291 - #27 int
INFO  03:18:49,292 - #27 jedan
INFO  03:18:49,292 - #12 =
INFO  03:18:49,292 - #26 1
INFO  03:18:49,292 - #5 ;
INFO  03:18:49,292 - #23 const
INFO  03:18:49,292 - #27 int
INFO  03:18:49,292 - #27 pet
INFO  03:18:49,292 - #12 =
INFO  03:18:49,293 - #26 5
INFO  03:18:49,293 - #5 ;
INFO  03:18:49,293 - #23 const
INFO  03:18:49,293 - #27 char
INFO  03:18:49,293 - #27 pet1
INFO  03:18:49,293 - #12 =
INFO  03:18:49,293 - #28 c
INFO  03:18:49,293 - #5 ;
INFO  03:18:49,294 - #27 int
INFO  03:18:49,294 - #27 niz
INFO  03:18:49,294 - #20 [
INFO  03:18:49,294 - #21 ]
INFO  03:18:49,294 - #8 ,
INFO  03:18:49,295 - #27 niz2
INFO  03:18:49,295 - #20 [
INFO  03:18:49,295 - #21 ]
INFO  03:18:49,295 - #8 ,
INFO  03:18:49,295 - #27 a
INFO  03:18:49,295 - #8 ,
INFO  03:18:49,295 - #27 b
INFO  03:18:49,295 - #5 ;
INFO  03:18:49,296 - #27 char
INFO  03:18:49,296 - #27 nizch
INFO  03:18:49,296 - #20 [
INFO  03:18:49,296 - #21 ]
INFO  03:18:49,297 - #8 ,
INFO  03:18:49,297 - #27 c
INFO  03:18:49,297 - #5 ;
INFO  03:18:49,297 - #27 bool
INFO  03:18:49,297 - #27 s1
INFO  03:18:49,297 - #5 ;
INFO  03:18:49,297 - #27 bool
INFO  03:18:49,298 - #27 nizbool
INFO  03:18:49,298 - #20 [
INFO  03:18:49,298 - #21 ]
INFO  03:18:49,298 - #5 ;
INFO  03:18:49,298 - #3 {
INFO  03:18:49,298 - #13 void
INFO  03:18:49,300 - #27 main
INFO  03:18:49,300 - #6 (
INFO  03:18:49,301 - #7 )
INFO  03:18:49,301 - #27 int
INFO  03:18:49,301 - #27 bodovi
INFO  03:18:49,301 - #5 ;
INFO  03:18:49,301 - #27 bool
INFO  03:18:49,301 - #27 bt
INFO  03:18:49,301 - #5 ;
INFO  03:18:49,301 - #27 int
INFO  03:18:49,302 - #27 s
INFO  03:18:49,302 - #5 ;
INFO  03:18:49,302 - #3 {
INFO  03:18:49,302 - #9 print
INFO  03:18:49,303 - #6 (
INFO  03:18:49,304 - #26 2
INFO  03:18:49,304 - #7 )
INFO  03:18:49,305 - #5 ;
INFO  03:18:49,306 - #9 print
INFO  03:18:49,306 - #6 (
INFO  03:18:49,306 - #26 1
INFO  03:18:49,306 - #7 )
INFO  03:18:49,307 - #5 ;
INFO  03:18:49,307 - #4 }
INFO  03:18:49,307 - #4 }
INFO  03:18:49,323 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:18:49,325 - ===================================
INFO  03:18:49,329 - Deklarisana je konsanta int nula = 0
INFO  03:18:49,329 - Deklarisana je konsanta int jedan = 1
INFO  03:18:49,330 - Deklarisana je konsanta int pet = 5
INFO  03:18:49,330 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:18:49,330 - Deklarisan je niz niz
INFO  03:18:49,330 - Deklarisan je niz niz2
INFO  03:18:49,330 - Deklarisana promenljiva a
INFO  03:18:49,330 - Deklarisana promenljiva b
INFO  03:18:49,330 - Deklarisan je niz nizch
INFO  03:18:49,331 - Deklarisana promenljiva c
INFO  03:18:49,331 - Deklarisana promenljiva s1
INFO  03:18:49,331 - Deklarisan je niz nizbool
INFO  03:18:49,331 - Obradjuje se funkcija main na liniji 13
INFO  03:18:49,331 - Deklarisana promenljiva bodovi
INFO  03:18:49,331 - Deklarisana promenljiva bt
INFO  03:18:49,331 - Deklarisana promenljiva s
INFO  03:18:49,332 -  Print count calls = 2
INFO  03:18:49,333 -  Deklarisanih promenljivih ima = 11
INFO  03:18:49,334 - ===================================
INFO  03:18:49,344 - Parsiranje uspesno zavrseno!
INFO  03:19:19,470 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:19:19,552 - #2 program
INFO  03:19:19,553 - #27 MJProgram
INFO  03:19:19,553 - #23 const
INFO  03:19:19,555 - #27 int
INFO  03:19:19,555 - #27 nula
INFO  03:19:19,556 - #12 =
INFO  03:19:19,557 - #26 0
INFO  03:19:19,557 - #5 ;
INFO  03:19:19,557 - #23 const
INFO  03:19:19,558 - #27 int
INFO  03:19:19,558 - #27 jedan
INFO  03:19:19,558 - #12 =
INFO  03:19:19,558 - #26 1
INFO  03:19:19,558 - #5 ;
INFO  03:19:19,558 - #23 const
INFO  03:19:19,558 - #27 int
INFO  03:19:19,558 - #27 pet
INFO  03:19:19,558 - #12 =
INFO  03:19:19,559 - #26 5
INFO  03:19:19,559 - #5 ;
INFO  03:19:19,559 - #23 const
INFO  03:19:19,559 - #27 char
INFO  03:19:19,559 - #27 pet1
INFO  03:19:19,559 - #12 =
INFO  03:19:19,559 - #28 c
INFO  03:19:19,559 - #5 ;
INFO  03:19:19,559 - #27 int
INFO  03:19:19,560 - #27 niz
INFO  03:19:19,560 - #20 [
INFO  03:19:19,560 - #21 ]
INFO  03:19:19,560 - #8 ,
INFO  03:19:19,560 - #27 niz2
INFO  03:19:19,560 - #20 [
INFO  03:19:19,560 - #21 ]
INFO  03:19:19,560 - #8 ,
INFO  03:19:19,560 - #27 a
INFO  03:19:19,561 - #8 ,
INFO  03:19:19,561 - #27 b
INFO  03:19:19,561 - #5 ;
INFO  03:19:19,561 - #27 char
INFO  03:19:19,562 - #27 nizch
INFO  03:19:19,562 - #20 [
INFO  03:19:19,562 - #21 ]
INFO  03:19:19,562 - #8 ,
INFO  03:19:19,562 - #27 c
INFO  03:19:19,562 - #5 ;
INFO  03:19:19,562 - #27 bool
INFO  03:19:19,562 - #27 s1
INFO  03:19:19,562 - #5 ;
INFO  03:19:19,563 - #27 bool
INFO  03:19:19,563 - #27 nizbool
INFO  03:19:19,563 - #20 [
INFO  03:19:19,563 - #21 ]
INFO  03:19:19,563 - #5 ;
INFO  03:19:19,563 - #3 {
INFO  03:19:19,563 - #13 void
INFO  03:19:19,565 - #27 main
INFO  03:19:19,565 - #6 (
INFO  03:19:19,565 - #7 )
INFO  03:19:19,565 - #27 int
INFO  03:19:19,565 - #27 bodovi
INFO  03:19:19,565 - #5 ;
INFO  03:19:19,565 - #27 bool
INFO  03:19:19,566 - #27 bt
INFO  03:19:19,566 - #5 ;
INFO  03:19:19,566 - #27 int
INFO  03:19:19,566 - #27 s
INFO  03:19:19,566 - #5 ;
INFO  03:19:19,567 - #3 {
INFO  03:19:19,567 - #9 print
INFO  03:19:19,569 - #6 (
INFO  03:19:19,569 - #26 2
INFO  03:19:19,569 - #7 )
INFO  03:19:19,571 - #5 ;
INFO  03:19:19,571 - #9 print
INFO  03:19:19,572 - #6 (
INFO  03:19:19,572 - #26 1
INFO  03:19:19,572 - #7 )
INFO  03:19:19,572 - #5 ;
INFO  03:19:19,572 - #4 }
INFO  03:19:19,572 - #4 }
INFO  03:19:19,592 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:19:19,593 - ===================================
INFO  03:19:19,617 - Deklarisana je konsanta int nula = 0
INFO  03:19:19,618 - Deklarisana je konsanta int jedan = 1
INFO  03:19:19,618 - Deklarisana je konsanta int pet = 5
INFO  03:19:19,618 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:19:19,618 - Deklarisan je niz niz
INFO  03:19:19,618 - Deklarisan je niz niz2
INFO  03:19:19,619 - Deklarisana promenljiva a
INFO  03:19:19,619 - Deklarisana promenljiva b
INFO  03:19:19,619 - Deklarisan je niz nizch
INFO  03:19:19,619 - Deklarisana promenljiva c
INFO  03:19:19,619 - Deklarisana promenljiva s1
INFO  03:19:19,620 - Deklarisan je niz nizbool
INFO  03:19:19,620 - Obradjuje se funkcija main na liniji 13
INFO  03:19:19,620 - Deklarisana promenljiva bodovi
INFO  03:19:19,620 - Deklarisana promenljiva bt
INFO  03:19:19,620 - Deklarisana promenljiva s
INFO  03:19:19,620 -  Print count calls = 2
INFO  03:19:19,620 -  Deklarisanih promenljivih ima = 11
INFO  03:19:19,620 - ===================================
INFO  03:19:57,419 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:19:57,479 - #2 program
INFO  03:19:57,479 - #27 MJProgram
INFO  03:19:57,479 - #23 const
INFO  03:19:57,481 - #27 int
INFO  03:19:57,481 - #27 nula
INFO  03:19:57,482 - #12 =
INFO  03:19:57,482 - #26 0
INFO  03:19:57,482 - #5 ;
INFO  03:19:57,482 - #23 const
INFO  03:19:57,483 - #27 int
INFO  03:19:57,483 - #27 jedan
INFO  03:19:57,483 - #12 =
INFO  03:19:57,483 - #26 1
INFO  03:19:57,483 - #5 ;
INFO  03:19:57,483 - #23 const
INFO  03:19:57,483 - #27 int
INFO  03:19:57,484 - #27 pet
INFO  03:19:57,484 - #12 =
INFO  03:19:57,484 - #26 5
INFO  03:19:57,484 - #5 ;
INFO  03:19:57,484 - #23 const
INFO  03:19:57,484 - #27 char
INFO  03:19:57,484 - #27 pet1
INFO  03:19:57,484 - #12 =
INFO  03:19:57,485 - #28 c
INFO  03:19:57,485 - #5 ;
INFO  03:19:57,485 - #27 int
INFO  03:19:57,485 - #27 niz
INFO  03:19:57,485 - #20 [
INFO  03:19:57,485 - #21 ]
INFO  03:19:57,485 - #8 ,
INFO  03:19:57,486 - #27 niz2
INFO  03:19:57,486 - #20 [
INFO  03:19:57,486 - #21 ]
INFO  03:19:57,486 - #8 ,
INFO  03:19:57,486 - #27 a
INFO  03:19:57,486 - #8 ,
INFO  03:19:57,486 - #27 b
INFO  03:19:57,486 - #5 ;
INFO  03:19:57,487 - #27 char
INFO  03:19:57,487 - #27 nizch
INFO  03:19:57,487 - #20 [
INFO  03:19:57,487 - #21 ]
INFO  03:19:57,488 - #8 ,
INFO  03:19:57,488 - #27 c
INFO  03:19:57,488 - #5 ;
INFO  03:19:57,488 - #27 bool
INFO  03:19:57,488 - #27 s1
INFO  03:19:57,488 - #5 ;
INFO  03:19:57,488 - #27 bool
INFO  03:19:57,489 - #27 nizbool
INFO  03:19:57,489 - #20 [
INFO  03:19:57,489 - #21 ]
INFO  03:19:57,489 - #5 ;
INFO  03:19:57,489 - #3 {
INFO  03:19:57,489 - #13 void
INFO  03:19:57,491 - #27 main
INFO  03:19:57,491 - #6 (
INFO  03:19:57,492 - #7 )
INFO  03:19:57,492 - #27 int
INFO  03:19:57,492 - #27 bodovi
INFO  03:19:57,492 - #5 ;
INFO  03:19:57,492 - #27 bool
INFO  03:19:57,492 - #27 bt
INFO  03:19:57,492 - #5 ;
INFO  03:19:57,493 - #27 int
INFO  03:19:57,493 - #27 s
INFO  03:19:57,493 - #5 ;
INFO  03:19:57,493 - #3 {
INFO  03:19:57,493 - #9 print
INFO  03:19:57,494 - #6 (
INFO  03:19:57,495 - #26 2
INFO  03:19:57,495 - #7 )
INFO  03:19:57,496 - #5 ;
INFO  03:19:57,497 - #9 print
INFO  03:19:57,497 - #6 (
INFO  03:19:57,497 - #26 1
INFO  03:19:57,497 - #7 )
INFO  03:19:57,497 - #5 ;
INFO  03:19:57,497 - #4 }
INFO  03:19:57,498 - #4 }
INFO  03:19:57,509 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:19:57,509 - ===================================
INFO  03:19:57,513 - Deklarisana je konsanta int nula = 0
INFO  03:19:57,513 - Deklarisana je konsanta int jedan = 1
INFO  03:19:57,513 - Deklarisana je konsanta int pet = 5
INFO  03:19:57,513 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:19:57,513 - Deklarisan je niz niz
INFO  03:19:57,514 - Deklarisan je niz niz2
INFO  03:19:57,514 - Deklarisana promenljiva a
INFO  03:19:57,514 - Deklarisana promenljiva b
INFO  03:19:57,514 - Deklarisan je niz nizch
INFO  03:19:57,514 - Deklarisana promenljiva c
INFO  03:19:57,514 - Deklarisana promenljiva s1
INFO  03:19:57,514 - Deklarisan je niz nizbool
INFO  03:19:57,514 - Obradjuje se funkcija main na liniji 13
INFO  03:19:57,515 - Deklarisana promenljiva bodovi
INFO  03:19:57,515 - Deklarisana promenljiva bt
INFO  03:19:57,515 - Deklarisana promenljiva s
INFO  03:19:57,515 -  Print count calls = 2
INFO  03:19:57,517 -  Deklarisanih promenljivih ima = 11
INFO  03:19:57,517 - ===================================
INFO  03:19:57,527 - Parsiranje uspesno zavrseno!
INFO  03:30:58,195 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:30:58,287 - #2 program
INFO  03:30:58,287 - #27 MJProgram
INFO  03:30:58,287 - #23 const
INFO  03:30:58,290 - #27 int
INFO  03:30:58,291 - #27 nula
INFO  03:30:58,292 - #12 =
INFO  03:30:58,293 - #26 0
INFO  03:30:58,293 - #5 ;
INFO  03:30:58,293 - #23 const
INFO  03:30:58,294 - #27 int
INFO  03:30:58,295 - #27 jedan
INFO  03:30:58,295 - #12 =
INFO  03:30:58,295 - #26 1
INFO  03:30:58,295 - #5 ;
INFO  03:30:58,295 - #23 const
INFO  03:30:58,296 - #27 int
INFO  03:30:58,296 - #27 pet
INFO  03:30:58,296 - #12 =
INFO  03:30:58,296 - #26 5
INFO  03:30:58,296 - #5 ;
INFO  03:30:58,296 - #23 const
INFO  03:30:58,296 - #27 char
INFO  03:30:58,297 - #27 pet1
INFO  03:30:58,297 - #12 =
INFO  03:30:58,297 - #28 c
INFO  03:30:58,297 - #5 ;
INFO  03:30:58,298 - #27 int
INFO  03:30:58,298 - #27 niz
INFO  03:30:58,298 - #20 [
INFO  03:30:58,298 - #21 ]
INFO  03:30:58,298 - #8 ,
INFO  03:30:58,299 - #27 niz2
INFO  03:30:58,299 - #20 [
INFO  03:30:58,299 - #21 ]
INFO  03:30:58,299 - #8 ,
INFO  03:30:58,299 - #27 a
INFO  03:30:58,300 - #8 ,
INFO  03:30:58,300 - #27 b
INFO  03:30:58,300 - #5 ;
INFO  03:30:58,301 - #27 char
INFO  03:30:58,302 - #27 nizch
INFO  03:30:58,302 - #20 [
INFO  03:30:58,302 - #21 ]
INFO  03:30:58,302 - #8 ,
INFO  03:30:58,302 - #27 c
INFO  03:30:58,303 - #5 ;
INFO  03:30:58,303 - #27 bool
INFO  03:30:58,303 - #27 s1
INFO  03:30:58,303 - #5 ;
INFO  03:30:58,303 - #27 bool
INFO  03:30:58,304 - #27 nizbool
INFO  03:30:58,304 - #20 [
INFO  03:30:58,304 - #21 ]
INFO  03:30:58,304 - #5 ;
INFO  03:30:58,304 - #3 {
INFO  03:30:58,305 - #13 void
INFO  03:30:58,307 - #27 main
INFO  03:30:58,307 - #6 (
INFO  03:30:58,308 - #7 )
INFO  03:30:58,308 - #27 int
INFO  03:30:58,308 - #27 bodovi
INFO  03:30:58,308 - #5 ;
INFO  03:30:58,308 - #27 bool
INFO  03:30:58,309 - #27 bt
INFO  03:30:58,309 - #5 ;
INFO  03:30:58,309 - #27 int
INFO  03:30:58,309 - #27 s
INFO  03:30:58,309 - #5 ;
INFO  03:30:58,309 - #3 {
INFO  03:30:58,309 - #27 bodovi
INFO  03:30:58,311 - #12 =
INFO  03:30:58,312 - #26 3
INFO  03:30:58,312 - #5 ;
INFO  03:30:58,312 - #9 print
INFO  03:30:58,313 - #6 (
INFO  03:30:58,313 - #27 bodovi
INFO  03:30:58,313 - #7 )
INFO  03:30:58,315 - #5 ;
INFO  03:30:58,315 - #9 print
INFO  03:30:58,316 - #6 (
INFO  03:30:58,316 - #26 1
INFO  03:30:58,316 - #7 )
INFO  03:30:58,316 - #5 ;
INFO  03:30:58,316 - #4 }
INFO  03:30:58,316 - #4 }
INFO  03:30:58,336 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     3
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:30:58,337 - ===================================
INFO  03:30:58,341 - Deklarisana je konsanta int nula = 0
INFO  03:30:58,342 - Deklarisana je konsanta int jedan = 1
INFO  03:30:58,342 - Deklarisana je konsanta int pet = 5
INFO  03:30:58,342 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:30:58,342 - Deklarisan je niz niz
INFO  03:30:58,343 - Deklarisan je niz niz2
INFO  03:30:58,343 - Deklarisana promenljiva a
INFO  03:30:58,343 - Deklarisana promenljiva b
INFO  03:30:58,344 - Deklarisan je niz nizch
INFO  03:30:58,344 - Deklarisana promenljiva c
INFO  03:30:58,344 - Deklarisana promenljiva s1
INFO  03:30:58,344 - Deklarisan je niz nizbool
INFO  03:30:58,344 - Obradjuje se funkcija main na liniji 13
INFO  03:30:58,346 - Deklarisana promenljiva bodovi
INFO  03:30:58,347 - Deklarisana promenljiva bt
INFO  03:30:58,347 - Deklarisana promenljiva s
INFO  03:30:58,347 -  Print count calls = 2
INFO  03:30:58,348 -  Deklarisanih promenljivih ima = 11
INFO  03:30:58,348 - ===================================
INFO  03:30:58,360 - Parsiranje uspesno zavrseno!
INFO  03:38:01,908 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:38:01,961 - #2 program
INFO  03:38:01,961 - #27 MJProgram
INFO  03:38:01,961 - #23 const
INFO  03:38:01,963 - #27 int
INFO  03:38:01,963 - #27 nula
INFO  03:38:01,964 - #12 =
INFO  03:38:01,965 - #26 0
INFO  03:38:01,965 - #5 ;
INFO  03:38:01,965 - #23 const
INFO  03:38:01,966 - #27 int
INFO  03:38:01,966 - #27 jedan
INFO  03:38:01,966 - #12 =
INFO  03:38:01,966 - #26 1
INFO  03:38:01,966 - #5 ;
INFO  03:38:01,966 - #23 const
INFO  03:38:01,966 - #27 int
INFO  03:38:01,967 - #27 pet
INFO  03:38:01,967 - #12 =
INFO  03:38:01,967 - #26 5
INFO  03:38:01,967 - #5 ;
INFO  03:38:01,967 - #23 const
INFO  03:38:01,967 - #27 char
INFO  03:38:01,967 - #27 pet1
INFO  03:38:01,968 - #12 =
INFO  03:38:01,968 - #28 c
INFO  03:38:01,968 - #5 ;
INFO  03:38:01,968 - #27 int
INFO  03:38:01,968 - #27 niz
INFO  03:38:01,968 - #20 [
INFO  03:38:01,969 - #21 ]
INFO  03:38:01,969 - #8 ,
INFO  03:38:01,969 - #27 niz2
INFO  03:38:01,969 - #20 [
INFO  03:38:01,969 - #21 ]
INFO  03:38:01,969 - #8 ,
INFO  03:38:01,969 - #27 a
INFO  03:38:01,970 - #8 ,
INFO  03:38:01,970 - #27 b
INFO  03:38:01,970 - #5 ;
INFO  03:38:01,970 - #27 char
INFO  03:38:01,971 - #27 nizch
INFO  03:38:01,971 - #20 [
INFO  03:38:01,971 - #21 ]
INFO  03:38:01,971 - #8 ,
INFO  03:38:01,971 - #27 c
INFO  03:38:01,971 - #5 ;
INFO  03:38:01,971 - #27 bool
INFO  03:38:01,972 - #27 s1
INFO  03:38:01,972 - #5 ;
INFO  03:38:01,972 - #27 bool
INFO  03:38:01,972 - #27 nizbool
INFO  03:38:01,972 - #20 [
INFO  03:38:01,972 - #21 ]
INFO  03:38:01,972 - #5 ;
INFO  03:38:01,973 - #3 {
INFO  03:38:01,973 - #13 void
INFO  03:38:01,974 - #27 main
INFO  03:38:01,974 - #6 (
INFO  03:38:01,975 - #7 )
INFO  03:38:01,975 - #27 int
INFO  03:38:01,975 - #27 bodovi
INFO  03:38:01,975 - #5 ;
INFO  03:38:01,975 - #27 bool
INFO  03:38:01,975 - #27 bt
INFO  03:38:01,976 - #5 ;
INFO  03:38:01,976 - #27 int
INFO  03:38:01,976 - #27 s
INFO  03:38:01,976 - #5 ;
INFO  03:38:01,976 - #3 {
INFO  03:38:01,976 - #9 print
INFO  03:38:01,978 - #6 (
INFO  03:38:01,978 - #27 nula
INFO  03:38:01,978 - #7 )
INFO  03:38:01,980 - #5 ;
INFO  03:38:01,980 - #9 print
INFO  03:38:01,980 - #6 (
INFO  03:38:01,980 - #26 1
INFO  03:38:01,980 - #7 )
INFO  03:38:01,981 - #5 ;
INFO  03:38:01,981 - #4 }
INFO  03:38:01,981 - #4 }
INFO  03:38:01,993 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     nula
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:38:01,993 - ===================================
INFO  03:38:01,997 - Deklarisana je konsanta int nula = 0
INFO  03:38:01,997 - Deklarisana je konsanta int jedan = 1
INFO  03:38:01,997 - Deklarisana je konsanta int pet = 5
INFO  03:38:01,997 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:38:01,997 - Deklarisan je niz niz
INFO  03:38:01,997 - Deklarisan je niz niz2
INFO  03:38:01,998 - Deklarisana promenljiva a
INFO  03:38:01,998 - Deklarisana promenljiva b
INFO  03:38:01,998 - Deklarisan je niz nizch
INFO  03:38:01,998 - Deklarisana promenljiva c
INFO  03:38:01,998 - Deklarisana promenljiva s1
INFO  03:38:01,998 - Deklarisan je niz nizbool
INFO  03:38:01,998 - Obradjuje se funkcija main na liniji 13
INFO  03:38:01,998 - Deklarisana promenljiva bodovi
INFO  03:38:01,998 - Deklarisana promenljiva bt
INFO  03:38:01,998 - Deklarisana promenljiva s
INFO  03:38:01,999 -  Print count calls = 2
INFO  03:38:01,999 -  Deklarisanih promenljivih ima = 11
INFO  03:38:01,999 - ===================================
INFO  03:38:02,008 - Parsiranje uspesno zavrseno!
INFO  03:38:50,974 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:38:51,040 - #2 program
INFO  03:38:51,040 - #27 MJProgram
INFO  03:38:51,040 - #23 const
INFO  03:38:51,042 - #27 int
INFO  03:38:51,042 - #27 nula
INFO  03:38:51,043 - #12 =
INFO  03:38:51,043 - #26 0
INFO  03:38:51,043 - #5 ;
INFO  03:38:51,044 - #23 const
INFO  03:38:51,044 - #27 int
INFO  03:38:51,044 - #27 jedan
INFO  03:38:51,044 - #12 =
INFO  03:38:51,044 - #26 1
INFO  03:38:51,044 - #5 ;
INFO  03:38:51,045 - #23 const
INFO  03:38:51,045 - #27 int
INFO  03:38:51,045 - #27 pet
INFO  03:38:51,045 - #12 =
INFO  03:38:51,045 - #26 5
INFO  03:38:51,045 - #5 ;
INFO  03:38:51,045 - #23 const
INFO  03:38:51,046 - #27 char
INFO  03:38:51,046 - #27 pet1
INFO  03:38:51,046 - #12 =
INFO  03:38:51,046 - #28 c
INFO  03:38:51,046 - #5 ;
INFO  03:38:51,046 - #27 int
INFO  03:38:51,046 - #27 niz
INFO  03:38:51,046 - #20 [
INFO  03:38:51,047 - #21 ]
INFO  03:38:51,047 - #8 ,
INFO  03:38:51,047 - #27 niz2
INFO  03:38:51,047 - #20 [
INFO  03:38:51,047 - #21 ]
INFO  03:38:51,047 - #8 ,
INFO  03:38:51,047 - #27 a
INFO  03:38:51,047 - #8 ,
INFO  03:38:51,048 - #27 b
INFO  03:38:51,048 - #5 ;
INFO  03:38:51,048 - #27 char
INFO  03:38:51,048 - #27 nizch
INFO  03:38:51,048 - #20 [
INFO  03:38:51,048 - #21 ]
INFO  03:38:51,048 - #8 ,
INFO  03:38:51,049 - #27 c
INFO  03:38:51,049 - #5 ;
INFO  03:38:51,049 - #27 bool
INFO  03:38:51,049 - #27 s1
INFO  03:38:51,049 - #5 ;
INFO  03:38:51,049 - #27 bool
INFO  03:38:51,049 - #27 nizbool
INFO  03:38:51,049 - #20 [
INFO  03:38:51,049 - #21 ]
INFO  03:38:51,049 - #5 ;
INFO  03:38:51,050 - #3 {
INFO  03:38:51,050 - #13 void
INFO  03:38:51,051 - #27 main
INFO  03:38:51,051 - #6 (
INFO  03:38:51,051 - #7 )
INFO  03:38:51,051 - #27 int
INFO  03:38:51,052 - #27 bodovi
INFO  03:38:51,052 - #5 ;
INFO  03:38:51,052 - #27 bool
INFO  03:38:51,052 - #27 bt
INFO  03:38:51,052 - #5 ;
INFO  03:38:51,052 - #27 int
INFO  03:38:51,052 - #27 s
INFO  03:38:51,052 - #5 ;
INFO  03:38:51,052 - #3 {
INFO  03:38:51,052 - #9 print
INFO  03:38:51,054 - #6 (
INFO  03:38:51,054 - #26 1
INFO  03:38:51,054 - #7 )
INFO  03:38:51,055 - #5 ;
INFO  03:38:51,055 - #4 }
INFO  03:38:51,056 - #4 }
INFO  03:38:51,066 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:38:51,068 - ===================================
INFO  03:38:51,072 - Deklarisana je konsanta int nula = 0
INFO  03:38:51,072 - Deklarisana je konsanta int jedan = 1
INFO  03:38:51,072 - Deklarisana je konsanta int pet = 5
INFO  03:38:51,072 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:38:51,072 - Deklarisan je niz niz
INFO  03:38:51,073 - Deklarisan je niz niz2
INFO  03:38:51,073 - Deklarisana promenljiva a
INFO  03:38:51,073 - Deklarisana promenljiva b
INFO  03:38:51,073 - Deklarisan je niz nizch
INFO  03:38:51,073 - Deklarisana promenljiva c
INFO  03:38:51,073 - Deklarisana promenljiva s1
INFO  03:38:51,073 - Deklarisan je niz nizbool
INFO  03:38:51,073 - Obradjuje se funkcija main na liniji 13
INFO  03:38:51,073 - Deklarisana promenljiva bodovi
INFO  03:38:51,074 - Deklarisana promenljiva bt
INFO  03:38:51,074 - Deklarisana promenljiva s
INFO  03:38:51,074 -  Print count calls = 1
INFO  03:38:51,074 -  Deklarisanih promenljivih ima = 11
INFO  03:38:51,074 - ===================================
INFO  03:38:51,085 - Parsiranje uspesno zavrseno!
INFO  03:40:02,948 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:40:03,018 - #2 program
INFO  03:40:03,019 - #27 MJProgram
INFO  03:40:03,019 - #23 const
INFO  03:40:03,021 - #27 int
INFO  03:40:03,021 - #27 nula
INFO  03:40:03,022 - #12 =
INFO  03:40:03,022 - #26 0
INFO  03:40:03,022 - #5 ;
INFO  03:40:03,023 - #23 const
INFO  03:40:03,023 - #27 int
INFO  03:40:03,023 - #27 jedan
INFO  03:40:03,023 - #12 =
INFO  03:40:03,024 - #26 1
INFO  03:40:03,024 - #5 ;
INFO  03:40:03,024 - #23 const
INFO  03:40:03,024 - #27 int
INFO  03:40:03,024 - #27 pet
INFO  03:40:03,024 - #12 =
INFO  03:40:03,024 - #26 5
INFO  03:40:03,024 - #5 ;
INFO  03:40:03,024 - #23 const
INFO  03:40:03,024 - #27 char
INFO  03:40:03,025 - #27 pet1
INFO  03:40:03,025 - #12 =
INFO  03:40:03,025 - #28 c
INFO  03:40:03,025 - #5 ;
INFO  03:40:03,025 - #27 int
INFO  03:40:03,025 - #27 niz
INFO  03:40:03,025 - #20 [
INFO  03:40:03,026 - #21 ]
INFO  03:40:03,026 - #8 ,
INFO  03:40:03,026 - #27 niz2
INFO  03:40:03,026 - #20 [
INFO  03:40:03,026 - #21 ]
INFO  03:40:03,026 - #8 ,
INFO  03:40:03,026 - #27 a
INFO  03:40:03,026 - #8 ,
INFO  03:40:03,026 - #27 b
INFO  03:40:03,027 - #5 ;
INFO  03:40:03,027 - #27 char
INFO  03:40:03,027 - #27 nizch
INFO  03:40:03,027 - #20 [
INFO  03:40:03,027 - #21 ]
INFO  03:40:03,027 - #8 ,
INFO  03:40:03,028 - #27 c
INFO  03:40:03,028 - #5 ;
INFO  03:40:03,028 - #27 bool
INFO  03:40:03,028 - #27 s1
INFO  03:40:03,028 - #5 ;
INFO  03:40:03,028 - #27 bool
INFO  03:40:03,028 - #27 nizbool
INFO  03:40:03,028 - #20 [
INFO  03:40:03,028 - #21 ]
INFO  03:40:03,028 - #5 ;
INFO  03:40:03,029 - #3 {
INFO  03:40:03,029 - #13 void
INFO  03:40:03,030 - #27 main
INFO  03:40:03,030 - #6 (
INFO  03:40:03,030 - #7 )
INFO  03:40:03,031 - #27 int
INFO  03:40:03,031 - #27 bodovi
INFO  03:40:03,031 - #5 ;
INFO  03:40:03,031 - #27 bool
INFO  03:40:03,031 - #27 bt
INFO  03:40:03,031 - #5 ;
INFO  03:40:03,031 - #27 int
INFO  03:40:03,031 - #27 s
INFO  03:40:03,031 - #5 ;
INFO  03:40:03,031 - #3 {
INFO  03:40:03,032 - #9 print
INFO  03:40:03,033 - #6 (
INFO  03:40:03,033 - #26 1
INFO  03:40:03,033 - #7 )
INFO  03:40:03,034 - #5 ;
INFO  03:40:03,035 - #4 }
INFO  03:40:03,035 - #4 }
INFO  03:40:03,046 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:40:03,046 - ===================================
INFO  03:40:03,051 - Deklarisana je konsanta int nula = 0
INFO  03:40:03,051 - Deklarisana je konsanta int jedan = 1
INFO  03:40:03,051 - Deklarisana je konsanta int pet = 5
INFO  03:40:03,051 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:40:03,052 - Deklarisan je niz niz
INFO  03:40:03,052 - Deklarisan je niz niz2
INFO  03:40:03,052 - Deklarisana promenljiva a
INFO  03:40:03,052 - Deklarisana promenljiva b
INFO  03:40:03,052 - Deklarisan je niz nizch
INFO  03:40:03,052 - Deklarisana promenljiva c
INFO  03:40:03,052 - Deklarisana promenljiva s1
INFO  03:40:03,052 - Deklarisan je niz nizbool
INFO  03:40:03,053 - Obradjuje se funkcija main na liniji 13
INFO  03:40:03,053 - Deklarisana promenljiva bodovi
INFO  03:40:03,053 - Deklarisana promenljiva bt
INFO  03:40:03,053 - Deklarisana promenljiva s
INFO  03:40:03,054 -  Print count calls = 1
INFO  03:40:03,054 -  Deklarisanih promenljivih ima = 11
INFO  03:40:03,054 - ===================================
INFO  03:40:03,064 - Parsiranje uspesno zavrseno!
INFO  03:56:03,351 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:56:03,436 - #2 program
INFO  03:56:03,436 - #27 MJProgram
INFO  03:56:03,437 - #23 const
INFO  03:56:03,439 - #27 int
INFO  03:56:03,439 - #27 nula
INFO  03:56:03,441 - #12 =
INFO  03:56:03,441 - #26 0
INFO  03:56:03,441 - #5 ;
INFO  03:56:03,442 - #23 const
INFO  03:56:03,443 - #27 int
INFO  03:56:03,443 - #27 jedan
INFO  03:56:03,443 - #12 =
INFO  03:56:03,443 - #26 1
INFO  03:56:03,443 - #5 ;
INFO  03:56:03,443 - #23 const
INFO  03:56:03,444 - #27 int
INFO  03:56:03,444 - #27 pet
INFO  03:56:03,444 - #12 =
INFO  03:56:03,444 - #26 5
INFO  03:56:03,444 - #5 ;
INFO  03:56:03,444 - #23 const
INFO  03:56:03,444 - #27 char
INFO  03:56:03,445 - #27 pet1
INFO  03:56:03,445 - #12 =
INFO  03:56:03,445 - #28 c
INFO  03:56:03,445 - #5 ;
INFO  03:56:03,446 - #27 int
INFO  03:56:03,446 - #27 niz
INFO  03:56:03,446 - #20 [
INFO  03:56:03,446 - #21 ]
INFO  03:56:03,447 - #8 ,
INFO  03:56:03,447 - #27 niz2
INFO  03:56:03,448 - #20 [
INFO  03:56:03,448 - #21 ]
INFO  03:56:03,448 - #8 ,
INFO  03:56:03,448 - #27 a
INFO  03:56:03,448 - #8 ,
INFO  03:56:03,449 - #27 b
INFO  03:56:03,449 - #5 ;
INFO  03:56:03,450 - #27 char
INFO  03:56:03,450 - #27 nizch
INFO  03:56:03,451 - #20 [
INFO  03:56:03,451 - #21 ]
INFO  03:56:03,451 - #8 ,
INFO  03:56:03,451 - #27 c
INFO  03:56:03,451 - #5 ;
INFO  03:56:03,451 - #27 bool
INFO  03:56:03,452 - #27 s1
INFO  03:56:03,452 - #5 ;
INFO  03:56:03,452 - #27 bool
INFO  03:56:03,452 - #27 nizbool
INFO  03:56:03,452 - #20 [
INFO  03:56:03,453 - #21 ]
INFO  03:56:03,453 - #5 ;
INFO  03:56:03,453 - #3 {
INFO  03:56:03,453 - #13 void
INFO  03:56:03,455 - #27 main
INFO  03:56:03,456 - #6 (
INFO  03:56:03,456 - #7 )
INFO  03:56:03,456 - #27 int
INFO  03:56:03,456 - #27 bodovi
INFO  03:56:03,457 - #5 ;
INFO  03:56:03,457 - #27 bool
INFO  03:56:03,457 - #27 bt
INFO  03:56:03,457 - #5 ;
INFO  03:56:03,457 - #27 int
INFO  03:56:03,458 - #27 s
INFO  03:56:03,458 - #5 ;
INFO  03:56:03,458 - #3 {
INFO  03:56:03,458 - #27 a
INFO  03:56:03,460 - #12 =
INFO  03:56:03,460 - #26 1
INFO  03:56:03,461 - #5 ;
INFO  03:56:03,461 - #9 print
INFO  03:56:03,462 - #6 (
INFO  03:56:03,463 - #26 1
INFO  03:56:03,463 - #7 )
INFO  03:56:03,465 - #5 ;
INFO  03:56:03,465 - #4 }
INFO  03:56:03,466 - #4 }
INFO  03:56:03,488 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               a
              ) [DesignatorIDENT]
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   1
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:56:03,490 - ===================================
INFO  03:56:03,497 - Deklarisana je konsanta int nula = 0
INFO  03:56:03,498 - Deklarisana je konsanta int jedan = 1
INFO  03:56:03,498 - Deklarisana je konsanta int pet = 5
INFO  03:56:03,498 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:56:03,498 - Deklarisan je niz niz
INFO  03:56:03,498 - Deklarisan je niz niz2
INFO  03:56:03,498 - Deklarisana promenljiva a
INFO  03:56:03,499 - Deklarisana promenljiva b
INFO  03:56:03,499 - Deklarisan je niz nizch
INFO  03:56:03,499 - Deklarisana promenljiva c
INFO  03:56:03,499 - Deklarisana promenljiva s1
INFO  03:56:03,499 - Deklarisan je niz nizbool
INFO  03:56:03,499 - Obradjuje se funkcija main na liniji 13
INFO  03:56:03,500 - Deklarisana promenljiva bodovi
INFO  03:56:03,500 - Deklarisana promenljiva bt
INFO  03:56:03,500 - Deklarisana promenljiva s
INFO  03:56:03,500 -  Print count calls = 1
INFO  03:56:03,500 -  Deklarisanih promenljivih ima = 11
INFO  03:56:03,501 - ===================================
INFO  03:56:03,516 - Parsiranje uspesno zavrseno!
INFO  03:57:49,061 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  03:57:49,130 - #2 program
INFO  03:57:49,130 - #27 MJProgram
INFO  03:57:49,131 - #23 const
INFO  03:57:49,134 - #27 int
INFO  03:57:49,134 - #27 nula
INFO  03:57:49,135 - #12 =
INFO  03:57:49,135 - #26 0
INFO  03:57:49,135 - #5 ;
INFO  03:57:49,135 - #23 const
INFO  03:57:49,136 - #27 int
INFO  03:57:49,136 - #27 jedan
INFO  03:57:49,136 - #12 =
INFO  03:57:49,137 - #26 1
INFO  03:57:49,137 - #5 ;
INFO  03:57:49,137 - #23 const
INFO  03:57:49,137 - #27 int
INFO  03:57:49,137 - #27 pet
INFO  03:57:49,137 - #12 =
INFO  03:57:49,137 - #26 5
INFO  03:57:49,138 - #5 ;
INFO  03:57:49,138 - #23 const
INFO  03:57:49,138 - #27 char
INFO  03:57:49,138 - #27 pet1
INFO  03:57:49,139 - #12 =
INFO  03:57:49,140 - #28 c
INFO  03:57:49,140 - #5 ;
INFO  03:57:49,140 - #27 int
INFO  03:57:49,141 - #27 niz
INFO  03:57:49,141 - #20 [
INFO  03:57:49,141 - #21 ]
INFO  03:57:49,141 - #8 ,
INFO  03:57:49,141 - #27 niz2
INFO  03:57:49,141 - #20 [
INFO  03:57:49,141 - #21 ]
INFO  03:57:49,141 - #8 ,
INFO  03:57:49,142 - #27 a
INFO  03:57:49,142 - #8 ,
INFO  03:57:49,142 - #27 b
INFO  03:57:49,142 - #5 ;
INFO  03:57:49,142 - #27 char
INFO  03:57:49,143 - #27 nizch
INFO  03:57:49,143 - #20 [
INFO  03:57:49,143 - #21 ]
INFO  03:57:49,143 - #8 ,
INFO  03:57:49,144 - #27 c
INFO  03:57:49,144 - #5 ;
INFO  03:57:49,144 - #27 bool
INFO  03:57:49,144 - #27 s1
INFO  03:57:49,144 - #5 ;
INFO  03:57:49,144 - #27 bool
INFO  03:57:49,144 - #27 nizbool
INFO  03:57:49,145 - #20 [
INFO  03:57:49,145 - #21 ]
INFO  03:57:49,145 - #5 ;
INFO  03:57:49,145 - #3 {
INFO  03:57:49,145 - #13 void
INFO  03:57:49,148 - #27 main
INFO  03:57:49,148 - #6 (
INFO  03:57:49,148 - #7 )
INFO  03:57:49,149 - #27 int
INFO  03:57:49,149 - #27 bodovi
INFO  03:57:49,149 - #5 ;
INFO  03:57:49,149 - #27 bool
INFO  03:57:49,149 - #27 bt
INFO  03:57:49,149 - #5 ;
INFO  03:57:49,150 - #27 int
INFO  03:57:49,150 - #27 s
INFO  03:57:49,150 - #5 ;
INFO  03:57:49,150 - #3 {
INFO  03:57:49,150 - #27 a
INFO  03:57:49,151 - #12 =
INFO  03:57:49,152 - #26 5
INFO  03:57:49,152 - #5 ;
INFO  03:57:49,152 - #9 print
INFO  03:57:49,153 - #6 (
INFO  03:57:49,153 - #27 a
INFO  03:57:49,153 - #7 )
INFO  03:57:49,154 - #5 ;
INFO  03:57:49,154 - #9 print
INFO  03:57:49,154 - #6 (
INFO  03:57:49,154 - #26 1
INFO  03:57:49,154 - #7 )
INFO  03:57:49,155 - #5 ;
INFO  03:57:49,155 - #4 }
INFO  03:57:49,155 - #4 }
INFO  03:57:49,168 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     a
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  03:57:49,169 - ===================================
INFO  03:57:49,174 - Deklarisana je konsanta int nula = 0
INFO  03:57:49,174 - Deklarisana je konsanta int jedan = 1
INFO  03:57:49,174 - Deklarisana je konsanta int pet = 5
INFO  03:57:49,174 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  03:57:49,175 - Deklarisan je niz niz
INFO  03:57:49,175 - Deklarisan je niz niz2
INFO  03:57:49,175 - Deklarisana promenljiva a
INFO  03:57:49,175 - Deklarisana promenljiva b
INFO  03:57:49,175 - Deklarisan je niz nizch
INFO  03:57:49,175 - Deklarisana promenljiva c
INFO  03:57:49,175 - Deklarisana promenljiva s1
INFO  03:57:49,175 - Deklarisan je niz nizbool
INFO  03:57:49,175 - Obradjuje se funkcija main na liniji 13
INFO  03:57:49,175 - Deklarisana promenljiva bodovi
INFO  03:57:49,175 - Deklarisana promenljiva bt
INFO  03:57:49,175 - Deklarisana promenljiva s
INFO  03:57:49,176 -  Print count calls = 2
INFO  03:57:49,176 -  Deklarisanih promenljivih ima = 11
INFO  03:57:49,176 - ===================================
INFO  03:57:49,185 - Parsiranje uspesno zavrseno!
INFO  04:01:38,411 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:01:38,497 - #2 program
INFO  04:01:38,497 - #27 MJProgram
INFO  04:01:38,497 - #23 const
INFO  04:01:38,501 - #27 int
INFO  04:01:38,501 - #27 nula
INFO  04:01:38,503 - #12 =
INFO  04:01:38,503 - #26 0
INFO  04:01:38,503 - #5 ;
INFO  04:01:38,503 - #23 const
INFO  04:01:38,503 - #27 int
INFO  04:01:38,503 - #27 jedan
INFO  04:01:38,503 - #12 =
INFO  04:01:38,503 - #26 1
INFO  04:01:38,503 - #5 ;
INFO  04:01:38,504 - #23 const
INFO  04:01:38,504 - #27 int
INFO  04:01:38,504 - #27 pet
INFO  04:01:38,504 - #12 =
INFO  04:01:38,504 - #26 5
INFO  04:01:38,504 - #5 ;
INFO  04:01:38,504 - #23 const
INFO  04:01:38,504 - #27 char
INFO  04:01:38,504 - #27 pet1
INFO  04:01:38,505 - #12 =
INFO  04:01:38,505 - #28 c
INFO  04:01:38,505 - #5 ;
INFO  04:01:38,505 - #27 int
INFO  04:01:38,505 - #27 niz
INFO  04:01:38,505 - #20 [
INFO  04:01:38,505 - #21 ]
INFO  04:01:38,505 - #8 ,
INFO  04:01:38,506 - #27 niz2
INFO  04:01:38,506 - #20 [
INFO  04:01:38,506 - #21 ]
INFO  04:01:38,506 - #8 ,
INFO  04:01:38,506 - #27 a
INFO  04:01:38,506 - #8 ,
INFO  04:01:38,506 - #27 b
INFO  04:01:38,507 - #5 ;
INFO  04:01:38,507 - #27 char
INFO  04:01:38,507 - #27 nizch
INFO  04:01:38,508 - #20 [
INFO  04:01:38,508 - #21 ]
INFO  04:01:38,508 - #8 ,
INFO  04:01:38,508 - #27 c
INFO  04:01:38,508 - #5 ;
INFO  04:01:38,508 - #27 bool
INFO  04:01:38,508 - #27 s1
INFO  04:01:38,509 - #5 ;
INFO  04:01:38,509 - #27 bool
INFO  04:01:38,509 - #27 nizbool
INFO  04:01:38,509 - #20 [
INFO  04:01:38,509 - #21 ]
INFO  04:01:38,509 - #5 ;
INFO  04:01:38,510 - #3 {
INFO  04:01:38,510 - #13 void
INFO  04:01:38,512 - #27 main
INFO  04:01:38,512 - #6 (
INFO  04:01:38,512 - #7 )
INFO  04:01:38,513 - #27 int
INFO  04:01:38,513 - #27 bodovi
INFO  04:01:38,513 - #5 ;
INFO  04:01:38,514 - #27 bool
INFO  04:01:38,514 - #27 bt
INFO  04:01:38,514 - #5 ;
INFO  04:01:38,514 - #27 int
INFO  04:01:38,514 - #27 s
INFO  04:01:38,514 - #5 ;
INFO  04:01:38,515 - #3 {
INFO  04:01:38,515 - #27 a
INFO  04:01:38,516 - #12 =
INFO  04:01:38,517 - #26 5
INFO  04:01:38,517 - #5 ;
INFO  04:01:38,518 - #9 print
INFO  04:01:38,518 - #6 (
INFO  04:01:38,519 - #27 a
INFO  04:01:38,519 - #7 )
INFO  04:01:38,521 - #5 ;
INFO  04:01:38,521 - #9 print
INFO  04:01:38,521 - #6 (
INFO  04:01:38,521 - #26 1
INFO  04:01:38,521 - #7 )
INFO  04:01:38,521 - #5 ;
INFO  04:01:38,522 - #4 }
INFO  04:01:38,522 - #4 }
INFO  04:01:38,544 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     a
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:01:38,545 - ===================================
INFO  04:01:38,570 - Deklarisana je konsanta int nula = 0
INFO  04:01:38,571 - Deklarisana je konsanta int jedan = 1
INFO  04:01:38,571 - Deklarisana je konsanta int pet = 5
INFO  04:01:38,571 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:01:38,571 - Deklarisan je niz niz
INFO  04:01:38,571 - Deklarisan je niz niz2
INFO  04:01:38,571 - Deklarisana promenljiva a
INFO  04:01:38,571 - Deklarisana promenljiva b
INFO  04:01:38,571 - Deklarisan je niz nizch
INFO  04:01:38,571 - Deklarisana promenljiva c
INFO  04:01:38,571 - Deklarisana promenljiva s1
INFO  04:01:38,572 - Deklarisan je niz nizbool
INFO  04:01:38,572 - Obradjuje se funkcija main na liniji 13
INFO  04:01:38,572 - Deklarisana promenljiva bodovi
INFO  04:01:38,572 - Deklarisana promenljiva bt
INFO  04:01:38,572 - Deklarisana promenljiva s
INFO  04:01:38,574 -  Print count calls = 2
INFO  04:01:38,574 -  Deklarisanih promenljivih ima = 11
INFO  04:01:38,574 - ===================================
INFO  04:01:58,277 - Parsiranje uspesno zavrseno!
INFO  04:02:31,442 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:02:31,522 - #2 program
INFO  04:02:31,523 - #27 MJProgram
INFO  04:02:31,523 - #23 const
INFO  04:02:31,526 - #27 int
INFO  04:02:31,526 - #27 nula
INFO  04:02:31,527 - #12 =
INFO  04:02:31,528 - #26 0
INFO  04:02:31,528 - #5 ;
INFO  04:02:31,528 - #23 const
INFO  04:02:31,529 - #27 int
INFO  04:02:31,529 - #27 jedan
INFO  04:02:31,529 - #12 =
INFO  04:02:31,529 - #26 1
INFO  04:02:31,529 - #5 ;
INFO  04:02:31,529 - #23 const
INFO  04:02:31,529 - #27 int
INFO  04:02:31,529 - #27 pet
INFO  04:02:31,529 - #12 =
INFO  04:02:31,530 - #26 5
INFO  04:02:31,530 - #5 ;
INFO  04:02:31,530 - #23 const
INFO  04:02:31,530 - #27 char
INFO  04:02:31,530 - #27 pet1
INFO  04:02:31,530 - #12 =
INFO  04:02:31,530 - #28 c
INFO  04:02:31,530 - #5 ;
INFO  04:02:31,531 - #27 int
INFO  04:02:31,531 - #27 niz
INFO  04:02:31,531 - #20 [
INFO  04:02:31,531 - #21 ]
INFO  04:02:31,531 - #8 ,
INFO  04:02:31,531 - #27 niz2
INFO  04:02:31,531 - #20 [
INFO  04:02:31,531 - #21 ]
INFO  04:02:31,531 - #8 ,
INFO  04:02:31,532 - #27 a
INFO  04:02:31,532 - #8 ,
INFO  04:02:31,532 - #27 b
INFO  04:02:31,532 - #5 ;
INFO  04:02:31,532 - #27 char
INFO  04:02:31,533 - #27 nizch
INFO  04:02:31,533 - #20 [
INFO  04:02:31,533 - #21 ]
INFO  04:02:31,533 - #8 ,
INFO  04:02:31,534 - #27 c
INFO  04:02:31,534 - #5 ;
INFO  04:02:31,534 - #27 bool
INFO  04:02:31,534 - #27 s1
INFO  04:02:31,534 - #5 ;
INFO  04:02:31,534 - #27 bool
INFO  04:02:31,534 - #27 nizbool
INFO  04:02:31,535 - #20 [
INFO  04:02:31,535 - #21 ]
INFO  04:02:31,535 - #5 ;
INFO  04:02:31,535 - #3 {
INFO  04:02:31,535 - #13 void
INFO  04:02:31,537 - #27 main
INFO  04:02:31,537 - #6 (
INFO  04:02:31,537 - #7 )
INFO  04:02:31,537 - #27 int
INFO  04:02:31,537 - #27 bodovi
INFO  04:02:31,538 - #5 ;
INFO  04:02:31,538 - #27 bool
INFO  04:02:31,538 - #27 bt
INFO  04:02:31,538 - #5 ;
INFO  04:02:31,538 - #27 int
INFO  04:02:31,539 - #27 s
INFO  04:02:31,539 - #5 ;
INFO  04:02:31,539 - #3 {
INFO  04:02:31,539 - #27 a
INFO  04:02:31,541 - #12 =
INFO  04:02:31,542 - #26 5
INFO  04:02:31,542 - #5 ;
INFO  04:02:31,543 - #9 print
INFO  04:02:31,544 - #6 (
INFO  04:02:31,544 - #27 a
INFO  04:02:31,544 - #7 )
INFO  04:02:31,546 - #5 ;
INFO  04:02:31,546 - #9 print
INFO  04:02:31,547 - #6 (
INFO  04:02:31,547 - #26 1
INFO  04:02:31,547 - #7 )
INFO  04:02:31,547 - #5 ;
INFO  04:02:31,547 - #4 }
INFO  04:02:31,547 - #4 }
INFO  04:02:31,572 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     a
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:02:31,573 - ===================================
INFO  04:02:31,597 - Deklarisana je konsanta int nula = 0
INFO  04:02:31,597 - Deklarisana je konsanta int jedan = 1
INFO  04:02:31,597 - Deklarisana je konsanta int pet = 5
INFO  04:02:31,598 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:02:31,598 - Deklarisan je niz niz
INFO  04:02:31,598 - Deklarisan je niz niz2
INFO  04:02:31,598 - Deklarisana promenljiva a
INFO  04:02:31,598 - Deklarisana promenljiva b
INFO  04:02:31,598 - Deklarisan je niz nizch
INFO  04:02:31,598 - Deklarisana promenljiva c
INFO  04:02:31,599 - Deklarisana promenljiva s1
INFO  04:02:31,599 - Deklarisan je niz nizbool
INFO  04:02:31,599 - Obradjuje se funkcija main na liniji 13
INFO  04:02:31,601 - Deklarisana promenljiva bodovi
INFO  04:02:31,602 - Deklarisana promenljiva bt
INFO  04:02:31,602 - Deklarisana promenljiva s
INFO  04:02:31,603 -  Print count calls = 2
INFO  04:02:31,603 -  Deklarisanih promenljivih ima = 11
INFO  04:02:31,603 - ===================================
INFO  04:02:36,966 - Parsiranje uspesno zavrseno!
INFO  04:06:13,713 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:06:13,800 - #2 program
INFO  04:06:13,801 - #27 MJProgram
INFO  04:06:13,801 - #23 const
INFO  04:06:13,803 - #27 int
INFO  04:06:13,803 - #27 nula
INFO  04:06:13,805 - #12 =
INFO  04:06:13,805 - #26 0
INFO  04:06:13,805 - #5 ;
INFO  04:06:13,805 - #23 const
INFO  04:06:13,806 - #27 int
INFO  04:06:13,806 - #27 jedan
INFO  04:06:13,806 - #12 =
INFO  04:06:13,806 - #26 1
INFO  04:06:13,806 - #5 ;
INFO  04:06:13,806 - #23 const
INFO  04:06:13,806 - #27 int
INFO  04:06:13,806 - #27 pet
INFO  04:06:13,807 - #12 =
INFO  04:06:13,807 - #26 5
INFO  04:06:13,807 - #5 ;
INFO  04:06:13,807 - #23 const
INFO  04:06:13,807 - #27 char
INFO  04:06:13,807 - #27 pet1
INFO  04:06:13,807 - #12 =
INFO  04:06:13,807 - #28 c
INFO  04:06:13,807 - #5 ;
INFO  04:06:13,807 - #27 int
INFO  04:06:13,808 - #27 niz
INFO  04:06:13,808 - #20 [
INFO  04:06:13,808 - #21 ]
INFO  04:06:13,808 - #8 ,
INFO  04:06:13,808 - #27 niz2
INFO  04:06:13,808 - #20 [
INFO  04:06:13,809 - #21 ]
INFO  04:06:13,809 - #8 ,
INFO  04:06:13,809 - #27 a
INFO  04:06:13,809 - #8 ,
INFO  04:06:13,809 - #27 b
INFO  04:06:13,809 - #5 ;
INFO  04:06:13,809 - #27 char
INFO  04:06:13,810 - #27 nizch
INFO  04:06:13,810 - #20 [
INFO  04:06:13,810 - #21 ]
INFO  04:06:13,810 - #8 ,
INFO  04:06:13,810 - #27 c
INFO  04:06:13,810 - #5 ;
INFO  04:06:13,810 - #27 bool
INFO  04:06:13,810 - #27 s1
INFO  04:06:13,811 - #5 ;
INFO  04:06:13,811 - #27 bool
INFO  04:06:13,811 - #27 nizbool
INFO  04:06:13,811 - #20 [
INFO  04:06:13,811 - #21 ]
INFO  04:06:13,811 - #5 ;
INFO  04:06:13,811 - #3 {
INFO  04:06:13,811 - #13 void
INFO  04:06:13,813 - #27 main
INFO  04:06:13,813 - #6 (
INFO  04:06:13,813 - #7 )
INFO  04:06:13,814 - #27 int
INFO  04:06:13,814 - #27 bodovi
INFO  04:06:13,814 - #5 ;
INFO  04:06:13,814 - #27 bool
INFO  04:06:13,814 - #27 bt
INFO  04:06:13,814 - #5 ;
INFO  04:06:13,814 - #27 int
INFO  04:06:13,815 - #27 s
INFO  04:06:13,815 - #5 ;
INFO  04:06:13,815 - #3 {
INFO  04:06:13,815 - #27 a
INFO  04:06:13,817 - #12 =
INFO  04:06:13,817 - #26 5
INFO  04:06:13,818 - #5 ;
INFO  04:06:13,818 - #9 print
INFO  04:06:13,819 - #6 (
INFO  04:06:13,819 - #27 a
INFO  04:06:13,819 - #7 )
INFO  04:06:13,820 - #5 ;
INFO  04:06:13,821 - #9 print
INFO  04:06:13,821 - #6 (
INFO  04:06:13,821 - #26 1
INFO  04:06:13,821 - #7 )
INFO  04:06:13,821 - #5 ;
INFO  04:06:13,821 - #4 }
INFO  04:06:13,821 - #4 }
INFO  04:06:13,839 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     a
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:06:13,840 - ===================================
INFO  04:06:13,867 - Deklarisana je konsanta int nula = 0
INFO  04:06:13,867 - Deklarisana je konsanta int jedan = 1
INFO  04:06:13,867 - Deklarisana je konsanta int pet = 5
INFO  04:06:13,868 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:06:13,868 - Deklarisan je niz niz
INFO  04:06:13,868 - Deklarisan je niz niz2
INFO  04:06:13,868 - Deklarisana promenljiva a
INFO  04:06:13,868 - Deklarisana promenljiva b
INFO  04:06:13,869 - Deklarisan je niz nizch
INFO  04:06:13,869 - Deklarisana promenljiva c
INFO  04:06:13,869 - Deklarisana promenljiva s1
INFO  04:06:13,869 - Deklarisan je niz nizbool
INFO  04:06:13,869 - Obradjuje se funkcija main na liniji 13
INFO  04:06:13,871 - Deklarisana promenljiva bodovi
INFO  04:06:13,871 - Deklarisana promenljiva bt
INFO  04:06:13,871 - Deklarisana promenljiva s
INFO  04:06:13,871 -  Print count calls = 2
INFO  04:06:13,872 -  Deklarisanih promenljivih ima = 11
INFO  04:06:13,872 - ===================================
INFO  04:10:01,725 - Parsiranje uspesno zavrseno!
INFO  04:13:03,080 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:13:03,143 - #2 program
INFO  04:13:03,143 - #27 MJProgram
INFO  04:13:03,143 - #23 const
INFO  04:13:03,145 - #27 int
INFO  04:13:03,145 - #27 nula
INFO  04:13:03,146 - #12 =
INFO  04:13:03,146 - #26 0
INFO  04:13:03,147 - #5 ;
INFO  04:13:03,147 - #23 const
INFO  04:13:03,148 - #27 int
INFO  04:13:03,148 - #27 jedan
INFO  04:13:03,148 - #12 =
INFO  04:13:03,148 - #26 1
INFO  04:13:03,148 - #5 ;
INFO  04:13:03,148 - #23 const
INFO  04:13:03,149 - #27 int
INFO  04:13:03,149 - #27 pet
INFO  04:13:03,149 - #12 =
INFO  04:13:03,149 - #26 5
INFO  04:13:03,149 - #5 ;
INFO  04:13:03,149 - #23 const
INFO  04:13:03,149 - #27 char
INFO  04:13:03,150 - #27 pet1
INFO  04:13:03,150 - #12 =
INFO  04:13:03,150 - #28 c
INFO  04:13:03,150 - #5 ;
INFO  04:13:03,150 - #27 int
INFO  04:13:03,150 - #27 niz
INFO  04:13:03,151 - #20 [
INFO  04:13:03,151 - #21 ]
INFO  04:13:03,151 - #8 ,
INFO  04:13:03,151 - #27 niz2
INFO  04:13:03,151 - #20 [
INFO  04:13:03,151 - #21 ]
INFO  04:13:03,151 - #8 ,
INFO  04:13:03,152 - #27 a
INFO  04:13:03,152 - #8 ,
INFO  04:13:03,152 - #27 b
INFO  04:13:03,152 - #5 ;
INFO  04:13:03,152 - #27 char
INFO  04:13:03,153 - #27 nizch
INFO  04:13:03,153 - #20 [
INFO  04:13:03,153 - #21 ]
INFO  04:13:03,153 - #8 ,
INFO  04:13:03,153 - #27 c
INFO  04:13:03,154 - #5 ;
INFO  04:13:03,154 - #27 bool
INFO  04:13:03,154 - #27 s1
INFO  04:13:03,154 - #5 ;
INFO  04:13:03,154 - #27 bool
INFO  04:13:03,154 - #27 nizbool
INFO  04:13:03,155 - #20 [
INFO  04:13:03,155 - #21 ]
INFO  04:13:03,155 - #5 ;
INFO  04:13:03,155 - #3 {
INFO  04:13:03,155 - #13 void
INFO  04:13:03,156 - #27 main
INFO  04:13:03,157 - #6 (
INFO  04:13:03,157 - #7 )
INFO  04:13:03,157 - #27 int
INFO  04:13:03,157 - #27 bodovi
INFO  04:13:03,157 - #5 ;
INFO  04:13:03,158 - #27 bool
INFO  04:13:03,158 - #27 bt
INFO  04:13:03,158 - #5 ;
INFO  04:13:03,158 - #27 int
INFO  04:13:03,158 - #27 s
INFO  04:13:03,158 - #5 ;
INFO  04:13:03,158 - #3 {
INFO  04:13:03,158 - #27 a
INFO  04:13:03,160 - #12 =
INFO  04:13:03,160 - #26 5
INFO  04:13:03,160 - #5 ;
INFO  04:13:03,161 - #9 print
INFO  04:13:03,161 - #6 (
INFO  04:13:03,161 - #27 nula
INFO  04:13:03,161 - #7 )
INFO  04:13:03,162 - #5 ;
INFO  04:13:03,162 - #9 print
INFO  04:13:03,163 - #6 (
INFO  04:13:03,163 - #26 1
INFO  04:13:03,163 - #7 )
INFO  04:13:03,163 - #5 ;
INFO  04:13:03,163 - #4 }
INFO  04:13:03,163 - #4 }
INFO  04:13:03,175 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     nula
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:13:03,175 - ===================================
INFO  04:13:03,179 - Deklarisana je konsanta int nula = 0
INFO  04:13:03,179 - Deklarisana je konsanta int jedan = 1
INFO  04:13:03,180 - Deklarisana je konsanta int pet = 5
INFO  04:13:03,180 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:13:03,180 - Deklarisan je niz niz
INFO  04:13:03,180 - Deklarisan je niz niz2
INFO  04:13:03,180 - Deklarisana promenljiva a
INFO  04:13:03,180 - Deklarisana promenljiva b
INFO  04:13:03,180 - Deklarisan je niz nizch
INFO  04:13:03,181 - Deklarisana promenljiva c
INFO  04:13:03,181 - Deklarisana promenljiva s1
INFO  04:13:03,181 - Deklarisan je niz nizbool
INFO  04:13:03,181 - Obradjuje se funkcija main na liniji 13
INFO  04:13:03,181 - Deklarisana promenljiva bodovi
INFO  04:13:03,181 - Deklarisana promenljiva bt
INFO  04:13:03,181 - Deklarisana promenljiva s
INFO  04:13:03,182 -  Print count calls = 2
INFO  04:13:03,182 -  Deklarisanih promenljivih ima = 11
INFO  04:13:03,182 - ===================================
INFO  04:13:03,195 - Parsiranje uspesno zavrseno!
INFO  04:19:36,509 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:19:36,571 - #2 program
INFO  04:19:36,571 - #27 MJProgram
INFO  04:19:36,571 - #23 const
INFO  04:19:36,573 - #27 int
INFO  04:19:36,573 - #27 nula
INFO  04:19:36,574 - #12 =
INFO  04:19:36,575 - #26 0
INFO  04:19:36,575 - #5 ;
INFO  04:19:36,575 - #23 const
INFO  04:19:36,575 - #27 int
INFO  04:19:36,576 - #27 jedan
INFO  04:19:36,576 - #12 =
INFO  04:19:36,576 - #26 1
INFO  04:19:36,576 - #5 ;
INFO  04:19:36,576 - #23 const
INFO  04:19:36,576 - #27 int
INFO  04:19:36,576 - #27 pet
INFO  04:19:36,576 - #12 =
INFO  04:19:36,577 - #26 5
INFO  04:19:36,577 - #5 ;
INFO  04:19:36,577 - #23 const
INFO  04:19:36,577 - #27 char
INFO  04:19:36,577 - #27 pet1
INFO  04:19:36,577 - #12 =
INFO  04:19:36,577 - #28 c
INFO  04:19:36,578 - #5 ;
INFO  04:19:36,578 - #27 int
INFO  04:19:36,578 - #27 niz
INFO  04:19:36,578 - #20 [
INFO  04:19:36,578 - #21 ]
INFO  04:19:36,578 - #8 ,
INFO  04:19:36,579 - #27 niz2
INFO  04:19:36,579 - #20 [
INFO  04:19:36,579 - #21 ]
INFO  04:19:36,579 - #8 ,
INFO  04:19:36,579 - #27 a
INFO  04:19:36,579 - #8 ,
INFO  04:19:36,579 - #27 b
INFO  04:19:36,580 - #5 ;
INFO  04:19:36,580 - #27 char
INFO  04:19:36,580 - #27 nizch
INFO  04:19:36,580 - #20 [
INFO  04:19:36,581 - #21 ]
INFO  04:19:36,581 - #8 ,
INFO  04:19:36,581 - #27 c
INFO  04:19:36,581 - #5 ;
INFO  04:19:36,581 - #27 bool
INFO  04:19:36,581 - #27 s1
INFO  04:19:36,581 - #5 ;
INFO  04:19:36,582 - #27 bool
INFO  04:19:36,582 - #27 nizbool
INFO  04:19:36,582 - #20 [
INFO  04:19:36,582 - #21 ]
INFO  04:19:36,582 - #5 ;
INFO  04:19:36,582 - #3 {
INFO  04:19:36,582 - #13 void
INFO  04:19:36,584 - #27 main
INFO  04:19:36,585 - #6 (
INFO  04:19:36,585 - #7 )
INFO  04:19:36,585 - #27 int
INFO  04:19:36,585 - #27 bodovi
INFO  04:19:36,585 - #5 ;
INFO  04:19:36,585 - #27 bool
INFO  04:19:36,586 - #27 bt
INFO  04:19:36,586 - #5 ;
INFO  04:19:36,586 - #27 int
INFO  04:19:36,586 - #27 s
INFO  04:19:36,586 - #5 ;
INFO  04:19:36,586 - #3 {
INFO  04:19:36,586 - #27 a
INFO  04:19:36,588 - #12 =
INFO  04:19:36,588 - #26 5
INFO  04:19:36,588 - #5 ;
INFO  04:19:36,588 - #9 print
INFO  04:19:36,589 - #6 (
INFO  04:19:36,589 - #27 nula
INFO  04:19:36,589 - #7 )
INFO  04:19:36,591 - #5 ;
INFO  04:19:36,591 - #9 print
INFO  04:19:36,592 - #6 (
INFO  04:19:36,592 - #26 1
INFO  04:19:36,592 - #7 )
INFO  04:19:36,592 - #5 ;
INFO  04:19:36,592 - #4 }
INFO  04:19:36,592 - #4 }
INFO  04:19:36,605 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     nula
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:19:36,606 - ===================================
INFO  04:19:36,611 - Deklarisana je konsanta int nula = 0
INFO  04:19:36,611 - Deklarisana je konsanta int jedan = 1
INFO  04:19:36,611 - Deklarisana je konsanta int pet = 5
INFO  04:19:36,611 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:19:36,612 - Deklarisan je niz niz
INFO  04:19:36,612 - Deklarisan je niz niz2
INFO  04:19:36,612 - Deklarisana promenljiva a
INFO  04:19:36,612 - Deklarisana promenljiva b
INFO  04:19:36,612 - Deklarisan je niz nizch
INFO  04:19:36,613 - Deklarisana promenljiva c
INFO  04:19:36,613 - Deklarisana promenljiva s1
INFO  04:19:36,613 - Deklarisan je niz nizbool
INFO  04:19:36,613 - Obradjuje se funkcija main na liniji 13
INFO  04:19:36,613 - Deklarisana promenljiva bodovi
INFO  04:19:36,613 - Deklarisana promenljiva bt
INFO  04:19:36,613 - Deklarisana promenljiva s
INFO  04:19:36,614 -  Print count calls = 2
INFO  04:19:36,614 -  Deklarisanih promenljivih ima = 11
INFO  04:19:36,614 - ===================================
INFO  04:19:36,625 - Parsiranje uspesno zavrseno!
INFO  04:22:36,102 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:22:36,171 - #2 program
INFO  04:22:36,171 - #27 MJProgram
INFO  04:22:36,171 - #23 const
INFO  04:22:36,173 - #27 int
INFO  04:22:36,173 - #27 nula
INFO  04:22:36,174 - #12 =
INFO  04:22:36,174 - #26 0
INFO  04:22:36,174 - #5 ;
INFO  04:22:36,175 - #23 const
INFO  04:22:36,175 - #27 int
INFO  04:22:36,176 - #27 jedan
INFO  04:22:36,176 - #12 =
INFO  04:22:36,176 - #26 1
INFO  04:22:36,176 - #5 ;
INFO  04:22:36,176 - #23 const
INFO  04:22:36,176 - #27 int
INFO  04:22:36,176 - #27 pet
INFO  04:22:36,177 - #12 =
INFO  04:22:36,177 - #26 5
INFO  04:22:36,177 - #5 ;
INFO  04:22:36,177 - #23 const
INFO  04:22:36,177 - #27 char
INFO  04:22:36,177 - #27 pet1
INFO  04:22:36,177 - #12 =
INFO  04:22:36,178 - #28 c
INFO  04:22:36,178 - #5 ;
INFO  04:22:36,178 - #27 int
INFO  04:22:36,178 - #27 niz
INFO  04:22:36,178 - #20 [
INFO  04:22:36,178 - #21 ]
INFO  04:22:36,178 - #8 ,
INFO  04:22:36,179 - #27 niz2
INFO  04:22:36,179 - #20 [
INFO  04:22:36,179 - #21 ]
INFO  04:22:36,179 - #8 ,
INFO  04:22:36,179 - #27 a
INFO  04:22:36,180 - #8 ,
INFO  04:22:36,180 - #27 b
INFO  04:22:36,180 - #5 ;
INFO  04:22:36,180 - #27 char
INFO  04:22:36,181 - #27 nizch
INFO  04:22:36,181 - #20 [
INFO  04:22:36,181 - #21 ]
INFO  04:22:36,181 - #8 ,
INFO  04:22:36,181 - #27 c
INFO  04:22:36,181 - #5 ;
INFO  04:22:36,181 - #27 bool
INFO  04:22:36,182 - #27 s1
INFO  04:22:36,182 - #5 ;
INFO  04:22:36,182 - #27 bool
INFO  04:22:36,182 - #27 nizbool
INFO  04:22:36,182 - #20 [
INFO  04:22:36,182 - #21 ]
INFO  04:22:36,182 - #5 ;
INFO  04:22:36,182 - #3 {
INFO  04:22:36,183 - #13 void
INFO  04:22:36,184 - #27 main
INFO  04:22:36,184 - #6 (
INFO  04:22:36,185 - #7 )
INFO  04:22:36,185 - #27 int
INFO  04:22:36,185 - #27 bodovi
INFO  04:22:36,185 - #5 ;
INFO  04:22:36,186 - #27 bool
INFO  04:22:36,186 - #27 bt
INFO  04:22:36,186 - #5 ;
INFO  04:22:36,186 - #27 int
INFO  04:22:36,186 - #27 s
INFO  04:22:36,187 - #5 ;
INFO  04:22:36,187 - #3 {
INFO  04:22:36,187 - #27 a
INFO  04:22:36,188 - #12 =
INFO  04:22:36,188 - #26 5
INFO  04:22:36,189 - #11 +
INFO  04:22:36,189 - #26 2
INFO  04:22:36,191 - #5 ;
INFO  04:22:36,191 - #9 print
INFO  04:22:36,192 - #6 (
INFO  04:22:36,192 - #27 nula
INFO  04:22:36,192 - #7 )
INFO  04:22:36,193 - #5 ;
INFO  04:22:36,193 - #9 print
INFO  04:22:36,194 - #6 (
INFO  04:22:36,194 - #26 1
INFO  04:22:36,194 - #7 )
INFO  04:22:36,194 - #5 ;
INFO  04:22:36,194 - #4 }
INFO  04:22:36,194 - #4 }
INFO  04:22:36,208 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 a
                ) [DesignatorIDENT]
                AddExpr(
                  TermExpr(
                    TermFactor(
                      FactorNUMBER(
                       5
                      ) [FactorNUMBER]
                    ) [TermFactor]
                  ) [TermExpr]
                  AddopPlus(
                  ) [AddopPlus]
                  TermFactor(
                    FactorNUMBER(
                     2
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [AddExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          MatchedStmt(
            PrintStmt(
              TermExpr(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     nula
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExpr]
              NoConst(
              ) [NoConst]
            ) [PrintStmt]
          ) [MatchedStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                FactorNUMBER(
                 1
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:22:36,208 - ===================================
INFO  04:22:36,214 - Deklarisana je konsanta int nula = 0
INFO  04:22:36,214 - Deklarisana je konsanta int jedan = 1
INFO  04:22:36,214 - Deklarisana je konsanta int pet = 5
INFO  04:22:36,214 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:22:36,215 - Deklarisan je niz niz
INFO  04:22:36,215 - Deklarisan je niz niz2
INFO  04:22:36,215 - Deklarisana promenljiva a
INFO  04:22:36,215 - Deklarisana promenljiva b
INFO  04:22:36,215 - Deklarisan je niz nizch
INFO  04:22:36,215 - Deklarisana promenljiva c
INFO  04:22:36,215 - Deklarisana promenljiva s1
INFO  04:22:36,216 - Deklarisan je niz nizbool
INFO  04:22:36,216 - Obradjuje se funkcija main na liniji 13
INFO  04:22:36,216 - Deklarisana promenljiva bodovi
INFO  04:22:36,216 - Deklarisana promenljiva bt
INFO  04:22:36,217 - Deklarisana promenljiva s
INFO  04:22:36,217 -  Print count calls = 2
INFO  04:22:36,217 -  Deklarisanih promenljivih ima = 11
INFO  04:22:36,218 - ===================================
INFO  04:22:36,232 - Parsiranje uspesno zavrseno!
INFO  04:24:33,623 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:24:33,681 - #2 program
INFO  04:24:33,681 - #27 MJProgram
INFO  04:24:33,681 - #23 const
INFO  04:24:33,683 - #27 int
INFO  04:24:33,683 - #27 nula
INFO  04:24:33,684 - #12 =
INFO  04:24:33,684 - #26 0
INFO  04:24:33,685 - #5 ;
INFO  04:24:33,685 - #23 const
INFO  04:24:33,685 - #27 int
INFO  04:24:33,685 - #27 jedan
INFO  04:24:33,685 - #12 =
INFO  04:24:33,685 - #26 1
INFO  04:24:33,686 - #5 ;
INFO  04:24:33,686 - #23 const
INFO  04:24:33,686 - #27 int
INFO  04:24:33,686 - #27 pet
INFO  04:24:33,686 - #12 =
INFO  04:24:33,686 - #26 5
INFO  04:24:33,686 - #5 ;
INFO  04:24:33,686 - #23 const
INFO  04:24:33,686 - #27 char
INFO  04:24:33,686 - #27 pet1
INFO  04:24:33,687 - #12 =
INFO  04:24:33,687 - #28 c
INFO  04:24:33,687 - #5 ;
INFO  04:24:33,687 - #27 int
INFO  04:24:33,687 - #27 niz
INFO  04:24:33,688 - #20 [
INFO  04:24:33,688 - #21 ]
INFO  04:24:33,688 - #8 ,
INFO  04:24:33,688 - #27 niz2
INFO  04:24:33,688 - #20 [
INFO  04:24:33,688 - #21 ]
INFO  04:24:33,688 - #8 ,
INFO  04:24:33,688 - #27 a
INFO  04:24:33,688 - #8 ,
INFO  04:24:33,689 - #27 b
INFO  04:24:33,689 - #5 ;
INFO  04:24:33,689 - #27 char
INFO  04:24:33,690 - #27 nizch
INFO  04:24:33,690 - #20 [
INFO  04:24:33,690 - #21 ]
INFO  04:24:33,690 - #8 ,
INFO  04:24:33,690 - #27 c
INFO  04:24:33,690 - #5 ;
INFO  04:24:33,691 - #27 bool
INFO  04:24:33,691 - #27 s1
INFO  04:24:33,691 - #5 ;
INFO  04:24:33,691 - #27 bool
INFO  04:24:33,691 - #27 nizbool
INFO  04:24:33,691 - #20 [
INFO  04:24:33,691 - #21 ]
INFO  04:24:33,691 - #5 ;
INFO  04:24:33,692 - #3 {
INFO  04:24:33,692 - #13 void
INFO  04:24:33,693 - #27 main
INFO  04:24:33,693 - #6 (
INFO  04:24:33,694 - #7 )
INFO  04:24:33,694 - #27 int
INFO  04:24:33,694 - #27 bodovi
INFO  04:24:33,694 - #5 ;
INFO  04:24:33,694 - #27 bool
INFO  04:24:33,694 - #27 bt
INFO  04:24:33,694 - #5 ;
INFO  04:24:33,694 - #27 int
INFO  04:24:33,695 - #27 s
INFO  04:24:33,695 - #5 ;
INFO  04:24:33,695 - #3 {
INFO  04:24:33,695 - #27 a
INFO  04:24:33,696 - #12 =
INFO  04:24:33,697 - #26 5
INFO  04:24:33,697 - #11 +
INFO  04:24:33,697 - #26 2
INFO  04:24:33,699 - #5 ;
INFO  04:24:33,700 - #4 }
INFO  04:24:33,700 - #4 }
INFO  04:24:33,711 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                FactorNUMBER(
                 2
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:24:33,711 - ===================================
INFO  04:24:33,715 - Deklarisana je konsanta int nula = 0
INFO  04:24:33,716 - Deklarisana je konsanta int jedan = 1
INFO  04:24:33,716 - Deklarisana je konsanta int pet = 5
INFO  04:24:33,716 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:24:33,716 - Deklarisan je niz niz
INFO  04:24:33,716 - Deklarisan je niz niz2
INFO  04:24:33,716 - Deklarisana promenljiva a
INFO  04:24:33,716 - Deklarisana promenljiva b
INFO  04:24:33,717 - Deklarisan je niz nizch
INFO  04:24:33,717 - Deklarisana promenljiva c
INFO  04:24:33,717 - Deklarisana promenljiva s1
INFO  04:24:33,717 - Deklarisan je niz nizbool
INFO  04:24:33,717 - Obradjuje se funkcija main na liniji 13
INFO  04:24:33,717 - Deklarisana promenljiva bodovi
INFO  04:24:33,717 - Deklarisana promenljiva bt
INFO  04:24:33,718 - Deklarisana promenljiva s
INFO  04:24:33,718 -  Print count calls = 0
INFO  04:24:33,718 -  Deklarisanih promenljivih ima = 11
INFO  04:24:33,718 - ===================================
INFO  04:24:33,729 - Parsiranje uspesno zavrseno!
INFO  04:26:43,926 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:26:43,991 - #2 program
INFO  04:26:43,992 - #27 MJProgram
INFO  04:26:43,992 - #23 const
INFO  04:26:43,994 - #27 int
INFO  04:26:43,994 - #27 nula
INFO  04:26:43,995 - #12 =
INFO  04:26:43,996 - #26 0
INFO  04:26:43,996 - #5 ;
INFO  04:26:43,996 - #23 const
INFO  04:26:43,997 - #27 int
INFO  04:26:43,997 - #27 jedan
INFO  04:26:43,997 - #12 =
INFO  04:26:43,997 - #26 1
INFO  04:26:43,997 - #5 ;
INFO  04:26:43,997 - #23 const
INFO  04:26:43,997 - #27 int
INFO  04:26:43,997 - #27 pet
INFO  04:26:43,997 - #12 =
INFO  04:26:43,998 - #26 5
INFO  04:26:43,998 - #5 ;
INFO  04:26:43,998 - #23 const
INFO  04:26:43,998 - #27 char
INFO  04:26:43,998 - #27 pet1
INFO  04:26:43,998 - #12 =
INFO  04:26:43,998 - #28 c
INFO  04:26:43,999 - #5 ;
INFO  04:26:43,999 - #27 int
INFO  04:26:43,999 - #27 niz
INFO  04:26:43,999 - #20 [
INFO  04:26:43,999 - #21 ]
INFO  04:26:43,999 - #8 ,
INFO  04:26:44,000 - #27 niz2
INFO  04:26:44,000 - #20 [
INFO  04:26:44,000 - #21 ]
INFO  04:26:44,000 - #8 ,
INFO  04:26:44,000 - #27 a
INFO  04:26:44,000 - #8 ,
INFO  04:26:44,001 - #27 b
INFO  04:26:44,001 - #5 ;
INFO  04:26:44,002 - #27 char
INFO  04:26:44,002 - #27 nizch
INFO  04:26:44,002 - #20 [
INFO  04:26:44,003 - #21 ]
INFO  04:26:44,003 - #8 ,
INFO  04:26:44,003 - #27 c
INFO  04:26:44,003 - #5 ;
INFO  04:26:44,003 - #27 bool
INFO  04:26:44,003 - #27 s1
INFO  04:26:44,004 - #5 ;
INFO  04:26:44,004 - #27 bool
INFO  04:26:44,004 - #27 nizbool
INFO  04:26:44,004 - #20 [
INFO  04:26:44,004 - #21 ]
INFO  04:26:44,004 - #5 ;
INFO  04:26:44,004 - #3 {
INFO  04:26:44,005 - #13 void
INFO  04:26:44,007 - #27 main
INFO  04:26:44,007 - #6 (
INFO  04:26:44,007 - #7 )
INFO  04:26:44,007 - #27 int
INFO  04:26:44,008 - #27 bodovi
INFO  04:26:44,008 - #5 ;
INFO  04:26:44,008 - #27 bool
INFO  04:26:44,008 - #27 bt
INFO  04:26:44,008 - #5 ;
INFO  04:26:44,008 - #27 int
INFO  04:26:44,009 - #27 s
INFO  04:26:44,009 - #5 ;
INFO  04:26:44,009 - #3 {
INFO  04:26:44,009 - #27 a
INFO  04:26:44,011 - #12 =
INFO  04:26:44,011 - #26 5
INFO  04:26:44,011 - #11 +
INFO  04:26:44,012 - #26 2
INFO  04:26:44,014 - #5 ;
INFO  04:26:44,015 - #9 print
INFO  04:26:44,015 - #6 (
INFO  04:26:44,015 - #27 a
INFO  04:26:44,016 - #7 )
INFO  04:26:44,017 - #5 ;
INFO  04:26:44,017 - #4 }
INFO  04:26:44,017 - #4 }
INFO  04:26:44,030 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               a
              ) [DesignatorIDENT]
              AddExpr(
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
                AddopPlus(
                ) [AddopPlus]
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   a
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:26:44,031 - ===================================
INFO  04:26:44,036 - Deklarisana je konsanta int nula = 0
INFO  04:26:44,036 - Deklarisana je konsanta int jedan = 1
INFO  04:26:44,036 - Deklarisana je konsanta int pet = 5
INFO  04:26:44,036 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:26:44,036 - Deklarisan je niz niz
INFO  04:26:44,037 - Deklarisan je niz niz2
INFO  04:26:44,037 - Deklarisana promenljiva a
INFO  04:26:44,037 - Deklarisana promenljiva b
INFO  04:26:44,037 - Deklarisan je niz nizch
INFO  04:26:44,037 - Deklarisana promenljiva c
INFO  04:26:44,037 - Deklarisana promenljiva s1
INFO  04:26:44,037 - Deklarisan je niz nizbool
INFO  04:26:44,037 - Obradjuje se funkcija main na liniji 13
INFO  04:26:44,038 - Deklarisana promenljiva bodovi
INFO  04:26:44,038 - Deklarisana promenljiva bt
INFO  04:26:44,038 - Deklarisana promenljiva s
INFO  04:26:44,038 -  Print count calls = 1
INFO  04:26:44,038 -  Deklarisanih promenljivih ima = 11
INFO  04:26:44,038 - ===================================
INFO  04:26:44,050 - Parsiranje uspesno zavrseno!
INFO  04:28:14,996 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:28:15,080 - #2 program
INFO  04:28:15,081 - #27 MJProgram
INFO  04:28:15,081 - #23 const
INFO  04:28:15,083 - #27 int
INFO  04:28:15,084 - #27 nula
INFO  04:28:15,085 - #12 =
INFO  04:28:15,086 - #26 0
INFO  04:28:15,086 - #5 ;
INFO  04:28:15,086 - #23 const
INFO  04:28:15,087 - #27 int
INFO  04:28:15,087 - #27 jedan
INFO  04:28:15,087 - #12 =
INFO  04:28:15,087 - #26 1
INFO  04:28:15,087 - #5 ;
INFO  04:28:15,087 - #23 const
INFO  04:28:15,087 - #27 int
INFO  04:28:15,087 - #27 pet
INFO  04:28:15,087 - #12 =
INFO  04:28:15,087 - #26 5
INFO  04:28:15,087 - #5 ;
INFO  04:28:15,088 - #23 const
INFO  04:28:15,088 - #27 char
INFO  04:28:15,088 - #27 pet1
INFO  04:28:15,088 - #12 =
INFO  04:28:15,088 - #28 c
INFO  04:28:15,088 - #5 ;
INFO  04:28:15,088 - #27 int
INFO  04:28:15,088 - #27 niz
INFO  04:28:15,088 - #20 [
INFO  04:28:15,089 - #21 ]
INFO  04:28:15,089 - #8 ,
INFO  04:28:15,089 - #27 niz2
INFO  04:28:15,089 - #20 [
INFO  04:28:15,089 - #21 ]
INFO  04:28:15,089 - #8 ,
INFO  04:28:15,089 - #27 a
INFO  04:28:15,089 - #8 ,
INFO  04:28:15,089 - #27 b
INFO  04:28:15,090 - #5 ;
INFO  04:28:15,090 - #27 char
INFO  04:28:15,090 - #27 nizch
INFO  04:28:15,090 - #20 [
INFO  04:28:15,090 - #21 ]
INFO  04:28:15,091 - #8 ,
INFO  04:28:15,091 - #27 c
INFO  04:28:15,091 - #5 ;
INFO  04:28:15,091 - #27 bool
INFO  04:28:15,091 - #27 s1
INFO  04:28:15,091 - #5 ;
INFO  04:28:15,091 - #27 bool
INFO  04:28:15,091 - #27 nizbool
INFO  04:28:15,091 - #20 [
INFO  04:28:15,092 - #21 ]
INFO  04:28:15,092 - #5 ;
INFO  04:28:15,092 - #3 {
INFO  04:28:15,092 - #13 void
INFO  04:28:15,093 - #27 main
INFO  04:28:15,094 - #6 (
INFO  04:28:15,094 - #7 )
INFO  04:28:15,094 - #27 int
INFO  04:28:15,095 - #27 bodovi
INFO  04:28:15,095 - #5 ;
INFO  04:28:15,096 - #27 bool
INFO  04:28:15,097 - #27 bt
INFO  04:28:15,097 - #5 ;
INFO  04:28:15,099 - #27 int
INFO  04:28:15,100 - #27 s
INFO  04:28:15,101 - #5 ;
INFO  04:28:15,101 - #3 {
INFO  04:28:15,101 - #27 a
INFO  04:28:15,103 - #12 =
INFO  04:28:15,103 - #26 5
INFO  04:28:15,103 - #11 +
INFO  04:28:15,104 - #26 2
INFO  04:28:15,107 - #5 ;
INFO  04:28:15,107 - #9 print
INFO  04:28:15,108 - #6 (
INFO  04:28:15,108 - #27 a
INFO  04:28:15,108 - #7 )
INFO  04:28:15,110 - #5 ;
INFO  04:28:15,110 - #4 }
INFO  04:28:15,111 - #4 }
INFO  04:28:15,131 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               a
              ) [DesignatorIDENT]
              AddExpr(
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
                AddopPlus(
                ) [AddopPlus]
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   a
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:28:15,132 - ===================================
INFO  04:28:15,155 - Deklarisana je konsanta int nula = 0
INFO  04:28:15,155 - Deklarisana je konsanta int jedan = 1
INFO  04:28:15,155 - Deklarisana je konsanta int pet = 5
INFO  04:28:15,156 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:28:15,156 - Deklarisan je niz niz
INFO  04:28:15,156 - Deklarisan je niz niz2
INFO  04:28:15,156 - Deklarisana promenljiva a
INFO  04:28:15,156 - Deklarisana promenljiva b
INFO  04:28:15,156 - Deklarisan je niz nizch
INFO  04:28:15,156 - Deklarisana promenljiva c
INFO  04:28:15,157 - Deklarisana promenljiva s1
INFO  04:28:15,157 - Deklarisan je niz nizbool
INFO  04:28:15,157 - Obradjuje se funkcija main na liniji 13
INFO  04:28:15,157 - Deklarisana promenljiva bodovi
INFO  04:28:15,157 - Deklarisana promenljiva bt
INFO  04:28:15,157 - Deklarisana promenljiva s
INFO  04:28:15,160 -  Print count calls = 1
INFO  04:28:15,160 -  Deklarisanih promenljivih ima = 11
INFO  04:28:15,160 - ===================================
INFO  04:34:27,505 - Parsiranje uspesno zavrseno!
INFO  04:35:41,192 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:35:41,283 - #2 program
INFO  04:35:41,284 - #27 MJProgram
INFO  04:35:41,284 - #23 const
INFO  04:35:41,287 - #27 int
INFO  04:35:41,287 - #27 nula
INFO  04:35:41,289 - #12 =
INFO  04:35:41,290 - #26 0
INFO  04:35:41,290 - #5 ;
INFO  04:35:41,290 - #23 const
INFO  04:35:41,291 - #27 int
INFO  04:35:41,291 - #27 jedan
INFO  04:35:41,291 - #12 =
INFO  04:35:41,292 - #26 1
INFO  04:35:41,292 - #5 ;
INFO  04:35:41,292 - #23 const
INFO  04:35:41,292 - #27 int
INFO  04:35:41,292 - #27 pet
INFO  04:35:41,292 - #12 =
INFO  04:35:41,293 - #26 5
INFO  04:35:41,293 - #5 ;
INFO  04:35:41,293 - #23 const
INFO  04:35:41,293 - #27 char
INFO  04:35:41,293 - #27 pet1
INFO  04:35:41,293 - #12 =
INFO  04:35:41,294 - #28 c
INFO  04:35:41,294 - #5 ;
INFO  04:35:41,294 - #27 int
INFO  04:35:41,294 - #27 niz
INFO  04:35:41,294 - #20 [
INFO  04:35:41,295 - #21 ]
INFO  04:35:41,295 - #8 ,
INFO  04:35:41,295 - #27 niz2
INFO  04:35:41,295 - #20 [
INFO  04:35:41,295 - #21 ]
INFO  04:35:41,295 - #8 ,
INFO  04:35:41,295 - #27 a
INFO  04:35:41,295 - #8 ,
INFO  04:35:41,296 - #27 b
INFO  04:35:41,296 - #5 ;
INFO  04:35:41,296 - #27 char
INFO  04:35:41,297 - #27 nizch
INFO  04:35:41,297 - #20 [
INFO  04:35:41,297 - #21 ]
INFO  04:35:41,297 - #8 ,
INFO  04:35:41,297 - #27 c
INFO  04:35:41,297 - #5 ;
INFO  04:35:41,298 - #27 bool
INFO  04:35:41,298 - #27 s1
INFO  04:35:41,298 - #5 ;
INFO  04:35:41,298 - #27 bool
INFO  04:35:41,298 - #27 nizbool
INFO  04:35:41,298 - #20 [
INFO  04:35:41,298 - #21 ]
INFO  04:35:41,299 - #5 ;
INFO  04:35:41,299 - #3 {
INFO  04:35:41,299 - #13 void
INFO  04:35:41,301 - #27 main
INFO  04:35:41,301 - #6 (
INFO  04:35:41,301 - #7 )
INFO  04:35:41,302 - #27 int
INFO  04:35:41,302 - #27 bodovi
INFO  04:35:41,302 - #5 ;
INFO  04:35:41,302 - #27 bool
INFO  04:35:41,302 - #27 bt
INFO  04:35:41,302 - #5 ;
INFO  04:35:41,302 - #27 int
INFO  04:35:41,303 - #27 s
INFO  04:35:41,303 - #5 ;
INFO  04:35:41,303 - #3 {
INFO  04:35:41,303 - #27 a
INFO  04:35:41,305 - #12 =
INFO  04:35:41,305 - #26 5
INFO  04:35:41,305 - #11 +
INFO  04:35:41,305 - #26 2
INFO  04:35:41,308 - #5 ;
INFO  04:35:41,309 - #4 }
INFO  04:35:41,309 - #4 }
INFO  04:35:41,327 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                FactorNUMBER(
                 2
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:35:41,330 - ===================================
INFO  04:35:41,353 - Deklarisana je konsanta int nula = 0
INFO  04:35:41,353 - Deklarisana je konsanta int jedan = 1
INFO  04:35:41,353 - Deklarisana je konsanta int pet = 5
INFO  04:35:41,354 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:35:41,354 - Deklarisan je niz niz
INFO  04:35:41,354 - Deklarisan je niz niz2
INFO  04:35:41,354 - Deklarisana promenljiva a
INFO  04:35:41,354 - Deklarisana promenljiva b
INFO  04:35:41,354 - Deklarisan je niz nizch
INFO  04:35:41,354 - Deklarisana promenljiva c
INFO  04:35:41,354 - Deklarisana promenljiva s1
INFO  04:35:41,355 - Deklarisan je niz nizbool
INFO  04:35:41,355 - Obradjuje se funkcija main na liniji 13
INFO  04:35:41,355 - Deklarisana promenljiva bodovi
INFO  04:35:41,355 - Deklarisana promenljiva bt
INFO  04:35:41,355 - Deklarisana promenljiva s
INFO  04:35:41,355 -  Print count calls = 0
INFO  04:35:41,356 -  Deklarisanih promenljivih ima = 11
INFO  04:35:41,356 - ===================================
INFO  04:37:13,245 - Parsiranje uspesno zavrseno!
INFO  04:37:41,103 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:37:41,186 - #2 program
INFO  04:37:41,187 - #27 MJProgram
INFO  04:37:41,187 - #23 const
INFO  04:37:41,189 - #27 int
INFO  04:37:41,189 - #27 nula
INFO  04:37:41,191 - #12 =
INFO  04:37:41,191 - #26 0
INFO  04:37:41,191 - #5 ;
INFO  04:37:41,192 - #23 const
INFO  04:37:41,192 - #27 int
INFO  04:37:41,192 - #27 jedan
INFO  04:37:41,192 - #12 =
INFO  04:37:41,192 - #26 1
INFO  04:37:41,192 - #5 ;
INFO  04:37:41,193 - #23 const
INFO  04:37:41,193 - #27 int
INFO  04:37:41,193 - #27 pet
INFO  04:37:41,193 - #12 =
INFO  04:37:41,193 - #26 5
INFO  04:37:41,193 - #5 ;
INFO  04:37:41,193 - #23 const
INFO  04:37:41,193 - #27 char
INFO  04:37:41,193 - #27 pet1
INFO  04:37:41,193 - #12 =
INFO  04:37:41,194 - #28 c
INFO  04:37:41,194 - #5 ;
INFO  04:37:41,194 - #27 int
INFO  04:37:41,194 - #27 niz
INFO  04:37:41,194 - #20 [
INFO  04:37:41,194 - #21 ]
INFO  04:37:41,194 - #8 ,
INFO  04:37:41,195 - #27 niz2
INFO  04:37:41,195 - #20 [
INFO  04:37:41,195 - #21 ]
INFO  04:37:41,195 - #8 ,
INFO  04:37:41,195 - #27 a
INFO  04:37:41,195 - #8 ,
INFO  04:37:41,195 - #27 b
INFO  04:37:41,195 - #5 ;
INFO  04:37:41,196 - #27 char
INFO  04:37:41,196 - #27 nizch
INFO  04:37:41,196 - #20 [
INFO  04:37:41,196 - #21 ]
INFO  04:37:41,196 - #8 ,
INFO  04:37:41,196 - #27 c
INFO  04:37:41,196 - #5 ;
INFO  04:37:41,196 - #27 bool
INFO  04:37:41,197 - #27 s1
INFO  04:37:41,197 - #5 ;
INFO  04:37:41,197 - #27 bool
INFO  04:37:41,197 - #27 nizbool
INFO  04:37:41,197 - #20 [
INFO  04:37:41,197 - #21 ]
INFO  04:37:41,197 - #5 ;
INFO  04:37:41,197 - #3 {
INFO  04:37:41,197 - #13 void
INFO  04:37:41,199 - #27 main
INFO  04:37:41,199 - #6 (
INFO  04:37:41,200 - #7 )
INFO  04:37:41,200 - #27 int
INFO  04:37:41,200 - #27 bodovi
INFO  04:37:41,200 - #5 ;
INFO  04:37:41,200 - #27 bool
INFO  04:37:41,201 - #27 bt
INFO  04:37:41,201 - #5 ;
INFO  04:37:41,201 - #27 int
INFO  04:37:41,201 - #27 s
INFO  04:37:41,201 - #5 ;
INFO  04:37:41,202 - #3 {
INFO  04:37:41,202 - #27 a
INFO  04:37:41,204 - #12 =
INFO  04:37:41,205 - #26 5
INFO  04:37:41,205 - #11 +
INFO  04:37:41,206 - #26 7
INFO  04:37:41,209 - #5 ;
INFO  04:37:41,209 - #4 }
INFO  04:37:41,210 - #4 }
INFO  04:37:41,232 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                FactorNUMBER(
                 7
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:37:41,234 - ===================================
INFO  04:37:41,258 - Deklarisana je konsanta int nula = 0
INFO  04:37:41,258 - Deklarisana je konsanta int jedan = 1
INFO  04:37:41,258 - Deklarisana je konsanta int pet = 5
INFO  04:37:41,259 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:37:41,259 - Deklarisan je niz niz
INFO  04:37:41,259 - Deklarisan je niz niz2
INFO  04:37:41,260 - Deklarisana promenljiva a
INFO  04:37:41,260 - Deklarisana promenljiva b
INFO  04:37:41,260 - Deklarisan je niz nizch
INFO  04:37:41,260 - Deklarisana promenljiva c
INFO  04:37:41,260 - Deklarisana promenljiva s1
INFO  04:37:41,260 - Deklarisan je niz nizbool
INFO  04:37:41,261 - Obradjuje se funkcija main na liniji 13
INFO  04:37:41,261 - Deklarisana promenljiva bodovi
INFO  04:37:41,261 - Deklarisana promenljiva bt
INFO  04:37:41,261 - Deklarisana promenljiva s
INFO  04:37:41,262 -  Print count calls = 0
INFO  04:37:41,262 -  Deklarisanih promenljivih ima = 11
INFO  04:37:41,262 - ===================================
INFO  04:40:26,526 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:40:26,601 - #2 program
INFO  04:40:26,602 - #27 MJProgram
INFO  04:40:26,602 - #23 const
INFO  04:40:26,604 - #27 int
INFO  04:40:26,604 - #27 nula
INFO  04:40:26,606 - #12 =
INFO  04:40:26,606 - #26 0
INFO  04:40:26,606 - #5 ;
INFO  04:40:26,606 - #23 const
INFO  04:40:26,607 - #27 int
INFO  04:40:26,607 - #27 jedan
INFO  04:40:26,607 - #12 =
INFO  04:40:26,607 - #26 1
INFO  04:40:26,607 - #5 ;
INFO  04:40:26,607 - #23 const
INFO  04:40:26,607 - #27 int
INFO  04:40:26,607 - #27 pet
INFO  04:40:26,608 - #12 =
INFO  04:40:26,608 - #26 5
INFO  04:40:26,608 - #5 ;
INFO  04:40:26,608 - #23 const
INFO  04:40:26,608 - #27 char
INFO  04:40:26,608 - #27 pet1
INFO  04:40:26,608 - #12 =
INFO  04:40:26,608 - #28 c
INFO  04:40:26,608 - #5 ;
INFO  04:40:26,609 - #27 int
INFO  04:40:26,609 - #27 niz
INFO  04:40:26,609 - #20 [
INFO  04:40:26,609 - #21 ]
INFO  04:40:26,609 - #8 ,
INFO  04:40:26,609 - #27 niz2
INFO  04:40:26,609 - #20 [
INFO  04:40:26,609 - #21 ]
INFO  04:40:26,609 - #8 ,
INFO  04:40:26,609 - #27 a
INFO  04:40:26,610 - #8 ,
INFO  04:40:26,610 - #27 b
INFO  04:40:26,610 - #5 ;
INFO  04:40:26,610 - #27 char
INFO  04:40:26,611 - #27 nizch
INFO  04:40:26,611 - #20 [
INFO  04:40:26,611 - #21 ]
INFO  04:40:26,611 - #8 ,
INFO  04:40:26,611 - #27 c
INFO  04:40:26,611 - #5 ;
INFO  04:40:26,611 - #27 bool
INFO  04:40:26,612 - #27 s1
INFO  04:40:26,612 - #5 ;
INFO  04:40:26,612 - #27 bool
INFO  04:40:26,612 - #27 nizbool
INFO  04:40:26,612 - #20 [
INFO  04:40:26,612 - #21 ]
INFO  04:40:26,612 - #5 ;
INFO  04:40:26,612 - #3 {
INFO  04:40:26,613 - #13 void
INFO  04:40:26,615 - #27 main
INFO  04:40:26,615 - #6 (
INFO  04:40:26,615 - #7 )
INFO  04:40:26,615 - #27 int
INFO  04:40:26,615 - #27 bodovi
INFO  04:40:26,615 - #5 ;
INFO  04:40:26,616 - #27 bool
INFO  04:40:26,616 - #27 bt
INFO  04:40:26,616 - #5 ;
INFO  04:40:26,616 - #27 int
INFO  04:40:26,616 - #27 s
INFO  04:40:26,616 - #5 ;
INFO  04:40:26,616 - #3 {
INFO  04:40:26,616 - #27 a
INFO  04:40:26,618 - #12 =
INFO  04:40:26,618 - #26 5
INFO  04:40:26,618 - #11 +
INFO  04:40:26,619 - #26 7
INFO  04:40:26,621 - #5 ;
INFO  04:40:26,621 - #4 }
INFO  04:40:26,621 - #4 }
INFO  04:40:26,636 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                FactorNUMBER(
                 7
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:40:26,637 - ===================================
INFO  04:40:26,641 - Deklarisana je konsanta int nula = 0
INFO  04:40:26,642 - Deklarisana je konsanta int jedan = 1
INFO  04:40:26,642 - Deklarisana je konsanta int pet = 5
INFO  04:40:26,642 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:40:26,642 - Deklarisan je niz niz
INFO  04:40:26,642 - Deklarisan je niz niz2
INFO  04:40:26,642 - Deklarisana promenljiva a
INFO  04:40:26,642 - Deklarisana promenljiva b
INFO  04:40:26,643 - Deklarisan je niz nizch
INFO  04:40:26,643 - Deklarisana promenljiva c
INFO  04:40:26,643 - Deklarisana promenljiva s1
INFO  04:40:26,643 - Deklarisan je niz nizbool
INFO  04:40:26,643 - Obradjuje se funkcija main na liniji 13
INFO  04:40:26,643 - Deklarisana promenljiva bodovi
INFO  04:40:26,643 - Deklarisana promenljiva bt
INFO  04:40:26,643 - Deklarisana promenljiva s
INFO  04:40:26,644 -  Print count calls = 0
INFO  04:40:26,644 -  Deklarisanih promenljivih ima = 11
INFO  04:40:26,644 - ===================================
INFO  04:40:26,653 - Parsiranje uspesno zavrseno!
INFO  04:40:33,149 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:40:33,232 - #2 program
INFO  04:40:33,232 - #27 MJProgram
INFO  04:40:33,232 - #23 const
INFO  04:40:33,235 - #27 int
INFO  04:40:33,235 - #27 nula
INFO  04:40:33,237 - #12 =
INFO  04:40:33,237 - #26 0
INFO  04:40:33,237 - #5 ;
INFO  04:40:33,237 - #23 const
INFO  04:40:33,238 - #27 int
INFO  04:40:33,238 - #27 jedan
INFO  04:40:33,238 - #12 =
INFO  04:40:33,238 - #26 1
INFO  04:40:33,238 - #5 ;
INFO  04:40:33,238 - #23 const
INFO  04:40:33,238 - #27 int
INFO  04:40:33,238 - #27 pet
INFO  04:40:33,239 - #12 =
INFO  04:40:33,239 - #26 5
INFO  04:40:33,239 - #5 ;
INFO  04:40:33,239 - #23 const
INFO  04:40:33,239 - #27 char
INFO  04:40:33,239 - #27 pet1
INFO  04:40:33,239 - #12 =
INFO  04:40:33,239 - #28 c
INFO  04:40:33,239 - #5 ;
INFO  04:40:33,240 - #27 int
INFO  04:40:33,240 - #27 niz
INFO  04:40:33,240 - #20 [
INFO  04:40:33,240 - #21 ]
INFO  04:40:33,240 - #8 ,
INFO  04:40:33,240 - #27 niz2
INFO  04:40:33,240 - #20 [
INFO  04:40:33,240 - #21 ]
INFO  04:40:33,240 - #8 ,
INFO  04:40:33,241 - #27 a
INFO  04:40:33,241 - #8 ,
INFO  04:40:33,241 - #27 b
INFO  04:40:33,241 - #5 ;
INFO  04:40:33,241 - #27 char
INFO  04:40:33,242 - #27 nizch
INFO  04:40:33,242 - #20 [
INFO  04:40:33,242 - #21 ]
INFO  04:40:33,242 - #8 ,
INFO  04:40:33,242 - #27 c
INFO  04:40:33,242 - #5 ;
INFO  04:40:33,242 - #27 bool
INFO  04:40:33,242 - #27 s1
INFO  04:40:33,242 - #5 ;
INFO  04:40:33,243 - #27 bool
INFO  04:40:33,243 - #27 nizbool
INFO  04:40:33,243 - #20 [
INFO  04:40:33,243 - #21 ]
INFO  04:40:33,243 - #5 ;
INFO  04:40:33,243 - #3 {
INFO  04:40:33,243 - #13 void
INFO  04:40:33,245 - #27 main
INFO  04:40:33,245 - #6 (
INFO  04:40:33,245 - #7 )
INFO  04:40:33,246 - #27 int
INFO  04:40:33,246 - #27 bodovi
INFO  04:40:33,246 - #5 ;
INFO  04:40:33,246 - #27 bool
INFO  04:40:33,246 - #27 bt
INFO  04:40:33,246 - #5 ;
INFO  04:40:33,246 - #27 int
INFO  04:40:33,246 - #27 s
INFO  04:40:33,247 - #5 ;
INFO  04:40:33,247 - #3 {
INFO  04:40:33,247 - #27 a
INFO  04:40:33,248 - #12 =
INFO  04:40:33,248 - #26 5
INFO  04:40:33,249 - #11 +
INFO  04:40:33,249 - #26 7
INFO  04:40:33,251 - #5 ;
INFO  04:40:33,251 - #4 }
INFO  04:40:33,252 - #4 }
INFO  04:40:33,266 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                FactorNUMBER(
                 7
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:40:33,268 - ===================================
INFO  04:40:33,290 - Deklarisana je konsanta int nula = 0
INFO  04:40:33,290 - Deklarisana je konsanta int jedan = 1
INFO  04:40:33,290 - Deklarisana je konsanta int pet = 5
INFO  04:40:33,290 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:40:33,291 - Deklarisan je niz niz
INFO  04:40:33,291 - Deklarisan je niz niz2
INFO  04:40:33,291 - Deklarisana promenljiva a
INFO  04:40:33,291 - Deklarisana promenljiva b
INFO  04:40:33,291 - Deklarisan je niz nizch
INFO  04:40:33,291 - Deklarisana promenljiva c
INFO  04:40:33,291 - Deklarisana promenljiva s1
INFO  04:40:33,292 - Deklarisan je niz nizbool
INFO  04:40:33,292 - Obradjuje se funkcija main na liniji 13
INFO  04:40:33,292 - Deklarisana promenljiva bodovi
INFO  04:40:33,293 - Deklarisana promenljiva bt
INFO  04:40:33,293 - Deklarisana promenljiva s
INFO  04:40:33,293 -  Print count calls = 0
INFO  04:40:33,293 -  Deklarisanih promenljivih ima = 11
INFO  04:40:33,293 - ===================================
INFO  04:41:35,073 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:41:35,151 - #2 program
INFO  04:41:35,151 - #27 MJProgram
INFO  04:41:35,151 - #23 const
INFO  04:41:35,154 - #27 int
INFO  04:41:35,154 - #27 nula
INFO  04:41:35,155 - #12 =
INFO  04:41:35,156 - #26 0
INFO  04:41:35,156 - #5 ;
INFO  04:41:35,156 - #23 const
INFO  04:41:35,156 - #27 int
INFO  04:41:35,157 - #27 jedan
INFO  04:41:35,157 - #12 =
INFO  04:41:35,157 - #26 1
INFO  04:41:35,157 - #5 ;
INFO  04:41:35,157 - #23 const
INFO  04:41:35,157 - #27 int
INFO  04:41:35,157 - #27 pet
INFO  04:41:35,158 - #12 =
INFO  04:41:35,158 - #26 5
INFO  04:41:35,158 - #5 ;
INFO  04:41:35,158 - #23 const
INFO  04:41:35,158 - #27 char
INFO  04:41:35,158 - #27 pet1
INFO  04:41:35,158 - #12 =
INFO  04:41:35,158 - #28 c
INFO  04:41:35,158 - #5 ;
INFO  04:41:35,159 - #27 int
INFO  04:41:35,159 - #27 niz
INFO  04:41:35,159 - #20 [
INFO  04:41:35,159 - #21 ]
INFO  04:41:35,159 - #8 ,
INFO  04:41:35,159 - #27 niz2
INFO  04:41:35,159 - #20 [
INFO  04:41:35,159 - #21 ]
INFO  04:41:35,159 - #8 ,
INFO  04:41:35,159 - #27 a
INFO  04:41:35,160 - #8 ,
INFO  04:41:35,160 - #27 b
INFO  04:41:35,160 - #5 ;
INFO  04:41:35,160 - #27 char
INFO  04:41:35,161 - #27 nizch
INFO  04:41:35,161 - #20 [
INFO  04:41:35,161 - #21 ]
INFO  04:41:35,161 - #8 ,
INFO  04:41:35,161 - #27 c
INFO  04:41:35,161 - #5 ;
INFO  04:41:35,161 - #27 bool
INFO  04:41:35,161 - #27 s1
INFO  04:41:35,161 - #5 ;
INFO  04:41:35,161 - #27 bool
INFO  04:41:35,162 - #27 nizbool
INFO  04:41:35,162 - #20 [
INFO  04:41:35,162 - #21 ]
INFO  04:41:35,162 - #5 ;
INFO  04:41:35,162 - #3 {
INFO  04:41:35,162 - #13 void
INFO  04:41:35,163 - #27 main
INFO  04:41:35,164 - #6 (
INFO  04:41:35,164 - #7 )
INFO  04:41:35,164 - #27 int
INFO  04:41:35,164 - #27 bodovi
INFO  04:41:35,164 - #5 ;
INFO  04:41:35,164 - #27 bool
INFO  04:41:35,165 - #27 bt
INFO  04:41:35,165 - #5 ;
INFO  04:41:35,165 - #27 int
INFO  04:41:35,165 - #27 s
INFO  04:41:35,165 - #5 ;
INFO  04:41:35,165 - #3 {
INFO  04:41:35,165 - #27 a
INFO  04:41:35,167 - #12 =
INFO  04:41:35,167 - #26 5
INFO  04:41:35,167 - #11 +
INFO  04:41:35,167 - #26 8
INFO  04:41:35,170 - #5 ;
INFO  04:41:35,170 - #4 }
INFO  04:41:35,170 - #4 }
INFO  04:41:35,185 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                FactorNUMBER(
                 8
                ) [FactorNUMBER]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:41:35,185 - ===================================
INFO  04:41:35,206 - Deklarisana je konsanta int nula = 0
INFO  04:41:35,207 - Deklarisana je konsanta int jedan = 1
INFO  04:41:35,207 - Deklarisana je konsanta int pet = 5
INFO  04:41:35,207 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:41:35,207 - Deklarisan je niz niz
INFO  04:41:35,208 - Deklarisan je niz niz2
INFO  04:41:35,208 - Deklarisana promenljiva a
INFO  04:41:35,208 - Deklarisana promenljiva b
INFO  04:41:35,208 - Deklarisan je niz nizch
INFO  04:41:35,208 - Deklarisana promenljiva c
INFO  04:41:35,208 - Deklarisana promenljiva s1
INFO  04:41:35,208 - Deklarisan je niz nizbool
INFO  04:41:35,208 - Obradjuje se funkcija main na liniji 13
INFO  04:41:35,209 - Deklarisana promenljiva bodovi
INFO  04:41:35,209 - Deklarisana promenljiva bt
INFO  04:41:35,209 - Deklarisana promenljiva s
INFO  04:41:35,209 -  Print count calls = 0
INFO  04:41:35,209 -  Deklarisanih promenljivih ima = 11
INFO  04:41:35,209 - ===================================
INFO  04:43:02,931 - Parsiranje uspesno zavrseno!
INFO  04:46:39,996 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:46:40,059 - #2 program
INFO  04:46:40,059 - #27 MJProgram
INFO  04:46:40,059 - #23 const
INFO  04:46:40,062 - #27 int
INFO  04:46:40,062 - #27 nula
INFO  04:46:40,063 - #12 =
INFO  04:46:40,063 - #26 0
INFO  04:46:40,063 - #5 ;
INFO  04:46:40,063 - #23 const
INFO  04:46:40,064 - #27 int
INFO  04:46:40,064 - #27 jedan
INFO  04:46:40,064 - #12 =
INFO  04:46:40,064 - #26 1
INFO  04:46:40,064 - #5 ;
INFO  04:46:40,064 - #23 const
INFO  04:46:40,065 - #27 int
INFO  04:46:40,065 - #27 pet
INFO  04:46:40,065 - #12 =
INFO  04:46:40,065 - #26 5
INFO  04:46:40,065 - #5 ;
INFO  04:46:40,065 - #23 const
INFO  04:46:40,065 - #27 char
INFO  04:46:40,065 - #27 pet1
INFO  04:46:40,065 - #12 =
INFO  04:46:40,066 - #28 c
INFO  04:46:40,066 - #5 ;
INFO  04:46:40,066 - #27 int
INFO  04:46:40,066 - #27 niz
INFO  04:46:40,066 - #20 [
INFO  04:46:40,066 - #21 ]
INFO  04:46:40,066 - #8 ,
INFO  04:46:40,067 - #27 niz2
INFO  04:46:40,067 - #20 [
INFO  04:46:40,067 - #21 ]
INFO  04:46:40,067 - #8 ,
INFO  04:46:40,067 - #27 a
INFO  04:46:40,067 - #8 ,
INFO  04:46:40,067 - #27 b
INFO  04:46:40,068 - #5 ;
INFO  04:46:40,068 - #27 char
INFO  04:46:40,068 - #27 nizch
INFO  04:46:40,068 - #20 [
INFO  04:46:40,068 - #21 ]
INFO  04:46:40,068 - #8 ,
INFO  04:46:40,069 - #27 c
INFO  04:46:40,069 - #5 ;
INFO  04:46:40,069 - #27 bool
INFO  04:46:40,069 - #27 s1
INFO  04:46:40,069 - #5 ;
INFO  04:46:40,069 - #27 bool
INFO  04:46:40,069 - #27 nizbool
INFO  04:46:40,069 - #20 [
INFO  04:46:40,070 - #21 ]
INFO  04:46:40,070 - #5 ;
INFO  04:46:40,070 - #3 {
INFO  04:46:40,070 - #13 void
INFO  04:46:40,071 - #27 main
INFO  04:46:40,072 - #6 (
INFO  04:46:40,072 - #7 )
INFO  04:46:40,072 - #27 int
INFO  04:46:40,072 - #27 bodovi
INFO  04:46:40,072 - #5 ;
INFO  04:46:40,072 - #27 bool
INFO  04:46:40,073 - #27 bt
INFO  04:46:40,073 - #5 ;
INFO  04:46:40,073 - #27 int
INFO  04:46:40,073 - #27 s
INFO  04:46:40,073 - #5 ;
INFO  04:46:40,073 - #3 {
INFO  04:46:40,073 - #27 a
INFO  04:46:40,075 - #12 =
INFO  04:46:40,075 - #26 5
INFO  04:46:40,075 - #11 +
INFO  04:46:40,075 - #27 nula
INFO  04:46:40,077 - #5 ;
INFO  04:46:40,078 - #4 }
INFO  04:46:40,078 - #4 }
INFO  04:46:40,089 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                Var(
                  DesignatorIDENT(
                   nula
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:46:40,090 - ===================================
INFO  04:46:40,094 - Deklarisana je konsanta int nula = 0
INFO  04:46:40,094 - Deklarisana je konsanta int jedan = 1
INFO  04:46:40,094 - Deklarisana je konsanta int pet = 5
INFO  04:46:40,094 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:46:40,094 - Deklarisan je niz niz
INFO  04:46:40,095 - Deklarisan je niz niz2
INFO  04:46:40,095 - Deklarisana promenljiva a
INFO  04:46:40,095 - Deklarisana promenljiva b
INFO  04:46:40,095 - Deklarisan je niz nizch
INFO  04:46:40,095 - Deklarisana promenljiva c
INFO  04:46:40,095 - Deklarisana promenljiva s1
INFO  04:46:40,095 - Deklarisan je niz nizbool
INFO  04:46:40,096 - Obradjuje se funkcija main na liniji 13
INFO  04:46:40,096 - Deklarisana promenljiva bodovi
INFO  04:46:40,096 - Deklarisana promenljiva bt
INFO  04:46:40,096 - Deklarisana promenljiva s
INFO  04:46:40,097 -  Print count calls = 0
INFO  04:46:40,097 -  Deklarisanih promenljivih ima = 11
INFO  04:46:40,098 - ===================================
INFO  04:46:40,110 - Parsiranje uspesno zavrseno!
INFO  04:47:55,813 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:47:55,908 - #2 program
INFO  04:47:55,909 - #27 MJProgram
INFO  04:47:55,909 - #23 const
INFO  04:47:55,912 - #27 int
INFO  04:47:55,913 - #27 nula
INFO  04:47:55,915 - #12 =
INFO  04:47:55,915 - #26 0
INFO  04:47:55,915 - #5 ;
INFO  04:47:55,916 - #23 const
INFO  04:47:55,916 - #27 int
INFO  04:47:55,917 - #27 jedan
INFO  04:47:55,917 - #12 =
INFO  04:47:55,917 - #26 1
INFO  04:47:55,917 - #5 ;
INFO  04:47:55,917 - #23 const
INFO  04:47:55,917 - #27 int
INFO  04:47:55,917 - #27 pet
INFO  04:47:55,917 - #12 =
INFO  04:47:55,918 - #26 5
INFO  04:47:55,918 - #5 ;
INFO  04:47:55,918 - #23 const
INFO  04:47:55,918 - #27 char
INFO  04:47:55,918 - #27 pet1
INFO  04:47:55,918 - #12 =
INFO  04:47:55,918 - #28 c
INFO  04:47:55,918 - #5 ;
INFO  04:47:55,919 - #27 int
INFO  04:47:55,919 - #27 niz
INFO  04:47:55,919 - #20 [
INFO  04:47:55,919 - #21 ]
INFO  04:47:55,919 - #8 ,
INFO  04:47:55,919 - #27 niz2
INFO  04:47:55,919 - #20 [
INFO  04:47:55,920 - #21 ]
INFO  04:47:55,920 - #8 ,
INFO  04:47:55,920 - #27 a
INFO  04:47:55,920 - #8 ,
INFO  04:47:55,920 - #27 b
INFO  04:47:55,920 - #5 ;
INFO  04:47:55,921 - #27 char
INFO  04:47:55,921 - #27 nizch
INFO  04:47:55,921 - #20 [
INFO  04:47:55,921 - #21 ]
INFO  04:47:55,922 - #8 ,
INFO  04:47:55,922 - #27 c
INFO  04:47:55,922 - #5 ;
INFO  04:47:55,922 - #27 bool
INFO  04:47:55,922 - #27 s1
INFO  04:47:55,922 - #5 ;
INFO  04:47:55,922 - #27 bool
INFO  04:47:55,923 - #27 nizbool
INFO  04:47:55,923 - #20 [
INFO  04:47:55,923 - #21 ]
INFO  04:47:55,923 - #5 ;
INFO  04:47:55,923 - #3 {
INFO  04:47:55,923 - #13 void
INFO  04:47:55,925 - #27 main
INFO  04:47:55,925 - #6 (
INFO  04:47:55,926 - #7 )
INFO  04:47:55,926 - #27 int
INFO  04:47:55,926 - #27 bodovi
INFO  04:47:55,927 - #5 ;
INFO  04:47:55,927 - #27 bool
INFO  04:47:55,927 - #27 bt
INFO  04:47:55,927 - #5 ;
INFO  04:47:55,928 - #27 int
INFO  04:47:55,928 - #27 s
INFO  04:47:55,928 - #5 ;
INFO  04:47:55,928 - #3 {
INFO  04:47:55,928 - #27 a
INFO  04:47:55,929 - #12 =
INFO  04:47:55,930 - #26 5
INFO  04:47:55,930 - #11 +
INFO  04:47:55,931 - #27 nula
INFO  04:47:55,933 - #5 ;
INFO  04:47:55,933 - #4 }
INFO  04:47:55,934 - #4 }
INFO  04:47:55,953 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                Var(
                  DesignatorIDENT(
                   nula
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:47:55,954 - ===================================
INFO  04:47:55,975 - Deklarisana je konsanta int nula = 0
INFO  04:47:55,975 - Deklarisana je konsanta int jedan = 1
INFO  04:47:55,976 - Deklarisana je konsanta int pet = 5
INFO  04:47:55,976 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:47:55,977 - Deklarisan je niz niz
INFO  04:47:55,977 - Deklarisan je niz niz2
INFO  04:47:55,977 - Deklarisana promenljiva a
INFO  04:47:55,977 - Deklarisana promenljiva b
INFO  04:47:55,977 - Deklarisan je niz nizch
INFO  04:47:55,977 - Deklarisana promenljiva c
INFO  04:47:55,977 - Deklarisana promenljiva s1
INFO  04:47:55,977 - Deklarisan je niz nizbool
INFO  04:47:55,978 - Obradjuje se funkcija main na liniji 13
INFO  04:47:55,978 - Deklarisana promenljiva bodovi
INFO  04:47:55,978 - Deklarisana promenljiva bt
INFO  04:47:55,978 - Deklarisana promenljiva s
INFO  04:47:55,979 -  Print count calls = 0
INFO  04:47:55,979 -  Deklarisanih promenljivih ima = 11
INFO  04:47:55,979 - ===================================
INFO  04:49:13,495 - Parsiranje uspesno zavrseno!
INFO  04:49:35,405 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:49:35,484 - #2 program
INFO  04:49:35,484 - #27 MJProgram
INFO  04:49:35,484 - #23 const
INFO  04:49:35,487 - #27 int
INFO  04:49:35,487 - #27 nula
INFO  04:49:35,488 - #12 =
INFO  04:49:35,489 - #26 0
INFO  04:49:35,489 - #5 ;
INFO  04:49:35,489 - #23 const
INFO  04:49:35,489 - #27 int
INFO  04:49:35,490 - #27 jedan
INFO  04:49:35,490 - #12 =
INFO  04:49:35,490 - #26 1
INFO  04:49:35,490 - #5 ;
INFO  04:49:35,490 - #23 const
INFO  04:49:35,490 - #27 int
INFO  04:49:35,490 - #27 pet
INFO  04:49:35,490 - #12 =
INFO  04:49:35,490 - #26 5
INFO  04:49:35,490 - #5 ;
INFO  04:49:35,490 - #23 const
INFO  04:49:35,491 - #27 char
INFO  04:49:35,491 - #27 pet1
INFO  04:49:35,491 - #12 =
INFO  04:49:35,491 - #28 c
INFO  04:49:35,491 - #5 ;
INFO  04:49:35,491 - #27 int
INFO  04:49:35,491 - #27 niz
INFO  04:49:35,491 - #20 [
INFO  04:49:35,492 - #21 ]
INFO  04:49:35,492 - #8 ,
INFO  04:49:35,492 - #27 niz2
INFO  04:49:35,492 - #20 [
INFO  04:49:35,492 - #21 ]
INFO  04:49:35,492 - #8 ,
INFO  04:49:35,492 - #27 a
INFO  04:49:35,492 - #8 ,
INFO  04:49:35,492 - #27 b
INFO  04:49:35,493 - #5 ;
INFO  04:49:35,493 - #27 char
INFO  04:49:35,493 - #27 nizch
INFO  04:49:35,493 - #20 [
INFO  04:49:35,494 - #21 ]
INFO  04:49:35,494 - #8 ,
INFO  04:49:35,494 - #27 c
INFO  04:49:35,494 - #5 ;
INFO  04:49:35,494 - #27 bool
INFO  04:49:35,494 - #27 s1
INFO  04:49:35,494 - #5 ;
INFO  04:49:35,495 - #27 bool
INFO  04:49:35,495 - #27 nizbool
INFO  04:49:35,495 - #20 [
INFO  04:49:35,495 - #21 ]
INFO  04:49:35,495 - #5 ;
INFO  04:49:35,495 - #3 {
INFO  04:49:35,495 - #13 void
INFO  04:49:35,497 - #27 main
INFO  04:49:35,497 - #6 (
INFO  04:49:35,498 - #7 )
INFO  04:49:35,498 - #27 int
INFO  04:49:35,498 - #27 bodovi
INFO  04:49:35,498 - #5 ;
INFO  04:49:35,498 - #27 bool
INFO  04:49:35,498 - #27 bt
INFO  04:49:35,499 - #5 ;
INFO  04:49:35,499 - #27 int
INFO  04:49:35,499 - #27 s
INFO  04:49:35,499 - #5 ;
INFO  04:49:35,499 - #3 {
INFO  04:49:35,499 - #27 a
INFO  04:49:35,500 - #12 =
INFO  04:49:35,501 - #26 5
INFO  04:49:35,501 - #11 +
INFO  04:49:35,502 - #27 nula
INFO  04:49:35,504 - #5 ;
INFO  04:49:35,504 - #4 }
INFO  04:49:35,505 - #4 }
INFO  04:49:35,522 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                Var(
                  DesignatorIDENT(
                   nula
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:49:35,523 - ===================================
INFO  04:49:35,546 - Deklarisana je konsanta int nula = 0
INFO  04:49:35,546 - Deklarisana je konsanta int jedan = 1
INFO  04:49:35,546 - Deklarisana je konsanta int pet = 5
INFO  04:49:35,546 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:49:35,547 - Deklarisan je niz niz
INFO  04:49:35,547 - Deklarisan je niz niz2
INFO  04:49:35,547 - Deklarisana promenljiva a
INFO  04:49:35,547 - Deklarisana promenljiva b
INFO  04:49:35,547 - Deklarisan je niz nizch
INFO  04:49:35,547 - Deklarisana promenljiva c
INFO  04:49:35,547 - Deklarisana promenljiva s1
INFO  04:49:35,547 - Deklarisan je niz nizbool
INFO  04:49:35,547 - Obradjuje se funkcija main na liniji 13
INFO  04:49:35,548 - Deklarisana promenljiva bodovi
INFO  04:49:35,548 - Deklarisana promenljiva bt
INFO  04:49:35,548 - Deklarisana promenljiva s
INFO  04:49:35,548 -  Print count calls = 0
INFO  04:49:35,548 -  Deklarisanih promenljivih ima = 11
INFO  04:49:35,548 - ===================================
INFO  04:51:02,529 - Parsiranje uspesno zavrseno!
INFO  04:59:36,467 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  04:59:36,537 - #2 program
INFO  04:59:36,537 - #27 MJProgram
INFO  04:59:36,537 - #23 const
INFO  04:59:36,539 - #27 int
INFO  04:59:36,539 - #27 nula
INFO  04:59:36,540 - #12 =
INFO  04:59:36,540 - #26 0
INFO  04:59:36,541 - #5 ;
INFO  04:59:36,541 - #23 const
INFO  04:59:36,541 - #27 int
INFO  04:59:36,541 - #27 jedan
INFO  04:59:36,541 - #12 =
INFO  04:59:36,542 - #26 1
INFO  04:59:36,542 - #5 ;
INFO  04:59:36,542 - #23 const
INFO  04:59:36,542 - #27 int
INFO  04:59:36,542 - #27 pet
INFO  04:59:36,542 - #12 =
INFO  04:59:36,542 - #26 5
INFO  04:59:36,542 - #5 ;
INFO  04:59:36,542 - #23 const
INFO  04:59:36,542 - #27 char
INFO  04:59:36,543 - #27 pet1
INFO  04:59:36,543 - #12 =
INFO  04:59:36,543 - #28 c
INFO  04:59:36,543 - #5 ;
INFO  04:59:36,543 - #27 int
INFO  04:59:36,543 - #27 niz
INFO  04:59:36,543 - #20 [
INFO  04:59:36,543 - #21 ]
INFO  04:59:36,544 - #8 ,
INFO  04:59:36,544 - #27 niz2
INFO  04:59:36,544 - #20 [
INFO  04:59:36,544 - #21 ]
INFO  04:59:36,544 - #8 ,
INFO  04:59:36,544 - #27 a
INFO  04:59:36,544 - #8 ,
INFO  04:59:36,544 - #27 b
INFO  04:59:36,545 - #5 ;
INFO  04:59:36,545 - #27 char
INFO  04:59:36,545 - #27 nizch
INFO  04:59:36,545 - #20 [
INFO  04:59:36,545 - #21 ]
INFO  04:59:36,545 - #8 ,
INFO  04:59:36,546 - #27 c
INFO  04:59:36,546 - #5 ;
INFO  04:59:36,546 - #27 bool
INFO  04:59:36,546 - #27 s1
INFO  04:59:36,546 - #5 ;
INFO  04:59:36,546 - #27 bool
INFO  04:59:36,546 - #27 nizbool
INFO  04:59:36,546 - #20 [
INFO  04:59:36,546 - #21 ]
INFO  04:59:36,546 - #5 ;
INFO  04:59:36,546 - #3 {
INFO  04:59:36,547 - #13 void
INFO  04:59:36,548 - #27 main
INFO  04:59:36,548 - #6 (
INFO  04:59:36,549 - #7 )
INFO  04:59:36,549 - #27 int
INFO  04:59:36,549 - #27 bodovi
INFO  04:59:36,549 - #5 ;
INFO  04:59:36,549 - #27 bool
INFO  04:59:36,549 - #27 bt
INFO  04:59:36,550 - #5 ;
INFO  04:59:36,550 - #27 int
INFO  04:59:36,550 - #27 s
INFO  04:59:36,550 - #5 ;
INFO  04:59:36,550 - #3 {
INFO  04:59:36,550 - #27 a
INFO  04:59:36,552 - #12 =
INFO  04:59:36,552 - #26 5
INFO  04:59:36,552 - #11 +
INFO  04:59:36,552 - #27 nula
INFO  04:59:36,554 - #5 ;
INFO  04:59:36,554 - #4 }
INFO  04:59:36,555 - #4 }
INFO  04:59:36,566 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        NoStmt(
        ) [NoStmt]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             a
            ) [DesignatorIDENT]
            AddExpr(
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   5
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
              AddopPlus(
              ) [AddopPlus]
              TermFactor(
                Var(
                  DesignatorIDENT(
                   nula
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [AddExpr]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:59:36,567 - ===================================
INFO  04:59:36,571 - Deklarisana je konsanta int nula = 0
INFO  04:59:36,571 - Deklarisana je konsanta int jedan = 1
INFO  04:59:36,571 - Deklarisana je konsanta int pet = 5
INFO  04:59:36,572 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  04:59:36,572 - Deklarisan je niz niz
INFO  04:59:36,572 - Deklarisan je niz niz2
INFO  04:59:36,572 - Deklarisana promenljiva a
INFO  04:59:36,572 - Deklarisana promenljiva b
INFO  04:59:36,572 - Deklarisan je niz nizch
INFO  04:59:36,572 - Deklarisana promenljiva c
INFO  04:59:36,572 - Deklarisana promenljiva s1
INFO  04:59:36,572 - Deklarisan je niz nizbool
INFO  04:59:36,573 - Obradjuje se funkcija main na liniji 13
INFO  04:59:36,573 - Deklarisana promenljiva bodovi
INFO  04:59:36,573 - Deklarisana promenljiva bt
INFO  04:59:36,573 - Deklarisana promenljiva s
INFO  04:59:36,573 -  Print count calls = 0
INFO  04:59:36,573 -  Deklarisanih promenljivih ima = 11
INFO  04:59:36,573 - ===================================
INFO  04:59:36,582 - Parsiranje uspesno zavrseno!
INFO  05:00:32,088 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:00:32,152 - #2 program
INFO  05:00:32,152 - #27 MJProgram
INFO  05:00:32,152 - #23 const
INFO  05:00:32,154 - #27 int
INFO  05:00:32,155 - #27 nula
INFO  05:00:32,155 - #12 =
INFO  05:00:32,156 - #26 0
INFO  05:00:32,156 - #5 ;
INFO  05:00:32,156 - #23 const
INFO  05:00:32,157 - #27 int
INFO  05:00:32,157 - #27 jedan
INFO  05:00:32,157 - #12 =
INFO  05:00:32,157 - #26 1
INFO  05:00:32,157 - #5 ;
INFO  05:00:32,157 - #23 const
INFO  05:00:32,157 - #27 int
INFO  05:00:32,157 - #27 pet
INFO  05:00:32,157 - #12 =
INFO  05:00:32,158 - #26 5
INFO  05:00:32,158 - #5 ;
INFO  05:00:32,158 - #23 const
INFO  05:00:32,158 - #27 char
INFO  05:00:32,158 - #27 pet1
INFO  05:00:32,158 - #12 =
INFO  05:00:32,159 - #28 c
INFO  05:00:32,159 - #5 ;
INFO  05:00:32,159 - #27 int
INFO  05:00:32,159 - #27 niz
INFO  05:00:32,159 - #20 [
INFO  05:00:32,159 - #21 ]
INFO  05:00:32,160 - #8 ,
INFO  05:00:32,160 - #27 niz2
INFO  05:00:32,160 - #20 [
INFO  05:00:32,160 - #21 ]
INFO  05:00:32,160 - #8 ,
INFO  05:00:32,160 - #27 a
INFO  05:00:32,160 - #8 ,
INFO  05:00:32,161 - #27 b
INFO  05:00:32,161 - #5 ;
INFO  05:00:32,161 - #27 char
INFO  05:00:32,162 - #27 nizch
INFO  05:00:32,162 - #20 [
INFO  05:00:32,162 - #21 ]
INFO  05:00:32,162 - #8 ,
INFO  05:00:32,162 - #27 c
INFO  05:00:32,162 - #5 ;
INFO  05:00:32,162 - #27 bool
INFO  05:00:32,163 - #27 s1
INFO  05:00:32,163 - #5 ;
INFO  05:00:32,163 - #27 bool
INFO  05:00:32,163 - #27 nizbool
INFO  05:00:32,163 - #20 [
INFO  05:00:32,164 - #21 ]
INFO  05:00:32,164 - #5 ;
INFO  05:00:32,164 - #3 {
INFO  05:00:32,164 - #13 void
INFO  05:00:32,166 - #27 main
INFO  05:00:32,166 - #6 (
INFO  05:00:32,166 - #7 )
INFO  05:00:32,166 - #27 int
INFO  05:00:32,167 - #27 bodovi
INFO  05:00:32,167 - #5 ;
INFO  05:00:32,167 - #27 bool
INFO  05:00:32,167 - #27 bt
INFO  05:00:32,167 - #5 ;
INFO  05:00:32,167 - #27 int
INFO  05:00:32,167 - #27 s
INFO  05:00:32,168 - #5 ;
INFO  05:00:32,168 - #3 {
INFO  05:00:32,168 - #27 a
INFO  05:00:32,169 - #12 =
INFO  05:00:32,169 - #26 5
INFO  05:00:32,169 - #11 +
INFO  05:00:32,170 - #27 nula
INFO  05:00:32,172 - #5 ;
INFO  05:00:32,172 - #9 print
INFO  05:00:32,172 - #6 (
INFO  05:00:32,172 - #27 a
INFO  05:00:32,172 - #7 )
INFO  05:00:32,174 - #5 ;
INFO  05:00:32,174 - #4 }
INFO  05:00:32,174 - #4 }
INFO  05:00:32,185 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               a
              ) [DesignatorIDENT]
              AddExpr(
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     5
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
                AddopPlus(
                ) [AddopPlus]
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     nula
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   a
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:00:32,186 - ===================================
INFO  05:00:32,190 - Deklarisana je konsanta int nula = 0
INFO  05:00:32,191 - Deklarisana je konsanta int jedan = 1
INFO  05:00:32,191 - Deklarisana je konsanta int pet = 5
INFO  05:00:32,191 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:00:32,191 - Deklarisan je niz niz
INFO  05:00:32,191 - Deklarisan je niz niz2
INFO  05:00:32,191 - Deklarisana promenljiva a
INFO  05:00:32,191 - Deklarisana promenljiva b
INFO  05:00:32,192 - Deklarisan je niz nizch
INFO  05:00:32,192 - Deklarisana promenljiva c
INFO  05:00:32,192 - Deklarisana promenljiva s1
INFO  05:00:32,192 - Deklarisan je niz nizbool
INFO  05:00:32,192 - Obradjuje se funkcija main na liniji 13
INFO  05:00:32,192 - Deklarisana promenljiva bodovi
INFO  05:00:32,193 - Deklarisana promenljiva bt
INFO  05:00:32,193 - Deklarisana promenljiva s
INFO  05:00:32,195 -  Print count calls = 1
INFO  05:00:32,195 -  Deklarisanih promenljivih ima = 11
INFO  05:00:32,196 - ===================================
INFO  05:00:32,205 - Parsiranje uspesno zavrseno!
INFO  05:07:45,473 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:07:45,538 - #2 program
INFO  05:07:45,538 - #27 MJProgram
INFO  05:07:45,538 - #23 const
INFO  05:07:45,540 - #27 int
INFO  05:07:45,540 - #27 nula
INFO  05:07:45,541 - #12 =
INFO  05:07:45,541 - #26 0
INFO  05:07:45,541 - #5 ;
INFO  05:07:45,542 - #23 const
INFO  05:07:45,542 - #27 int
INFO  05:07:45,542 - #27 jedan
INFO  05:07:45,542 - #12 =
INFO  05:07:45,542 - #26 1
INFO  05:07:45,542 - #5 ;
INFO  05:07:45,543 - #23 const
INFO  05:07:45,543 - #27 int
INFO  05:07:45,543 - #27 pet
INFO  05:07:45,543 - #12 =
INFO  05:07:45,543 - #26 5
INFO  05:07:45,543 - #5 ;
INFO  05:07:45,543 - #23 const
INFO  05:07:45,543 - #27 char
INFO  05:07:45,543 - #27 pet1
INFO  05:07:45,544 - #12 =
INFO  05:07:45,544 - #28 c
INFO  05:07:45,544 - #5 ;
INFO  05:07:45,544 - #27 int
INFO  05:07:45,544 - #27 niz
INFO  05:07:45,544 - #20 [
INFO  05:07:45,545 - #21 ]
INFO  05:07:45,545 - #8 ,
INFO  05:07:45,545 - #27 niz2
INFO  05:07:45,545 - #20 [
INFO  05:07:45,545 - #21 ]
INFO  05:07:45,545 - #8 ,
INFO  05:07:45,545 - #27 a
INFO  05:07:45,546 - #8 ,
INFO  05:07:45,546 - #27 b
INFO  05:07:45,546 - #5 ;
INFO  05:07:45,546 - #27 char
INFO  05:07:45,547 - #27 nizch
INFO  05:07:45,547 - #20 [
INFO  05:07:45,547 - #21 ]
INFO  05:07:45,547 - #8 ,
INFO  05:07:45,547 - #27 c
INFO  05:07:45,547 - #5 ;
INFO  05:07:45,547 - #27 bool
INFO  05:07:45,547 - #27 s1
INFO  05:07:45,548 - #5 ;
INFO  05:07:45,548 - #27 bool
INFO  05:07:45,548 - #27 nizbool
INFO  05:07:45,548 - #20 [
INFO  05:07:45,548 - #21 ]
INFO  05:07:45,548 - #5 ;
INFO  05:07:45,549 - #3 {
INFO  05:07:45,549 - #13 void
INFO  05:07:45,550 - #27 main
INFO  05:07:45,550 - #6 (
INFO  05:07:45,551 - #7 )
INFO  05:07:45,551 - #27 int
INFO  05:07:45,551 - #27 bodovi
INFO  05:07:45,551 - #5 ;
INFO  05:07:45,551 - #27 bool
INFO  05:07:45,551 - #27 bt
INFO  05:07:45,551 - #5 ;
INFO  05:07:45,552 - #27 int
INFO  05:07:45,552 - #27 s
INFO  05:07:45,552 - #5 ;
INFO  05:07:45,552 - #3 {
INFO  05:07:45,552 - #27 a
INFO  05:07:45,554 - #12 =
INFO  05:07:45,554 - #26 10
INFO  05:07:45,554 - #18 %
INFO  05:07:45,554 - #26 4
INFO  05:07:45,556 - #5 ;
INFO  05:07:45,557 - #9 print
INFO  05:07:45,557 - #6 (
INFO  05:07:45,557 - #27 a
INFO  05:07:45,557 - #7 )
INFO  05:07:45,559 - #5 ;
INFO  05:07:45,559 - #4 }
INFO  05:07:45,559 - #4 }
INFO  05:07:45,571 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               a
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    FactorNUMBER(
                     10
                    ) [FactorNUMBER]
                  ) [TermFactor]
                  MulopMOD(
                  ) [MulopMOD]
                  FactorNUMBER(
                   4
                  ) [FactorNUMBER]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   a
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:07:45,573 - ===================================
INFO  05:07:45,577 - Deklarisana je konsanta int nula = 0
INFO  05:07:45,578 - Deklarisana je konsanta int jedan = 1
INFO  05:07:45,578 - Deklarisana je konsanta int pet = 5
INFO  05:07:45,578 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:07:45,578 - Deklarisan je niz niz
INFO  05:07:45,578 - Deklarisan je niz niz2
INFO  05:07:45,578 - Deklarisana promenljiva a
INFO  05:07:45,578 - Deklarisana promenljiva b
INFO  05:07:45,579 - Deklarisan je niz nizch
INFO  05:07:45,579 - Deklarisana promenljiva c
INFO  05:07:45,579 - Deklarisana promenljiva s1
INFO  05:07:45,579 - Deklarisan je niz nizbool
INFO  05:07:45,579 - Obradjuje se funkcija main na liniji 13
INFO  05:07:45,579 - Deklarisana promenljiva bodovi
INFO  05:07:45,579 - Deklarisana promenljiva bt
INFO  05:07:45,579 - Deklarisana promenljiva s
INFO  05:07:45,582 -  Print count calls = 1
INFO  05:07:45,582 -  Deklarisanih promenljivih ima = 11
INFO  05:07:45,583 - ===================================
INFO  05:07:45,600 - Parsiranje uspesno zavrseno!
INFO  05:17:39,134 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:17:39,201 - #2 program
INFO  05:17:39,202 - #27 MJProgram
INFO  05:17:39,202 - #23 const
INFO  05:17:39,203 - #27 int
INFO  05:17:39,204 - #27 nula
INFO  05:17:39,205 - #12 =
INFO  05:17:39,205 - #26 0
INFO  05:17:39,205 - #5 ;
INFO  05:17:39,205 - #23 const
INFO  05:17:39,206 - #27 int
INFO  05:17:39,206 - #27 jedan
INFO  05:17:39,206 - #12 =
INFO  05:17:39,206 - #26 1
INFO  05:17:39,206 - #5 ;
INFO  05:17:39,206 - #23 const
INFO  05:17:39,206 - #27 int
INFO  05:17:39,206 - #27 pet
INFO  05:17:39,207 - #12 =
INFO  05:17:39,207 - #26 5
INFO  05:17:39,207 - #5 ;
INFO  05:17:39,207 - #23 const
INFO  05:17:39,207 - #27 char
INFO  05:17:39,207 - #27 pet1
INFO  05:17:39,207 - #12 =
INFO  05:17:39,207 - #28 c
INFO  05:17:39,208 - #5 ;
INFO  05:17:39,208 - #27 int
INFO  05:17:39,208 - #27 niz
INFO  05:17:39,208 - #20 [
INFO  05:17:39,208 - #21 ]
INFO  05:17:39,208 - #8 ,
INFO  05:17:39,209 - #27 niz2
INFO  05:17:39,209 - #20 [
INFO  05:17:39,209 - #21 ]
INFO  05:17:39,209 - #8 ,
INFO  05:17:39,209 - #27 a
INFO  05:17:39,209 - #8 ,
INFO  05:17:39,209 - #27 b
INFO  05:17:39,209 - #5 ;
INFO  05:17:39,210 - #27 char
INFO  05:17:39,210 - #27 nizch
INFO  05:17:39,210 - #20 [
INFO  05:17:39,210 - #21 ]
INFO  05:17:39,210 - #8 ,
INFO  05:17:39,211 - #27 c
INFO  05:17:39,211 - #5 ;
INFO  05:17:39,211 - #27 bool
INFO  05:17:39,211 - #27 s1
INFO  05:17:39,211 - #5 ;
INFO  05:17:39,211 - #27 bool
INFO  05:17:39,212 - #27 nizbool
INFO  05:17:39,212 - #20 [
INFO  05:17:39,212 - #21 ]
INFO  05:17:39,212 - #5 ;
INFO  05:17:39,212 - #3 {
INFO  05:17:39,212 - #13 void
INFO  05:17:39,213 - #27 main
INFO  05:17:39,214 - #6 (
INFO  05:17:39,214 - #7 )
INFO  05:17:39,214 - #27 int
INFO  05:17:39,214 - #27 bodovi
INFO  05:17:39,214 - #5 ;
INFO  05:17:39,214 - #27 bool
INFO  05:17:39,215 - #27 bt
INFO  05:17:39,215 - #5 ;
INFO  05:17:39,215 - #27 int
INFO  05:17:39,215 - #27 s
INFO  05:17:39,215 - #5 ;
INFO  05:17:39,215 - #3 {
INFO  05:17:39,215 - #27 bodovi
INFO  05:17:39,217 - #12 =
INFO  05:17:39,217 - #26 0
INFO  05:17:39,217 - #5 ;
INFO  05:17:39,217 - #27 bodovi
INFO  05:17:39,218 - #15 ++
INFO  05:17:39,218 - #5 ;
INFO  05:17:39,218 - #27 bodovi
INFO  05:17:39,218 - #12 =
INFO  05:17:39,218 - #27 bodovi
INFO  05:17:39,218 - #11 +
INFO  05:17:39,219 - #27 jedan
INFO  05:17:39,220 - #5 ;
INFO  05:17:39,221 - #27 bodovi
INFO  05:17:39,221 - #12 =
INFO  05:17:39,221 - #27 bodovi
INFO  05:17:39,221 - #14 *
INFO  05:17:39,221 - #27 pet
INFO  05:17:39,223 - #5 ;
INFO  05:17:39,224 - #27 bodovi
INFO  05:17:39,224 - #16 --
INFO  05:17:39,224 - #5 ;
INFO  05:17:39,224 - #9 print
INFO  05:17:39,224 - #6 (
INFO  05:17:39,224 - #27 bodovi
INFO  05:17:39,224 - #7 )
INFO  05:17:39,226 - #5 ;
INFO  05:17:39,226 - #4 }
INFO  05:17:39,226 - #4 }
INFO  05:17:39,240 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  DesignatorStmt(
                    Assignment(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           0
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  DesignatorINC(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                  ) [DesignatorINC]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                  AddExpr(
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                    AddopPlus(
                    ) [AddopPlus]
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         jedan
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [AddExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                TermExpr(
                  TermMulop(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       pet
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            DesignatorDEC(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
            ) [DesignatorDEC]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:17:39,241 - ===================================
INFO  05:17:39,248 - Deklarisana je konsanta int nula = 0
INFO  05:17:39,248 - Deklarisana je konsanta int jedan = 1
INFO  05:17:39,249 - Deklarisana je konsanta int pet = 5
INFO  05:17:39,249 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:17:39,249 - Deklarisan je niz niz
INFO  05:17:39,249 - Deklarisan je niz niz2
INFO  05:17:39,250 - Deklarisana promenljiva a
INFO  05:17:39,250 - Deklarisana promenljiva b
INFO  05:17:39,250 - Deklarisan je niz nizch
INFO  05:17:39,250 - Deklarisana promenljiva c
INFO  05:17:39,250 - Deklarisana promenljiva s1
INFO  05:17:39,250 - Deklarisan je niz nizbool
INFO  05:17:39,250 - Obradjuje se funkcija main na liniji 13
INFO  05:17:39,251 - Deklarisana promenljiva bodovi
INFO  05:17:39,251 - Deklarisana promenljiva bt
INFO  05:17:39,251 - Deklarisana promenljiva s
INFO  05:17:39,251 -  Print count calls = 1
INFO  05:17:39,252 -  Deklarisanih promenljivih ima = 11
INFO  05:17:39,252 - ===================================
INFO  05:17:39,267 - Parsiranje uspesno zavrseno!
INFO  05:19:17,152 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:19:17,206 - #2 program
INFO  05:19:17,206 - #27 MJProgram
INFO  05:19:17,206 - #23 const
INFO  05:19:17,208 - #27 int
INFO  05:19:17,208 - #27 nula
INFO  05:19:17,209 - #12 =
INFO  05:19:17,209 - #26 0
INFO  05:19:17,209 - #5 ;
INFO  05:19:17,210 - #23 const
INFO  05:19:17,210 - #27 int
INFO  05:19:17,210 - #27 jedan
INFO  05:19:17,210 - #12 =
INFO  05:19:17,211 - #26 1
INFO  05:19:17,211 - #5 ;
INFO  05:19:17,211 - #23 const
INFO  05:19:17,211 - #27 int
INFO  05:19:17,211 - #27 pet
INFO  05:19:17,211 - #12 =
INFO  05:19:17,211 - #26 5
INFO  05:19:17,211 - #5 ;
INFO  05:19:17,211 - #23 const
INFO  05:19:17,211 - #27 char
INFO  05:19:17,212 - #27 pet1
INFO  05:19:17,212 - #12 =
INFO  05:19:17,212 - #28 c
INFO  05:19:17,212 - #5 ;
INFO  05:19:17,212 - #27 int
INFO  05:19:17,212 - #27 niz
INFO  05:19:17,213 - #20 [
INFO  05:19:17,213 - #21 ]
INFO  05:19:17,213 - #8 ,
INFO  05:19:17,213 - #27 niz2
INFO  05:19:17,213 - #20 [
INFO  05:19:17,213 - #21 ]
INFO  05:19:17,213 - #8 ,
INFO  05:19:17,213 - #27 a
INFO  05:19:17,214 - #8 ,
INFO  05:19:17,214 - #27 b
INFO  05:19:17,214 - #5 ;
INFO  05:19:17,214 - #27 char
INFO  05:19:17,215 - #27 nizch
INFO  05:19:17,215 - #20 [
INFO  05:19:17,215 - #21 ]
INFO  05:19:17,215 - #8 ,
INFO  05:19:17,215 - #27 c
INFO  05:19:17,215 - #5 ;
INFO  05:19:17,216 - #27 bool
INFO  05:19:17,216 - #27 s1
INFO  05:19:17,216 - #5 ;
INFO  05:19:17,216 - #27 bool
INFO  05:19:17,216 - #27 nizbool
INFO  05:19:17,216 - #20 [
INFO  05:19:17,216 - #21 ]
INFO  05:19:17,217 - #5 ;
INFO  05:19:17,217 - #3 {
INFO  05:19:17,217 - #13 void
INFO  05:19:17,218 - #27 main
INFO  05:19:17,219 - #6 (
INFO  05:19:17,219 - #7 )
INFO  05:19:17,219 - #27 int
INFO  05:19:17,219 - #27 bodovi
INFO  05:19:17,219 - #5 ;
INFO  05:19:17,219 - #27 bool
INFO  05:19:17,220 - #27 bt
INFO  05:19:17,220 - #5 ;
INFO  05:19:17,220 - #27 int
INFO  05:19:17,220 - #27 s
INFO  05:19:17,220 - #5 ;
INFO  05:19:17,220 - #3 {
INFO  05:19:17,221 - #27 bodovi
INFO  05:19:17,222 - #12 =
INFO  05:19:17,222 - #26 0
INFO  05:19:17,222 - #5 ;
INFO  05:19:17,223 - #27 bodovi
INFO  05:19:17,223 - #15 ++
INFO  05:19:17,223 - #5 ;
INFO  05:19:17,223 - #27 bodovi
INFO  05:19:17,223 - #12 =
INFO  05:19:17,223 - #27 bodovi
INFO  05:19:17,223 - #11 +
INFO  05:19:17,224 - #27 jedan
INFO  05:19:17,226 - #5 ;
INFO  05:19:17,226 - #27 bodovi
INFO  05:19:17,226 - #12 =
INFO  05:19:17,226 - #27 bodovi
INFO  05:19:17,226 - #14 *
INFO  05:19:17,226 - #27 pet
INFO  05:19:17,228 - #5 ;
INFO  05:19:17,228 - #27 bodovi
INFO  05:19:17,228 - #16 --
INFO  05:19:17,229 - #5 ;
INFO  05:19:17,229 - #27 bodovi
INFO  05:19:17,229 - #15 ++
INFO  05:19:17,229 - #5 ;
INFO  05:19:17,229 - #9 print
INFO  05:19:17,229 - #6 (
INFO  05:19:17,229 - #27 bodovi
INFO  05:19:17,229 - #7 )
INFO  05:19:17,231 - #5 ;
INFO  05:19:17,231 - #4 }
INFO  05:19:17,233 - #4 }
INFO  05:19:17,243 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    DesignatorStmt(
                      Assignment(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             0
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [Assignment]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    DesignatorINC(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [DesignatorINC]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    AddExpr(
                      TermExpr(
                        TermFactor(
                          Var(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                          ) [Var]
                        ) [TermFactor]
                      ) [TermExpr]
                      AddopPlus(
                      ) [AddopPlus]
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           jedan
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                  TermExpr(
                    TermMulop(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                      MulopMUL(
                      ) [MulopMUL]
                      Var(
                        DesignatorIDENT(
                         pet
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermMulop]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              DesignatorDEC(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
              ) [DesignatorDEC]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            DesignatorINC(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
            ) [DesignatorINC]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:19:17,244 - ===================================
INFO  05:19:17,248 - Deklarisana je konsanta int nula = 0
INFO  05:19:17,248 - Deklarisana je konsanta int jedan = 1
INFO  05:19:17,248 - Deklarisana je konsanta int pet = 5
INFO  05:19:17,248 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:19:17,248 - Deklarisan je niz niz
INFO  05:19:17,248 - Deklarisan je niz niz2
INFO  05:19:17,248 - Deklarisana promenljiva a
INFO  05:19:17,248 - Deklarisana promenljiva b
INFO  05:19:17,248 - Deklarisan je niz nizch
INFO  05:19:17,249 - Deklarisana promenljiva c
INFO  05:19:17,249 - Deklarisana promenljiva s1
INFO  05:19:17,249 - Deklarisan je niz nizbool
INFO  05:19:17,249 - Obradjuje se funkcija main na liniji 13
INFO  05:19:17,249 - Deklarisana promenljiva bodovi
INFO  05:19:17,249 - Deklarisana promenljiva bt
INFO  05:19:17,249 - Deklarisana promenljiva s
INFO  05:19:17,250 -  Print count calls = 1
INFO  05:19:17,250 -  Deklarisanih promenljivih ima = 11
INFO  05:19:17,250 - ===================================
INFO  05:19:17,264 - Parsiranje uspesno zavrseno!
INFO  05:26:04,327 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:26:04,401 - #2 program
INFO  05:26:04,401 - #27 MJProgram
INFO  05:26:04,401 - #23 const
INFO  05:26:04,404 - #27 int
INFO  05:26:04,404 - #27 nula
INFO  05:26:04,405 - #12 =
INFO  05:26:04,405 - #26 0
INFO  05:26:04,406 - #5 ;
INFO  05:26:04,406 - #23 const
INFO  05:26:04,407 - #27 int
INFO  05:26:04,407 - #27 jedan
INFO  05:26:04,407 - #12 =
INFO  05:26:04,407 - #26 1
INFO  05:26:04,407 - #5 ;
INFO  05:26:04,407 - #23 const
INFO  05:26:04,407 - #27 int
INFO  05:26:04,408 - #27 pet
INFO  05:26:04,408 - #12 =
INFO  05:26:04,408 - #26 5
INFO  05:26:04,408 - #5 ;
INFO  05:26:04,408 - #23 const
INFO  05:26:04,408 - #27 char
INFO  05:26:04,408 - #27 pet1
INFO  05:26:04,408 - #12 =
INFO  05:26:04,409 - #28 c
INFO  05:26:04,409 - #5 ;
INFO  05:26:04,409 - #27 int
INFO  05:26:04,409 - #27 niz
INFO  05:26:04,409 - #20 [
INFO  05:26:04,410 - #21 ]
INFO  05:26:04,410 - #8 ,
INFO  05:26:04,410 - #27 niz2
INFO  05:26:04,410 - #20 [
INFO  05:26:04,410 - #21 ]
INFO  05:26:04,410 - #8 ,
INFO  05:26:04,410 - #27 a
INFO  05:26:04,410 - #8 ,
INFO  05:26:04,411 - #27 b
INFO  05:26:04,411 - #5 ;
INFO  05:26:04,411 - #27 char
INFO  05:26:04,411 - #27 nizch
INFO  05:26:04,412 - #20 [
INFO  05:26:04,412 - #21 ]
INFO  05:26:04,412 - #8 ,
INFO  05:26:04,412 - #27 c
INFO  05:26:04,412 - #5 ;
INFO  05:26:04,412 - #27 bool
INFO  05:26:04,412 - #27 s1
INFO  05:26:04,412 - #5 ;
INFO  05:26:04,412 - #27 bool
INFO  05:26:04,412 - #27 nizbool
INFO  05:26:04,413 - #20 [
INFO  05:26:04,413 - #21 ]
INFO  05:26:04,413 - #5 ;
INFO  05:26:04,413 - #3 {
INFO  05:26:04,413 - #13 void
INFO  05:26:04,414 - #27 main
INFO  05:26:04,415 - #6 (
INFO  05:26:04,415 - #7 )
INFO  05:26:04,415 - #27 int
INFO  05:26:04,415 - #27 bodovi
INFO  05:26:04,415 - #5 ;
INFO  05:26:04,415 - #27 bool
INFO  05:26:04,416 - #27 bt
INFO  05:26:04,416 - #5 ;
INFO  05:26:04,416 - #27 int
INFO  05:26:04,416 - #27 s
INFO  05:26:04,416 - #5 ;
INFO  05:26:04,416 - #3 {
INFO  05:26:04,417 - #27 bodovi
INFO  05:26:04,418 - #12 =
INFO  05:26:04,419 - #26 0
INFO  05:26:04,419 - #5 ;
INFO  05:26:04,419 - #27 bodovi
INFO  05:26:04,420 - #15 ++
INFO  05:26:04,420 - #5 ;
INFO  05:26:04,420 - #27 bodovi
INFO  05:26:04,420 - #12 =
INFO  05:26:04,421 - #27 bodovi
INFO  05:26:04,421 - #11 +
INFO  05:26:04,421 - #27 jedan
INFO  05:26:04,424 - #5 ;
INFO  05:26:04,424 - #27 bodovi
INFO  05:26:04,425 - #12 =
INFO  05:26:04,425 - #27 bodovi
INFO  05:26:04,425 - #14 *
INFO  05:26:04,425 - #27 pet
INFO  05:26:04,428 - #5 ;
INFO  05:26:04,429 - #27 bodovi
INFO  05:26:04,429 - #16 --
INFO  05:26:04,429 - #5 ;
INFO  05:26:04,430 - #9 print
INFO  05:26:04,430 - #6 (
INFO  05:26:04,430 - #27 bodovi
INFO  05:26:04,430 - #7 )
INFO  05:26:04,432 - #5 ;
INFO  05:26:04,433 - #4 }
INFO  05:26:04,434 - #4 }
INFO  05:26:04,452 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  DesignatorStmt(
                    Assignment(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           0
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  DesignatorINC(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                  ) [DesignatorINC]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                  AddExpr(
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                    AddopPlus(
                    ) [AddopPlus]
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         jedan
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [AddExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                TermExpr(
                  TermMulop(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       pet
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            DesignatorDEC(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
            ) [DesignatorDEC]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:26:04,453 - ===================================
INFO  05:26:04,461 - Deklarisana je konsanta int nula = 0
INFO  05:26:04,462 - Deklarisana je konsanta int jedan = 1
INFO  05:26:04,462 - Deklarisana je konsanta int pet = 5
INFO  05:26:04,462 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:26:04,462 - Deklarisan je niz niz
INFO  05:26:04,463 - Deklarisan je niz niz2
INFO  05:26:04,463 - Deklarisana promenljiva a
INFO  05:26:04,463 - Deklarisana promenljiva b
INFO  05:26:04,463 - Deklarisan je niz nizch
INFO  05:26:04,463 - Deklarisana promenljiva c
INFO  05:26:04,463 - Deklarisana promenljiva s1
INFO  05:26:04,463 - Deklarisan je niz nizbool
INFO  05:26:04,464 - Obradjuje se funkcija main na liniji 13
INFO  05:26:04,464 - Deklarisana promenljiva bodovi
INFO  05:26:04,464 - Deklarisana promenljiva bt
INFO  05:26:04,464 - Deklarisana promenljiva s
INFO  05:26:04,464 -  Print count calls = 1
INFO  05:26:04,465 -  Deklarisanih promenljivih ima = 11
INFO  05:26:04,465 - ===================================
INFO  05:26:04,478 - Parsiranje uspesno zavrseno!
INFO  05:27:09,717 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:27:09,776 - #2 program
INFO  05:27:09,776 - #27 MJProgram
INFO  05:27:09,776 - #23 const
INFO  05:27:09,778 - #27 int
INFO  05:27:09,778 - #27 nula
INFO  05:27:09,779 - #12 =
INFO  05:27:09,780 - #26 0
INFO  05:27:09,780 - #5 ;
INFO  05:27:09,780 - #23 const
INFO  05:27:09,780 - #27 int
INFO  05:27:09,780 - #27 jedan
INFO  05:27:09,781 - #12 =
INFO  05:27:09,781 - #26 1
INFO  05:27:09,781 - #5 ;
INFO  05:27:09,781 - #23 const
INFO  05:27:09,781 - #27 int
INFO  05:27:09,781 - #27 pet
INFO  05:27:09,781 - #12 =
INFO  05:27:09,781 - #26 5
INFO  05:27:09,781 - #5 ;
INFO  05:27:09,781 - #23 const
INFO  05:27:09,782 - #27 char
INFO  05:27:09,782 - #27 pet1
INFO  05:27:09,782 - #12 =
INFO  05:27:09,782 - #28 c
INFO  05:27:09,782 - #5 ;
INFO  05:27:09,782 - #27 int
INFO  05:27:09,782 - #27 niz
INFO  05:27:09,783 - #20 [
INFO  05:27:09,783 - #21 ]
INFO  05:27:09,783 - #8 ,
INFO  05:27:09,783 - #27 niz2
INFO  05:27:09,783 - #20 [
INFO  05:27:09,783 - #21 ]
INFO  05:27:09,783 - #8 ,
INFO  05:27:09,783 - #27 a
INFO  05:27:09,783 - #8 ,
INFO  05:27:09,784 - #27 b
INFO  05:27:09,784 - #5 ;
INFO  05:27:09,784 - #27 char
INFO  05:27:09,784 - #27 nizch
INFO  05:27:09,785 - #20 [
INFO  05:27:09,785 - #21 ]
INFO  05:27:09,785 - #8 ,
INFO  05:27:09,785 - #27 c
INFO  05:27:09,785 - #5 ;
INFO  05:27:09,785 - #27 bool
INFO  05:27:09,785 - #27 s1
INFO  05:27:09,785 - #5 ;
INFO  05:27:09,785 - #27 bool
INFO  05:27:09,786 - #27 nizbool
INFO  05:27:09,786 - #20 [
INFO  05:27:09,786 - #21 ]
INFO  05:27:09,786 - #5 ;
INFO  05:27:09,786 - #3 {
INFO  05:27:09,786 - #13 void
INFO  05:27:09,787 - #27 main
INFO  05:27:09,788 - #6 (
INFO  05:27:09,788 - #7 )
INFO  05:27:09,788 - #27 int
INFO  05:27:09,788 - #27 bodovi
INFO  05:27:09,788 - #5 ;
INFO  05:27:09,788 - #27 bool
INFO  05:27:09,788 - #27 bt
INFO  05:27:09,788 - #5 ;
INFO  05:27:09,789 - #27 int
INFO  05:27:09,789 - #27 s
INFO  05:27:09,789 - #5 ;
INFO  05:27:09,789 - #3 {
INFO  05:27:09,789 - #27 bodovi
INFO  05:27:09,790 - #12 =
INFO  05:27:09,791 - #26 0
INFO  05:27:09,791 - #5 ;
INFO  05:27:09,791 - #27 bodovi
INFO  05:27:09,791 - #15 ++
INFO  05:27:09,791 - #5 ;
INFO  05:27:09,792 - #27 bodovi
INFO  05:27:09,792 - #12 =
INFO  05:27:09,792 - #27 bodovi
INFO  05:27:09,792 - #11 +
INFO  05:27:09,792 - #27 jedan
INFO  05:27:09,794 - #5 ;
INFO  05:27:09,794 - #27 bodovi
INFO  05:27:09,794 - #12 =
INFO  05:27:09,794 - #27 bodovi
INFO  05:27:09,795 - #14 *
INFO  05:27:09,795 - #27 pet
INFO  05:27:09,796 - #5 ;
INFO  05:27:09,797 - #9 print
INFO  05:27:09,797 - #6 (
INFO  05:27:09,797 - #27 bodovi
INFO  05:27:09,797 - #7 )
INFO  05:27:09,798 - #5 ;
INFO  05:27:09,798 - #4 }
INFO  05:27:09,799 - #4 }
INFO  05:27:09,810 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermFactor(
                        FactorNUMBER(
                         0
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                DesignatorINC(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [DesignatorINC]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                AddExpr(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  AddopPlus(
                  ) [AddopPlus]
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       jedan
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [AddExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                  MulopMUL(
                  ) [MulopMUL]
                  Var(
                    DesignatorIDENT(
                     pet
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:27:09,811 - ===================================
INFO  05:27:09,815 - Deklarisana je konsanta int nula = 0
INFO  05:27:09,815 - Deklarisana je konsanta int jedan = 1
INFO  05:27:09,815 - Deklarisana je konsanta int pet = 5
INFO  05:27:09,817 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:27:09,817 - Deklarisan je niz niz
INFO  05:27:09,818 - Deklarisan je niz niz2
INFO  05:27:09,818 - Deklarisana promenljiva a
INFO  05:27:09,818 - Deklarisana promenljiva b
INFO  05:27:09,818 - Deklarisan je niz nizch
INFO  05:27:09,818 - Deklarisana promenljiva c
INFO  05:27:09,818 - Deklarisana promenljiva s1
INFO  05:27:09,818 - Deklarisan je niz nizbool
INFO  05:27:09,818 - Obradjuje se funkcija main na liniji 13
INFO  05:27:09,818 - Deklarisana promenljiva bodovi
INFO  05:27:09,818 - Deklarisana promenljiva bt
INFO  05:27:09,818 - Deklarisana promenljiva s
INFO  05:27:09,819 -  Print count calls = 1
INFO  05:27:09,819 -  Deklarisanih promenljivih ima = 11
INFO  05:27:09,819 - ===================================
INFO  05:27:09,830 - Parsiranje uspesno zavrseno!
INFO  05:37:29,157 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:37:29,226 - #2 program
INFO  05:37:29,226 - #27 MJProgram
INFO  05:37:29,226 - #23 const
INFO  05:37:29,228 - #27 int
INFO  05:37:29,228 - #27 nula
INFO  05:37:29,229 - #12 =
INFO  05:37:29,230 - #26 0
INFO  05:37:29,230 - #5 ;
INFO  05:37:29,230 - #23 const
INFO  05:37:29,230 - #27 int
INFO  05:37:29,230 - #27 jedan
INFO  05:37:29,231 - #12 =
INFO  05:37:29,231 - #26 1
INFO  05:37:29,231 - #5 ;
INFO  05:37:29,231 - #23 const
INFO  05:37:29,231 - #27 int
INFO  05:37:29,231 - #27 pet
INFO  05:37:29,231 - #12 =
INFO  05:37:29,231 - #26 5
INFO  05:37:29,231 - #5 ;
INFO  05:37:29,231 - #23 const
INFO  05:37:29,232 - #27 char
INFO  05:37:29,232 - #27 pet1
INFO  05:37:29,232 - #12 =
INFO  05:37:29,232 - #28 c
INFO  05:37:29,232 - #5 ;
INFO  05:37:29,233 - #27 int
INFO  05:37:29,233 - #27 niz
INFO  05:37:29,233 - #20 [
INFO  05:37:29,233 - #21 ]
INFO  05:37:29,233 - #8 ,
INFO  05:37:29,233 - #27 niz2
INFO  05:37:29,233 - #20 [
INFO  05:37:29,233 - #21 ]
INFO  05:37:29,233 - #8 ,
INFO  05:37:29,234 - #27 a
INFO  05:37:29,234 - #8 ,
INFO  05:37:29,234 - #27 b
INFO  05:37:29,234 - #5 ;
INFO  05:37:29,234 - #27 char
INFO  05:37:29,235 - #27 nizch
INFO  05:37:29,235 - #20 [
INFO  05:37:29,235 - #21 ]
INFO  05:37:29,235 - #8 ,
INFO  05:37:29,235 - #27 c
INFO  05:37:29,235 - #5 ;
INFO  05:37:29,236 - #27 bool
INFO  05:37:29,236 - #27 s1
INFO  05:37:29,236 - #5 ;
INFO  05:37:29,236 - #27 bool
INFO  05:37:29,236 - #27 nizbool
INFO  05:37:29,236 - #20 [
INFO  05:37:29,236 - #21 ]
INFO  05:37:29,236 - #5 ;
INFO  05:37:29,236 - #3 {
INFO  05:37:29,237 - #13 void
INFO  05:37:29,238 - #27 main
INFO  05:37:29,238 - #6 (
INFO  05:37:29,238 - #7 )
INFO  05:37:29,238 - #27 int
INFO  05:37:29,239 - #27 bodovi
INFO  05:37:29,239 - #5 ;
INFO  05:37:29,239 - #27 bool
INFO  05:37:29,239 - #27 bt
INFO  05:37:29,239 - #5 ;
INFO  05:37:29,239 - #27 int
INFO  05:37:29,239 - #27 s
INFO  05:37:29,239 - #5 ;
INFO  05:37:29,239 - #3 {
INFO  05:37:29,239 - #27 bodovi
INFO  05:37:29,241 - #12 =
INFO  05:37:29,241 - #26 0
INFO  05:37:29,241 - #5 ;
INFO  05:37:29,241 - #27 bodovi
INFO  05:37:29,242 - #15 ++
INFO  05:37:29,242 - #5 ;
INFO  05:37:29,242 - #27 bodovi
INFO  05:37:29,242 - #12 =
INFO  05:37:29,242 - #27 bodovi
INFO  05:37:29,242 - #11 +
INFO  05:37:29,243 - #27 jedan
INFO  05:37:29,244 - #5 ;
INFO  05:37:29,245 - #27 bodovi
INFO  05:37:29,245 - #12 =
INFO  05:37:29,245 - #27 bodovi
INFO  05:37:29,245 - #14 *
INFO  05:37:29,245 - #27 pet
INFO  05:37:29,247 - #5 ;
INFO  05:37:29,247 - #9 print
INFO  05:37:29,247 - #6 (
INFO  05:37:29,248 - #27 bodovi
INFO  05:37:29,248 - #7 )
INFO  05:37:29,249 - #5 ;
INFO  05:37:29,249 - #4 }
INFO  05:37:29,249 - #4 }
INFO  05:37:29,264 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermFactor(
                        FactorNUMBER(
                         0
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                DesignatorINC(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [DesignatorINC]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                AddExpr(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  AddopPlus(
                  ) [AddopPlus]
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       jedan
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [AddExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                  MulopMUL(
                  ) [MulopMUL]
                  Var(
                    DesignatorIDENT(
                     pet
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:37:29,265 - ===================================
INFO  05:37:29,270 - Deklarisana je konsanta int nula = 0
INFO  05:37:29,270 - Deklarisana je konsanta int jedan = 1
INFO  05:37:29,270 - Deklarisana je konsanta int pet = 5
INFO  05:37:29,272 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:37:29,272 - Deklarisan je niz niz
INFO  05:37:29,273 - Deklarisan je niz niz2
INFO  05:37:29,273 - Deklarisana promenljiva a
INFO  05:37:29,273 - Deklarisana promenljiva b
INFO  05:37:29,273 - Deklarisan je niz nizch
INFO  05:37:29,273 - Deklarisana promenljiva c
INFO  05:37:29,273 - Deklarisana promenljiva s1
INFO  05:37:29,273 - Deklarisan je niz nizbool
INFO  05:37:29,274 - Obradjuje se funkcija main na liniji 13
INFO  05:37:29,274 - Deklarisana promenljiva bodovi
INFO  05:37:29,274 - Deklarisana promenljiva bt
INFO  05:37:29,274 - Deklarisana promenljiva s
INFO  05:37:29,274 -  Print count calls = 1
INFO  05:37:29,274 -  Deklarisanih promenljivih ima = 11
INFO  05:37:29,275 - ===================================
INFO  05:37:29,287 - Parsiranje uspesno zavrseno!
INFO  05:38:51,555 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:38:51,620 - #2 program
INFO  05:38:51,621 - #27 MJProgram
INFO  05:38:51,621 - #23 const
INFO  05:38:51,623 - #27 int
INFO  05:38:51,623 - #27 nula
INFO  05:38:51,624 - #12 =
INFO  05:38:51,624 - #26 0
INFO  05:38:51,624 - #5 ;
INFO  05:38:51,624 - #23 const
INFO  05:38:51,625 - #27 int
INFO  05:38:51,625 - #27 jedan
INFO  05:38:51,625 - #12 =
INFO  05:38:51,625 - #26 1
INFO  05:38:51,625 - #5 ;
INFO  05:38:51,625 - #23 const
INFO  05:38:51,625 - #27 int
INFO  05:38:51,626 - #27 pet
INFO  05:38:51,626 - #12 =
INFO  05:38:51,626 - #26 5
INFO  05:38:51,626 - #5 ;
INFO  05:38:51,626 - #23 const
INFO  05:38:51,626 - #27 char
INFO  05:38:51,626 - #27 pet1
INFO  05:38:51,626 - #12 =
INFO  05:38:51,627 - #28 c
INFO  05:38:51,627 - #5 ;
INFO  05:38:51,627 - #27 int
INFO  05:38:51,627 - #27 niz
INFO  05:38:51,627 - #20 [
INFO  05:38:51,627 - #21 ]
INFO  05:38:51,627 - #8 ,
INFO  05:38:51,628 - #27 niz2
INFO  05:38:51,628 - #20 [
INFO  05:38:51,628 - #21 ]
INFO  05:38:51,628 - #8 ,
INFO  05:38:51,628 - #27 a
INFO  05:38:51,628 - #8 ,
INFO  05:38:51,628 - #27 b
INFO  05:38:51,629 - #5 ;
INFO  05:38:51,629 - #27 char
INFO  05:38:51,629 - #27 nizch
INFO  05:38:51,629 - #20 [
INFO  05:38:51,629 - #21 ]
INFO  05:38:51,630 - #8 ,
INFO  05:38:51,630 - #27 c
INFO  05:38:51,630 - #5 ;
INFO  05:38:51,630 - #27 bool
INFO  05:38:51,630 - #27 s1
INFO  05:38:51,630 - #5 ;
INFO  05:38:51,630 - #27 bool
INFO  05:38:51,630 - #27 nizbool
INFO  05:38:51,631 - #20 [
INFO  05:38:51,631 - #21 ]
INFO  05:38:51,631 - #5 ;
INFO  05:38:51,631 - #3 {
INFO  05:38:51,631 - #13 void
INFO  05:38:51,633 - #27 main
INFO  05:38:51,633 - #6 (
INFO  05:38:51,633 - #7 )
INFO  05:38:51,633 - #27 int
INFO  05:38:51,634 - #27 bodovi
INFO  05:38:51,634 - #5 ;
INFO  05:38:51,634 - #27 bool
INFO  05:38:51,634 - #27 bt
INFO  05:38:51,634 - #5 ;
INFO  05:38:51,634 - #27 int
INFO  05:38:51,634 - #27 s
INFO  05:38:51,635 - #5 ;
INFO  05:38:51,635 - #3 {
INFO  05:38:51,635 - #27 bodovi
INFO  05:38:51,636 - #12 =
INFO  05:38:51,636 - #26 0
INFO  05:38:51,637 - #5 ;
INFO  05:38:51,637 - #27 bodovi
INFO  05:38:51,637 - #15 ++
INFO  05:38:51,637 - #5 ;
INFO  05:38:51,638 - #27 bodovi
INFO  05:38:51,638 - #12 =
INFO  05:38:51,638 - #27 bodovi
INFO  05:38:51,638 - #11 +
INFO  05:38:51,638 - #27 jedan
INFO  05:38:51,640 - #5 ;
INFO  05:38:51,641 - #27 bodovi
INFO  05:38:51,641 - #12 =
INFO  05:38:51,641 - #27 bodovi
INFO  05:38:51,641 - #14 *
INFO  05:38:51,641 - #27 pet
INFO  05:38:51,643 - #5 ;
INFO  05:38:51,644 - #9 print
INFO  05:38:51,644 - #6 (
INFO  05:38:51,644 - #27 bodovi
INFO  05:38:51,644 - #7 )
INFO  05:38:51,646 - #5 ;
INFO  05:38:51,646 - #4 }
INFO  05:38:51,646 - #4 }
INFO  05:38:51,661 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermFactor(
                        FactorNUMBER(
                         0
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                DesignatorINC(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [DesignatorINC]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                AddExpr(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  AddopPlus(
                  ) [AddopPlus]
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       jedan
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [AddExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                  MulopMUL(
                  ) [MulopMUL]
                  Var(
                    DesignatorIDENT(
                     pet
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:38:51,662 - ===================================
INFO  05:38:51,667 - Deklarisana je konsanta int nula = 0
INFO  05:38:51,668 - Deklarisana je konsanta int jedan = 1
INFO  05:38:51,668 - Deklarisana je konsanta int pet = 5
INFO  05:38:51,670 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:38:51,670 - Deklarisan je niz niz
INFO  05:38:51,671 - Deklarisan je niz niz2
INFO  05:38:51,671 - Deklarisana promenljiva a
INFO  05:38:51,671 - Deklarisana promenljiva b
INFO  05:38:51,671 - Deklarisan je niz nizch
INFO  05:38:51,671 - Deklarisana promenljiva c
INFO  05:38:51,671 - Deklarisana promenljiva s1
INFO  05:38:51,671 - Deklarisan je niz nizbool
INFO  05:38:51,671 - Obradjuje se funkcija main na liniji 13
INFO  05:38:51,672 - Deklarisana promenljiva bodovi
INFO  05:38:51,672 - Deklarisana promenljiva bt
INFO  05:38:51,672 - Deklarisana promenljiva s
INFO  05:38:51,672 -  Print count calls = 1
INFO  05:38:51,672 -  Deklarisanih promenljivih ima = 11
INFO  05:38:51,673 - ===================================
INFO  05:38:51,690 - Parsiranje uspesno zavrseno!
INFO  05:40:14,289 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:40:14,348 - #2 program
INFO  05:40:14,348 - #27 MJProgram
INFO  05:40:14,348 - #23 const
INFO  05:40:14,350 - #27 int
INFO  05:40:14,350 - #27 nula
INFO  05:40:14,351 - #12 =
INFO  05:40:14,351 - #26 0
INFO  05:40:14,351 - #5 ;
INFO  05:40:14,352 - #23 const
INFO  05:40:14,352 - #27 int
INFO  05:40:14,352 - #27 jedan
INFO  05:40:14,352 - #12 =
INFO  05:40:14,353 - #26 1
INFO  05:40:14,353 - #5 ;
INFO  05:40:14,353 - #23 const
INFO  05:40:14,353 - #27 int
INFO  05:40:14,353 - #27 pet
INFO  05:40:14,353 - #12 =
INFO  05:40:14,353 - #26 5
INFO  05:40:14,353 - #5 ;
INFO  05:40:14,354 - #23 const
INFO  05:40:14,354 - #27 char
INFO  05:40:14,354 - #27 pet1
INFO  05:40:14,354 - #12 =
INFO  05:40:14,354 - #28 c
INFO  05:40:14,354 - #5 ;
INFO  05:40:14,354 - #27 int
INFO  05:40:14,355 - #27 niz
INFO  05:40:14,355 - #20 [
INFO  05:40:14,355 - #21 ]
INFO  05:40:14,355 - #8 ,
INFO  05:40:14,355 - #27 niz2
INFO  05:40:14,355 - #20 [
INFO  05:40:14,355 - #21 ]
INFO  05:40:14,355 - #8 ,
INFO  05:40:14,356 - #27 a
INFO  05:40:14,356 - #8 ,
INFO  05:40:14,356 - #27 b
INFO  05:40:14,356 - #5 ;
INFO  05:40:14,356 - #27 char
INFO  05:40:14,357 - #27 nizch
INFO  05:40:14,357 - #20 [
INFO  05:40:14,357 - #21 ]
INFO  05:40:14,357 - #8 ,
INFO  05:40:14,357 - #27 c
INFO  05:40:14,357 - #5 ;
INFO  05:40:14,358 - #27 bool
INFO  05:40:14,358 - #27 s1
INFO  05:40:14,358 - #5 ;
INFO  05:40:14,358 - #27 bool
INFO  05:40:14,358 - #27 nizbool
INFO  05:40:14,358 - #20 [
INFO  05:40:14,358 - #21 ]
INFO  05:40:14,358 - #5 ;
INFO  05:40:14,359 - #3 {
INFO  05:40:14,359 - #13 void
INFO  05:40:14,360 - #27 main
INFO  05:40:14,361 - #6 (
INFO  05:40:14,361 - #7 )
INFO  05:40:14,361 - #27 int
INFO  05:40:14,361 - #27 bodovi
INFO  05:40:14,361 - #5 ;
INFO  05:40:14,361 - #27 bool
INFO  05:40:14,361 - #27 bt
INFO  05:40:14,362 - #5 ;
INFO  05:40:14,362 - #27 int
INFO  05:40:14,362 - #27 s
INFO  05:40:14,362 - #5 ;
INFO  05:40:14,362 - #3 {
INFO  05:40:14,362 - #27 bodovi
INFO  05:40:14,364 - #12 =
INFO  05:40:14,364 - #26 0
INFO  05:40:14,364 - #5 ;
INFO  05:40:14,365 - #27 bodovi
INFO  05:40:14,365 - #15 ++
INFO  05:40:14,365 - #5 ;
INFO  05:40:14,365 - #27 bodovi
INFO  05:40:14,366 - #12 =
INFO  05:40:14,366 - #27 bodovi
INFO  05:40:14,366 - #11 +
INFO  05:40:14,366 - #27 jedan
INFO  05:40:14,368 - #5 ;
INFO  05:40:14,368 - #27 bodovi
INFO  05:40:14,369 - #12 =
INFO  05:40:14,369 - #27 bodovi
INFO  05:40:14,369 - #14 *
INFO  05:40:14,369 - #27 pet
INFO  05:40:14,371 - #5 ;
INFO  05:40:14,371 - #27 bodovi
INFO  05:40:14,371 - #16 --
INFO  05:40:14,372 - #5 ;
INFO  05:40:14,372 - #9 print
INFO  05:40:14,372 - #6 (
INFO  05:40:14,372 - #27 bodovi
INFO  05:40:14,372 - #7 )
INFO  05:40:14,374 - #5 ;
INFO  05:40:14,374 - #4 }
INFO  05:40:14,374 - #4 }
INFO  05:40:14,384 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  DesignatorStmt(
                    Assignment(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           0
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  DesignatorINC(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                  ) [DesignatorINC]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                  AddExpr(
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                    AddopPlus(
                    ) [AddopPlus]
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         jedan
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [AddExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                TermExpr(
                  TermMulop(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       pet
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            DesignatorDEC(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
            ) [DesignatorDEC]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:40:14,385 - ===================================
INFO  05:40:14,392 - Deklarisana je konsanta int nula = 0
INFO  05:40:14,392 - Deklarisana je konsanta int jedan = 1
INFO  05:40:14,392 - Deklarisana je konsanta int pet = 5
INFO  05:40:14,393 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:40:14,393 - Deklarisan je niz niz
INFO  05:40:14,393 - Deklarisan je niz niz2
INFO  05:40:14,393 - Deklarisana promenljiva a
INFO  05:40:14,393 - Deklarisana promenljiva b
INFO  05:40:14,393 - Deklarisan je niz nizch
INFO  05:40:14,393 - Deklarisana promenljiva c
INFO  05:40:14,393 - Deklarisana promenljiva s1
INFO  05:40:14,394 - Deklarisan je niz nizbool
INFO  05:40:14,394 - Obradjuje se funkcija main na liniji 13
INFO  05:40:14,394 - Deklarisana promenljiva bodovi
INFO  05:40:14,394 - Deklarisana promenljiva bt
INFO  05:40:14,394 - Deklarisana promenljiva s
INFO  05:40:14,395 -  Print count calls = 1
INFO  05:40:14,395 -  Deklarisanih promenljivih ima = 11
INFO  05:40:14,395 - ===================================
INFO  05:40:14,409 - Parsiranje uspesno zavrseno!
INFO  05:43:29,256 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:43:29,333 - #2 program
INFO  05:43:29,333 - #27 MJProgram
INFO  05:43:29,333 - #23 const
INFO  05:43:29,336 - #27 int
INFO  05:43:29,336 - #27 nula
INFO  05:43:29,337 - #12 =
INFO  05:43:29,338 - #26 0
INFO  05:43:29,338 - #5 ;
INFO  05:43:29,338 - #23 const
INFO  05:43:29,339 - #27 int
INFO  05:43:29,339 - #27 jedan
INFO  05:43:29,339 - #12 =
INFO  05:43:29,339 - #26 1
INFO  05:43:29,339 - #5 ;
INFO  05:43:29,339 - #23 const
INFO  05:43:29,340 - #27 int
INFO  05:43:29,340 - #27 pet
INFO  05:43:29,340 - #12 =
INFO  05:43:29,340 - #26 5
INFO  05:43:29,340 - #5 ;
INFO  05:43:29,340 - #23 const
INFO  05:43:29,340 - #27 char
INFO  05:43:29,341 - #27 pet1
INFO  05:43:29,341 - #12 =
INFO  05:43:29,341 - #28 c
INFO  05:43:29,341 - #5 ;
INFO  05:43:29,341 - #27 int
INFO  05:43:29,342 - #27 niz
INFO  05:43:29,342 - #20 [
INFO  05:43:29,342 - #21 ]
INFO  05:43:29,342 - #8 ,
INFO  05:43:29,342 - #27 niz2
INFO  05:43:29,342 - #20 [
INFO  05:43:29,343 - #21 ]
INFO  05:43:29,343 - #8 ,
INFO  05:43:29,343 - #27 a
INFO  05:43:29,343 - #8 ,
INFO  05:43:29,343 - #27 b
INFO  05:43:29,343 - #5 ;
INFO  05:43:29,343 - #27 char
INFO  05:43:29,344 - #27 nizch
INFO  05:43:29,344 - #20 [
INFO  05:43:29,344 - #21 ]
INFO  05:43:29,344 - #8 ,
INFO  05:43:29,344 - #27 c
INFO  05:43:29,344 - #5 ;
INFO  05:43:29,344 - #27 bool
INFO  05:43:29,344 - #27 s1
INFO  05:43:29,345 - #5 ;
INFO  05:43:29,345 - #27 bool
INFO  05:43:29,345 - #27 nizbool
INFO  05:43:29,345 - #20 [
INFO  05:43:29,345 - #21 ]
INFO  05:43:29,345 - #5 ;
INFO  05:43:29,345 - #3 {
INFO  05:43:29,345 - #13 void
INFO  05:43:29,347 - #27 main
INFO  05:43:29,347 - #6 (
INFO  05:43:29,348 - #7 )
INFO  05:43:29,348 - #27 int
INFO  05:43:29,348 - #27 bodovi
INFO  05:43:29,348 - #5 ;
INFO  05:43:29,349 - #27 bool
INFO  05:43:29,349 - #27 bt
INFO  05:43:29,349 - #5 ;
INFO  05:43:29,349 - #27 int
INFO  05:43:29,349 - #27 s
INFO  05:43:29,349 - #5 ;
INFO  05:43:29,349 - #3 {
INFO  05:43:29,349 - #27 bodovi
INFO  05:43:29,351 - #12 =
INFO  05:43:29,352 - #26 0
INFO  05:43:29,352 - #5 ;
INFO  05:43:29,352 - #27 bodovi
INFO  05:43:29,353 - #15 ++
INFO  05:43:29,353 - #5 ;
INFO  05:43:29,353 - #27 bodovi
INFO  05:43:29,354 - #12 =
INFO  05:43:29,354 - #27 bodovi
INFO  05:43:29,354 - #11 +
INFO  05:43:29,354 - #27 jedan
INFO  05:43:29,357 - #5 ;
INFO  05:43:29,358 - #27 bodovi
INFO  05:43:29,358 - #12 =
INFO  05:43:29,358 - #27 bodovi
INFO  05:43:29,358 - #14 *
INFO  05:43:29,358 - #27 pet
INFO  05:43:29,360 - #5 ;
INFO  05:43:29,361 - #27 bodovi
INFO  05:43:29,361 - #16 --
INFO  05:43:29,361 - #5 ;
INFO  05:43:29,361 - #9 print
INFO  05:43:29,362 - #6 (
INFO  05:43:29,362 - #27 bodovi
INFO  05:43:29,362 - #7 )
INFO  05:43:29,364 - #5 ;
INFO  05:43:29,364 - #27 bodovi
INFO  05:43:29,364 - #12 =
INFO  05:43:29,364 - #19 -
INFO  05:43:29,364 - #27 bodovi
INFO  05:43:29,366 - #11 +
INFO  05:43:29,367 - #6 (
INFO  05:43:29,367 - #27 pet
INFO  05:43:29,367 - #14 *
INFO  05:43:29,367 - #27 a
INFO  05:43:29,367 - #17 /
INFO  05:43:29,367 - #26 2
INFO  05:43:29,369 - #19 -
INFO  05:43:29,369 - #27 jedan
INFO  05:43:29,370 - #7 )
INFO  05:43:29,371 - #14 *
INFO  05:43:29,371 - #27 bodovi
INFO  05:43:29,371 - #19 -
INFO  05:43:29,371 - #6 (
INFO  05:43:29,371 - #26 3
INFO  05:43:29,372 - #18 %
INFO  05:43:29,372 - #26 2
INFO  05:43:29,373 - #11 +
INFO  05:43:29,374 - #26 3
INFO  05:43:29,374 - #14 *
INFO  05:43:29,374 - #26 2
INFO  05:43:29,374 - #19 -
INFO  05:43:29,374 - #26 3
INFO  05:43:29,374 - #7 )
INFO  05:43:29,375 - #5 ;
INFO  05:43:29,375 - #9 print
INFO  05:43:29,375 - #6 (
INFO  05:43:29,375 - #27 bodovi
INFO  05:43:29,375 - #7 )
INFO  05:43:29,376 - #5 ;
INFO  05:43:29,376 - #4 }
INFO  05:43:29,376 - #4 }
INFO  05:43:29,394 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      DesignatorStmt(
                        Assignment(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                          TermExpr(
                            TermFactor(
                              FactorNUMBER(
                               0
                              ) [FactorNUMBER]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [Assignment]
                      ) [DesignatorStmt]
                    ) [Statements]
                    DesignatorStmt(
                      DesignatorINC(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [DesignatorINC]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    Assignment(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                      AddExpr(
                        TermExpr(
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               bodovi
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermFactor(
                          Var(
                            DesignatorIDENT(
                             jedan
                            ) [DesignatorIDENT]
                          ) [Var]
                        ) [TermFactor]
                      ) [AddExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermMulop(
                        TermFactor(
                          Var(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                          ) [Var]
                        ) [TermFactor]
                        MulopMUL(
                        ) [MulopMUL]
                        Var(
                          DesignatorIDENT(
                           pet
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermMulop]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                DesignatorDEC(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [DesignatorDEC]
              ) [DesignatorStmt]
            ) [Statements]
            MatchedStmt(
              PrintStmt(
                TermExpr(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [TermExpr]
                NoConst(
                ) [NoConst]
              ) [PrintStmt]
            ) [MatchedStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:43:29,395 - ===================================
INFO  05:43:29,401 - Deklarisana je konsanta int nula = 0
INFO  05:43:29,401 - Deklarisana je konsanta int jedan = 1
INFO  05:43:29,401 - Deklarisana je konsanta int pet = 5
INFO  05:43:29,401 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:43:29,401 - Deklarisan je niz niz
INFO  05:43:29,402 - Deklarisan je niz niz2
INFO  05:43:29,402 - Deklarisana promenljiva a
INFO  05:43:29,402 - Deklarisana promenljiva b
INFO  05:43:29,402 - Deklarisan je niz nizch
INFO  05:43:29,402 - Deklarisana promenljiva c
INFO  05:43:29,402 - Deklarisana promenljiva s1
INFO  05:43:29,402 - Deklarisan je niz nizbool
INFO  05:43:29,402 - Obradjuje se funkcija main na liniji 13
INFO  05:43:29,402 - Deklarisana promenljiva bodovi
INFO  05:43:29,402 - Deklarisana promenljiva bt
INFO  05:43:29,402 - Deklarisana promenljiva s
INFO  05:43:29,403 - Izvrsena negacija  na liniji 26
INFO  05:43:29,404 -  Print count calls = 2
INFO  05:43:29,404 -  Deklarisanih promenljivih ima = 11
INFO  05:43:29,404 - ===================================
INFO  05:43:29,414 - Parsiranje uspesno zavrseno!
INFO  05:53:42,009 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:53:42,053 - #2 program
INFO  05:53:42,053 - #27 MJProgram
INFO  05:53:42,053 - #23 const
INFO  05:53:42,055 - #27 int
INFO  05:53:42,055 - #27 nula
INFO  05:53:42,056 - #12 =
INFO  05:53:42,056 - #26 0
INFO  05:53:42,056 - #5 ;
INFO  05:53:42,056 - #23 const
INFO  05:53:42,057 - #27 int
INFO  05:53:42,057 - #27 jedan
INFO  05:53:42,057 - #12 =
INFO  05:53:42,057 - #26 1
INFO  05:53:42,057 - #5 ;
INFO  05:53:42,057 - #23 const
INFO  05:53:42,057 - #27 int
INFO  05:53:42,057 - #27 pet
INFO  05:53:42,057 - #12 =
INFO  05:53:42,058 - #26 5
INFO  05:53:42,058 - #5 ;
INFO  05:53:42,058 - #23 const
INFO  05:53:42,058 - #27 char
INFO  05:53:42,058 - #27 pet1
INFO  05:53:42,058 - #12 =
INFO  05:53:42,058 - #28 c
INFO  05:53:42,058 - #5 ;
INFO  05:53:42,059 - #27 int
INFO  05:53:42,059 - #27 niz
INFO  05:53:42,059 - #20 [
INFO  05:53:42,059 - #21 ]
INFO  05:53:42,059 - #8 ,
INFO  05:53:42,059 - #27 niz2
INFO  05:53:42,059 - #20 [
INFO  05:53:42,059 - #21 ]
INFO  05:53:42,059 - #8 ,
INFO  05:53:42,060 - #27 a
INFO  05:53:42,060 - #8 ,
INFO  05:53:42,060 - #27 b
INFO  05:53:42,060 - #5 ;
INFO  05:53:42,060 - #27 char
INFO  05:53:42,060 - #27 nizch
INFO  05:53:42,061 - #20 [
INFO  05:53:42,061 - #21 ]
INFO  05:53:42,061 - #8 ,
INFO  05:53:42,061 - #27 c
INFO  05:53:42,061 - #5 ;
INFO  05:53:42,061 - #27 bool
INFO  05:53:42,062 - #27 s1
INFO  05:53:42,062 - #5 ;
INFO  05:53:42,062 - #27 bool
INFO  05:53:42,062 - #27 nizbool
INFO  05:53:42,062 - #20 [
INFO  05:53:42,062 - #21 ]
INFO  05:53:42,063 - #5 ;
INFO  05:53:42,063 - #3 {
INFO  05:53:42,063 - #13 void
INFO  05:53:42,064 - #27 main
INFO  05:53:42,064 - #6 (
INFO  05:53:42,065 - #7 )
INFO  05:53:42,065 - #27 int
INFO  05:53:42,065 - #27 bodovi
INFO  05:53:42,065 - #5 ;
INFO  05:53:42,065 - #27 bool
INFO  05:53:42,065 - #27 bt
INFO  05:53:42,065 - #5 ;
INFO  05:53:42,065 - #27 int
INFO  05:53:42,065 - #27 s
INFO  05:53:42,066 - #5 ;
INFO  05:53:42,066 - #3 {
INFO  05:53:42,066 - #27 s
INFO  05:53:42,067 - #12 =
INFO  05:53:42,067 - #26 32
INFO  05:53:42,067 - #5 ;
INFO  05:53:42,067 - #27 s
INFO  05:53:42,068 - #12 =
INFO  05:53:42,068 - #19 -
INFO  05:53:42,068 - #27 s
INFO  05:53:42,068 - #9 print
ERROR 05:53:42,068 - 
Sintaksna greska na liniji 21
ERROR 05:53:42,068 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 21
INFO  05:55:06,452 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:55:06,456 - #2 program
INFO  05:55:06,456 - #27 MJProgram
INFO  05:55:06,456 - #23 const
INFO  05:55:06,456 - #27 int
INFO  05:55:06,456 - #27 nula
INFO  05:55:06,456 - #12 =
INFO  05:55:06,457 - #26 0
INFO  05:55:06,457 - #5 ;
INFO  05:55:06,457 - #23 const
INFO  05:55:06,457 - #27 int
INFO  05:55:06,457 - #27 jedan
INFO  05:55:06,457 - #12 =
INFO  05:55:06,457 - #26 1
INFO  05:55:06,457 - #5 ;
INFO  05:55:06,457 - #23 const
INFO  05:55:06,457 - #27 int
INFO  05:55:06,457 - #27 pet
INFO  05:55:06,457 - #12 =
INFO  05:55:06,457 - #26 5
INFO  05:55:06,457 - #5 ;
INFO  05:55:06,457 - #23 const
INFO  05:55:06,458 - #27 char
INFO  05:55:06,458 - #27 pet1
INFO  05:55:06,458 - #12 =
INFO  05:55:06,458 - #28 c
INFO  05:55:06,458 - #5 ;
INFO  05:55:06,458 - #27 int
INFO  05:55:06,458 - #27 niz
INFO  05:55:06,458 - #20 [
INFO  05:55:06,458 - #21 ]
INFO  05:55:06,458 - #8 ,
INFO  05:55:06,458 - #27 niz2
INFO  05:55:06,458 - #20 [
INFO  05:55:06,458 - #21 ]
INFO  05:55:06,458 - #8 ,
INFO  05:55:06,458 - #27 a
INFO  05:55:06,459 - #8 ,
INFO  05:55:06,459 - #27 b
INFO  05:55:06,459 - #5 ;
INFO  05:55:06,459 - #27 char
INFO  05:55:06,459 - #27 nizch
INFO  05:55:06,459 - #20 [
INFO  05:55:06,459 - #21 ]
INFO  05:55:06,459 - #8 ,
INFO  05:55:06,459 - #27 c
INFO  05:55:06,459 - #5 ;
INFO  05:55:06,459 - #27 bool
INFO  05:55:06,459 - #27 s1
INFO  05:55:06,459 - #5 ;
INFO  05:55:06,459 - #27 bool
INFO  05:55:06,459 - #27 nizbool
INFO  05:55:06,459 - #20 [
INFO  05:55:06,460 - #21 ]
INFO  05:55:06,460 - #5 ;
INFO  05:55:06,460 - #3 {
INFO  05:55:06,460 - #13 void
INFO  05:55:06,460 - #27 main
INFO  05:55:06,460 - #6 (
INFO  05:55:06,460 - #7 )
INFO  05:55:06,460 - #27 int
INFO  05:55:06,460 - #27 bodovi
INFO  05:55:06,460 - #5 ;
INFO  05:55:06,460 - #27 bool
INFO  05:55:06,461 - #27 bt
INFO  05:55:06,461 - #5 ;
INFO  05:55:06,461 - #27 int
INFO  05:55:06,461 - #27 s
INFO  05:55:06,461 - #5 ;
INFO  05:55:06,461 - #3 {
INFO  05:55:06,461 - #27 s
INFO  05:55:06,461 - #12 =
INFO  05:55:06,461 - #26 32
INFO  05:55:06,461 - #5 ;
INFO  05:55:06,461 - #27 s
INFO  05:55:06,461 - #12 =
INFO  05:55:06,462 - #19 -
INFO  05:55:06,462 - #27 s
INFO  05:55:06,462 - #9 print
INFO  05:55:06,462 - #6 (
INFO  05:55:06,462 - #27 s
INFO  05:55:06,462 - #7 )
INFO  05:55:06,462 - #5 ;
INFO  05:55:06,462 - #4 }
INFO  05:55:06,462 - #4 }
INFO  05:55:38,622 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:55:38,665 - #2 program
INFO  05:55:38,665 - #27 MJProgram
INFO  05:55:38,665 - #23 const
INFO  05:55:38,667 - #27 int
INFO  05:55:38,667 - #27 nula
INFO  05:55:38,668 - #12 =
INFO  05:55:38,668 - #26 0
INFO  05:55:38,668 - #5 ;
INFO  05:55:38,668 - #23 const
INFO  05:55:38,668 - #27 int
INFO  05:55:38,668 - #27 jedan
INFO  05:55:38,668 - #12 =
INFO  05:55:38,668 - #26 1
INFO  05:55:38,669 - #5 ;
INFO  05:55:38,669 - #23 const
INFO  05:55:38,669 - #27 int
INFO  05:55:38,669 - #27 pet
INFO  05:55:38,669 - #12 =
INFO  05:55:38,669 - #26 5
INFO  05:55:38,669 - #5 ;
INFO  05:55:38,669 - #23 const
INFO  05:55:38,669 - #27 char
INFO  05:55:38,669 - #27 pet1
INFO  05:55:38,669 - #12 =
INFO  05:55:38,669 - #28 c
INFO  05:55:38,669 - #5 ;
INFO  05:55:38,670 - #27 int
INFO  05:55:38,670 - #27 niz
INFO  05:55:38,670 - #20 [
INFO  05:55:38,670 - #21 ]
INFO  05:55:38,670 - #8 ,
INFO  05:55:38,670 - #27 niz2
INFO  05:55:38,670 - #20 [
INFO  05:55:38,670 - #21 ]
INFO  05:55:38,670 - #8 ,
INFO  05:55:38,670 - #27 a
INFO  05:55:38,670 - #8 ,
INFO  05:55:38,670 - #27 b
INFO  05:55:38,671 - #5 ;
INFO  05:55:38,671 - #27 char
INFO  05:55:38,671 - #27 nizch
INFO  05:55:38,671 - #20 [
INFO  05:55:38,671 - #21 ]
INFO  05:55:38,671 - #8 ,
INFO  05:55:38,671 - #27 c
INFO  05:55:38,671 - #5 ;
INFO  05:55:38,671 - #27 bool
INFO  05:55:38,671 - #27 s1
INFO  05:55:38,671 - #5 ;
INFO  05:55:38,672 - #27 bool
INFO  05:55:38,672 - #27 nizbool
INFO  05:55:38,672 - #20 [
INFO  05:55:38,672 - #21 ]
INFO  05:55:38,672 - #5 ;
INFO  05:55:38,672 - #3 {
INFO  05:55:38,672 - #13 void
INFO  05:55:38,673 - #27 main
INFO  05:55:38,673 - #6 (
INFO  05:55:38,673 - #7 )
INFO  05:55:38,673 - #27 int
INFO  05:55:38,673 - #27 bodovi
INFO  05:55:38,673 - #5 ;
INFO  05:55:38,674 - #27 bool
INFO  05:55:38,674 - #27 bt
INFO  05:55:38,674 - #5 ;
INFO  05:55:38,674 - #27 int
INFO  05:55:38,674 - #27 s
INFO  05:55:38,674 - #5 ;
INFO  05:55:38,674 - #3 {
INFO  05:55:38,674 - #27 s
INFO  05:55:38,675 - #12 =
INFO  05:55:38,675 - #26 32
INFO  05:55:38,675 - #5 ;
INFO  05:55:38,676 - #27 s
INFO  05:55:38,676 - #12 =
INFO  05:55:38,676 - #19 -
INFO  05:55:38,676 - #27 s
INFO  05:55:38,676 - #9 print
ERROR 05:55:38,676 - 
Sintaksna greska na liniji 21
ERROR 05:55:38,676 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 21
INFO  05:56:00,679 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:56:00,714 - #2 program
INFO  05:56:00,714 - #27 MJProgram
INFO  05:56:00,714 - #23 const
INFO  05:56:00,716 - #27 int
INFO  05:56:00,716 - #27 nula
INFO  05:56:00,717 - #12 =
INFO  05:56:00,717 - #26 0
INFO  05:56:00,717 - #5 ;
INFO  05:56:00,717 - #23 const
INFO  05:56:00,717 - #27 int
INFO  05:56:00,717 - #27 jedan
INFO  05:56:00,718 - #12 =
INFO  05:56:00,718 - #26 1
INFO  05:56:00,718 - #5 ;
INFO  05:56:00,718 - #23 const
INFO  05:56:00,718 - #27 int
INFO  05:56:00,718 - #27 pet
INFO  05:56:00,718 - #12 =
INFO  05:56:00,718 - #26 5
INFO  05:56:00,718 - #5 ;
INFO  05:56:00,718 - #23 const
INFO  05:56:00,718 - #27 char
INFO  05:56:00,718 - #27 pet1
INFO  05:56:00,719 - #12 =
INFO  05:56:00,719 - #28 c
INFO  05:56:00,719 - #5 ;
INFO  05:56:00,719 - #27 int
INFO  05:56:00,719 - #27 niz
INFO  05:56:00,719 - #20 [
INFO  05:56:00,719 - #21 ]
INFO  05:56:00,719 - #8 ,
INFO  05:56:00,720 - #27 niz2
INFO  05:56:00,720 - #20 [
INFO  05:56:00,720 - #21 ]
INFO  05:56:00,720 - #8 ,
INFO  05:56:00,720 - #27 a
INFO  05:56:00,720 - #8 ,
INFO  05:56:00,720 - #27 b
INFO  05:56:00,720 - #5 ;
INFO  05:56:00,720 - #27 char
INFO  05:56:00,721 - #27 nizch
INFO  05:56:00,721 - #20 [
INFO  05:56:00,721 - #21 ]
INFO  05:56:00,721 - #8 ,
INFO  05:56:00,721 - #27 c
INFO  05:56:00,721 - #5 ;
INFO  05:56:00,721 - #27 bool
INFO  05:56:00,721 - #27 s1
INFO  05:56:00,722 - #5 ;
INFO  05:56:00,722 - #27 bool
INFO  05:56:00,722 - #27 nizbool
INFO  05:56:00,722 - #20 [
INFO  05:56:00,722 - #21 ]
INFO  05:56:00,722 - #5 ;
INFO  05:56:00,722 - #3 {
INFO  05:56:00,722 - #13 void
INFO  05:56:00,723 - #27 main
INFO  05:56:00,723 - #6 (
INFO  05:56:00,724 - #7 )
INFO  05:56:00,724 - #27 int
INFO  05:56:00,724 - #27 bodovi
INFO  05:56:00,724 - #5 ;
INFO  05:56:00,724 - #27 bool
INFO  05:56:00,724 - #27 bt
INFO  05:56:00,724 - #5 ;
INFO  05:56:00,724 - #27 int
INFO  05:56:00,724 - #27 s
INFO  05:56:00,724 - #5 ;
INFO  05:56:00,724 - #3 {
INFO  05:56:00,725 - #27 s
INFO  05:56:00,726 - #12 =
INFO  05:56:00,726 - #26 32
INFO  05:56:00,726 - #5 ;
INFO  05:56:00,726 - #27 s
INFO  05:56:00,726 - #12 =
INFO  05:56:00,726 - #19 -
INFO  05:56:00,726 - #27 s
INFO  05:56:00,727 - #4 }
ERROR 05:56:00,727 - 
Sintaksna greska na liniji 34
ERROR 05:56:00,727 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 34
INFO  05:59:16,141 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  05:59:16,181 - #2 program
INFO  05:59:16,181 - #27 MJProgram
INFO  05:59:16,181 - #23 const
INFO  05:59:16,182 - #27 int
INFO  05:59:16,182 - #27 nula
INFO  05:59:16,183 - #12 =
INFO  05:59:16,183 - #26 0
INFO  05:59:16,183 - #5 ;
INFO  05:59:16,183 - #23 const
INFO  05:59:16,184 - #27 int
INFO  05:59:16,184 - #27 jedan
INFO  05:59:16,184 - #12 =
INFO  05:59:16,184 - #26 1
INFO  05:59:16,184 - #5 ;
INFO  05:59:16,184 - #23 const
INFO  05:59:16,184 - #27 int
INFO  05:59:16,184 - #27 pet
INFO  05:59:16,184 - #12 =
INFO  05:59:16,184 - #26 5
INFO  05:59:16,184 - #5 ;
INFO  05:59:16,184 - #23 const
INFO  05:59:16,185 - #27 char
INFO  05:59:16,185 - #27 pet1
INFO  05:59:16,185 - #12 =
INFO  05:59:16,185 - #28 c
INFO  05:59:16,185 - #5 ;
INFO  05:59:16,185 - #27 int
INFO  05:59:16,185 - #27 niz
INFO  05:59:16,185 - #20 [
INFO  05:59:16,185 - #21 ]
INFO  05:59:16,185 - #8 ,
INFO  05:59:16,185 - #27 niz2
INFO  05:59:16,185 - #20 [
INFO  05:59:16,186 - #21 ]
INFO  05:59:16,186 - #8 ,
INFO  05:59:16,186 - #27 a
INFO  05:59:16,186 - #8 ,
INFO  05:59:16,186 - #27 b
INFO  05:59:16,186 - #5 ;
INFO  05:59:16,186 - #27 char
INFO  05:59:16,186 - #27 nizch
INFO  05:59:16,187 - #20 [
INFO  05:59:16,187 - #21 ]
INFO  05:59:16,187 - #8 ,
INFO  05:59:16,187 - #27 c
INFO  05:59:16,187 - #5 ;
INFO  05:59:16,187 - #27 bool
INFO  05:59:16,187 - #27 s1
INFO  05:59:16,187 - #5 ;
INFO  05:59:16,187 - #27 bool
INFO  05:59:16,187 - #27 nizbool
INFO  05:59:16,187 - #20 [
INFO  05:59:16,187 - #21 ]
INFO  05:59:16,187 - #5 ;
INFO  05:59:16,187 - #3 {
INFO  05:59:16,188 - #13 void
INFO  05:59:16,188 - #27 main
INFO  05:59:16,189 - #6 (
INFO  05:59:16,189 - #7 )
INFO  05:59:16,189 - #27 int
INFO  05:59:16,189 - #27 bodovi
INFO  05:59:16,189 - #5 ;
INFO  05:59:16,189 - #27 bool
INFO  05:59:16,189 - #27 bt
INFO  05:59:16,189 - #5 ;
INFO  05:59:16,189 - #27 int
INFO  05:59:16,189 - #27 s
INFO  05:59:16,189 - #5 ;
INFO  05:59:16,189 - #3 {
INFO  05:59:16,189 - #27 s
INFO  05:59:16,190 - #12 =
INFO  05:59:16,191 - #26 32
INFO  05:59:16,191 - #5 ;
INFO  05:59:16,191 - #27 s
INFO  05:59:16,191 - #12 =
INFO  05:59:16,191 - #19 -
INFO  05:59:16,191 - #27 s
INFO  05:59:16,191 - #5 ;
INFO  05:59:16,192 - #4 }
INFO  05:59:16,192 - #4 }
INFO  05:59:16,199 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               s
              ) [DesignatorIDENT]
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   32
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        DesignatorStmt(
          Assignment(
            DesignatorIDENT(
             s
            ) [DesignatorIDENT]
            TermExprMinus(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   s
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExprMinus]
          ) [Assignment]
        ) [DesignatorStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  05:59:16,200 - ===================================
INFO  05:59:16,202 - Deklarisana je konsanta int nula = 0
INFO  05:59:16,203 - Deklarisana je konsanta int jedan = 1
INFO  05:59:16,203 - Deklarisana je konsanta int pet = 5
INFO  05:59:16,203 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  05:59:16,203 - Deklarisan je niz niz
INFO  05:59:16,203 - Deklarisan je niz niz2
INFO  05:59:16,203 - Deklarisana promenljiva a
INFO  05:59:16,203 - Deklarisana promenljiva b
INFO  05:59:16,203 - Deklarisan je niz nizch
INFO  05:59:16,203 - Deklarisana promenljiva c
INFO  05:59:16,203 - Deklarisana promenljiva s1
INFO  05:59:16,203 - Deklarisan je niz nizbool
INFO  05:59:16,203 - Obradjuje se funkcija main na liniji 13
INFO  05:59:16,203 - Deklarisana promenljiva bodovi
INFO  05:59:16,203 - Deklarisana promenljiva bt
INFO  05:59:16,204 - Deklarisana promenljiva s
INFO  05:59:16,204 - Izvrsena negacija  na liniji 20
INFO  05:59:16,204 -  Print count calls = 0
INFO  05:59:16,204 -  Deklarisanih promenljivih ima = 11
INFO  05:59:16,204 - ===================================
INFO  05:59:16,209 - Parsiranje uspesno zavrseno!
INFO  06:01:00,473 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:01:00,517 - #2 program
INFO  06:01:00,517 - #27 MJProgram
INFO  06:01:00,517 - #23 const
INFO  06:01:00,519 - #27 int
INFO  06:01:00,519 - #27 nula
INFO  06:01:00,520 - #12 =
INFO  06:01:00,520 - #26 0
INFO  06:01:00,520 - #5 ;
INFO  06:01:00,520 - #23 const
INFO  06:01:00,520 - #27 int
INFO  06:01:00,520 - #27 jedan
INFO  06:01:00,520 - #12 =
INFO  06:01:00,521 - #26 1
INFO  06:01:00,521 - #5 ;
INFO  06:01:00,521 - #23 const
INFO  06:01:00,521 - #27 int
INFO  06:01:00,521 - #27 pet
INFO  06:01:00,521 - #12 =
INFO  06:01:00,521 - #26 5
INFO  06:01:00,521 - #5 ;
INFO  06:01:00,521 - #23 const
INFO  06:01:00,521 - #27 char
INFO  06:01:00,521 - #27 pet1
INFO  06:01:00,521 - #12 =
INFO  06:01:00,522 - #28 c
INFO  06:01:00,522 - #5 ;
INFO  06:01:00,522 - #27 int
INFO  06:01:00,522 - #27 niz
INFO  06:01:00,522 - #20 [
INFO  06:01:00,522 - #21 ]
INFO  06:01:00,522 - #8 ,
INFO  06:01:00,522 - #27 niz2
INFO  06:01:00,522 - #20 [
INFO  06:01:00,522 - #21 ]
INFO  06:01:00,522 - #8 ,
INFO  06:01:00,523 - #27 a
INFO  06:01:00,523 - #8 ,
INFO  06:01:00,523 - #27 b
INFO  06:01:00,523 - #5 ;
INFO  06:01:00,523 - #27 char
INFO  06:01:00,524 - #27 nizch
INFO  06:01:00,524 - #20 [
INFO  06:01:00,524 - #21 ]
INFO  06:01:00,524 - #8 ,
INFO  06:01:00,524 - #27 c
INFO  06:01:00,524 - #5 ;
INFO  06:01:00,524 - #27 bool
INFO  06:01:00,524 - #27 s1
INFO  06:01:00,524 - #5 ;
INFO  06:01:00,524 - #27 bool
INFO  06:01:00,524 - #27 nizbool
INFO  06:01:00,524 - #20 [
INFO  06:01:00,525 - #21 ]
INFO  06:01:00,525 - #5 ;
INFO  06:01:00,525 - #3 {
INFO  06:01:00,525 - #13 void
INFO  06:01:00,526 - #27 main
INFO  06:01:00,526 - #6 (
INFO  06:01:00,526 - #7 )
INFO  06:01:00,526 - #27 int
INFO  06:01:00,526 - #27 bodovi
INFO  06:01:00,526 - #5 ;
INFO  06:01:00,527 - #27 bool
INFO  06:01:00,527 - #27 bt
INFO  06:01:00,527 - #5 ;
INFO  06:01:00,527 - #27 int
INFO  06:01:00,527 - #27 s
INFO  06:01:00,527 - #5 ;
INFO  06:01:00,527 - #3 {
INFO  06:01:00,527 - #27 s
INFO  06:01:00,528 - #12 =
INFO  06:01:00,528 - #26 32
INFO  06:01:00,528 - #5 ;
INFO  06:01:00,529 - #27 s
INFO  06:01:00,529 - #12 =
INFO  06:01:00,529 - #19 -
INFO  06:01:00,529 - #27 s
INFO  06:01:00,529 - #5 ;
INFO  06:01:00,529 - #9 print
INFO  06:01:00,529 - #6 (
INFO  06:01:00,529 - #27 s
INFO  06:01:00,529 - #7 )
INFO  06:01:00,530 - #5 ;
INFO  06:01:00,530 - #4 }
INFO  06:01:00,531 - #4 }
INFO  06:01:00,539 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 s
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     32
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               s
              ) [DesignatorIDENT]
              TermExprMinus(
                TermFactor(
                  Var(
                    DesignatorIDENT(
                     s
                    ) [DesignatorIDENT]
                  ) [Var]
                ) [TermFactor]
              ) [TermExprMinus]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   s
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:01:00,540 - ===================================
INFO  06:01:00,543 - Deklarisana je konsanta int nula = 0
INFO  06:01:00,543 - Deklarisana je konsanta int jedan = 1
INFO  06:01:00,543 - Deklarisana je konsanta int pet = 5
INFO  06:01:00,543 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:01:00,543 - Deklarisan je niz niz
INFO  06:01:00,543 - Deklarisan je niz niz2
INFO  06:01:00,543 - Deklarisana promenljiva a
INFO  06:01:00,543 - Deklarisana promenljiva b
INFO  06:01:00,544 - Deklarisan je niz nizch
INFO  06:01:00,544 - Deklarisana promenljiva c
INFO  06:01:00,544 - Deklarisana promenljiva s1
INFO  06:01:00,544 - Deklarisan je niz nizbool
INFO  06:01:00,544 - Obradjuje se funkcija main na liniji 13
INFO  06:01:00,544 - Deklarisana promenljiva bodovi
INFO  06:01:00,544 - Deklarisana promenljiva bt
INFO  06:01:00,544 - Deklarisana promenljiva s
INFO  06:01:00,544 - Izvrsena negacija  na liniji 20
INFO  06:01:00,544 -  Print count calls = 1
INFO  06:01:00,544 -  Deklarisanih promenljivih ima = 11
INFO  06:01:00,544 - ===================================
INFO  06:01:00,549 - Parsiranje uspesno zavrseno!
INFO  06:02:47,683 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:02:47,721 - #2 program
INFO  06:02:47,721 - #27 MJProgram
INFO  06:02:47,721 - #23 const
INFO  06:02:47,722 - #27 int
INFO  06:02:47,722 - #27 nula
INFO  06:02:47,723 - #12 =
INFO  06:02:47,723 - #26 0
INFO  06:02:47,723 - #5 ;
INFO  06:02:47,723 - #23 const
INFO  06:02:47,724 - #27 int
INFO  06:02:47,724 - #27 jedan
INFO  06:02:47,724 - #12 =
INFO  06:02:47,724 - #26 1
INFO  06:02:47,724 - #5 ;
INFO  06:02:47,724 - #23 const
INFO  06:02:47,724 - #27 int
INFO  06:02:47,724 - #27 pet
INFO  06:02:47,724 - #12 =
INFO  06:02:47,724 - #26 5
INFO  06:02:47,724 - #5 ;
INFO  06:02:47,724 - #23 const
INFO  06:02:47,724 - #27 char
INFO  06:02:47,725 - #27 pet1
INFO  06:02:47,725 - #12 =
INFO  06:02:47,725 - #28 c
INFO  06:02:47,725 - #5 ;
INFO  06:02:47,725 - #27 int
INFO  06:02:47,725 - #27 niz
INFO  06:02:47,725 - #20 [
INFO  06:02:47,725 - #21 ]
INFO  06:02:47,725 - #8 ,
INFO  06:02:47,725 - #27 niz2
INFO  06:02:47,725 - #20 [
INFO  06:02:47,726 - #21 ]
INFO  06:02:47,726 - #8 ,
INFO  06:02:47,726 - #27 a
INFO  06:02:47,726 - #8 ,
INFO  06:02:47,726 - #27 b
INFO  06:02:47,726 - #5 ;
INFO  06:02:47,726 - #27 char
INFO  06:02:47,727 - #27 nizch
INFO  06:02:47,727 - #20 [
INFO  06:02:47,727 - #21 ]
INFO  06:02:47,727 - #8 ,
INFO  06:02:47,727 - #27 c
INFO  06:02:47,727 - #5 ;
INFO  06:02:47,727 - #27 bool
INFO  06:02:47,727 - #27 s1
INFO  06:02:47,727 - #5 ;
INFO  06:02:47,728 - #27 bool
INFO  06:02:47,728 - #27 nizbool
INFO  06:02:47,728 - #20 [
INFO  06:02:47,728 - #21 ]
INFO  06:02:47,728 - #5 ;
INFO  06:02:47,728 - #3 {
INFO  06:02:47,728 - #13 void
INFO  06:02:47,729 - #27 main
INFO  06:02:47,729 - #6 (
INFO  06:02:47,729 - #7 )
INFO  06:02:47,730 - #27 int
INFO  06:02:47,730 - #27 bodovi
INFO  06:02:47,730 - #5 ;
INFO  06:02:47,730 - #27 bool
INFO  06:02:47,730 - #27 bt
INFO  06:02:47,730 - #5 ;
INFO  06:02:47,730 - #27 int
INFO  06:02:47,730 - #27 s
INFO  06:02:47,730 - #5 ;
INFO  06:02:47,730 - #3 {
INFO  06:02:47,731 - #27 a
INFO  06:02:47,732 - #12 =
INFO  06:02:47,732 - #26 2
INFO  06:02:47,732 - #5 ;
INFO  06:02:47,732 - #27 bodovi
INFO  06:02:47,732 - #12 =
INFO  06:02:47,733 - #26 9
INFO  06:02:47,733 - #5 ;
INFO  06:02:47,733 - #27 bodovi
INFO  06:02:47,733 - #12 =
INFO  06:02:47,733 - #19 -
INFO  06:02:47,733 - #27 bodovi
INFO  06:02:47,733 - #11 +
INFO  06:02:47,733 - #6 (
INFO  06:02:47,734 - #27 pet
INFO  06:02:47,735 - #14 *
INFO  06:02:47,735 - #27 a
INFO  06:02:47,736 - #17 /
INFO  06:02:47,736 - #26 2
INFO  06:02:47,737 - #19 -
INFO  06:02:47,737 - #27 jedan
INFO  06:02:47,738 - #7 )
INFO  06:02:47,738 - #14 *
INFO  06:02:47,738 - #27 bodovi
INFO  06:02:47,738 - #19 -
INFO  06:02:47,738 - #6 (
INFO  06:02:47,739 - #26 3
INFO  06:02:47,739 - #18 %
INFO  06:02:47,739 - #26 2
INFO  06:02:47,739 - #11 +
INFO  06:02:47,740 - #26 3
INFO  06:02:47,741 - #14 *
INFO  06:02:47,741 - #26 2
INFO  06:02:47,741 - #19 -
INFO  06:02:47,741 - #26 3
INFO  06:02:47,741 - #7 )
INFO  06:02:47,741 - #5 ;
INFO  06:02:47,741 - #9 print
INFO  06:02:47,741 - #6 (
INFO  06:02:47,741 - #27 bodovi
INFO  06:02:47,741 - #7 )
INFO  06:02:47,742 - #5 ;
INFO  06:02:47,742 - #4 }
INFO  06:02:47,743 - #4 }
INFO  06:02:47,749 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   a
                  ) [DesignatorIDENT]
                  TermExpr(
                    TermFactor(
                      FactorNUMBER(
                       2
                      ) [FactorNUMBER]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     9
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:02:47,750 - ===================================
INFO  06:02:47,752 - Deklarisana je konsanta int nula = 0
INFO  06:02:47,753 - Deklarisana je konsanta int jedan = 1
INFO  06:02:47,753 - Deklarisana je konsanta int pet = 5
INFO  06:02:47,753 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:02:47,753 - Deklarisan je niz niz
INFO  06:02:47,753 - Deklarisan je niz niz2
INFO  06:02:47,753 - Deklarisana promenljiva a
INFO  06:02:47,753 - Deklarisana promenljiva b
INFO  06:02:47,753 - Deklarisan je niz nizch
INFO  06:02:47,753 - Deklarisana promenljiva c
INFO  06:02:47,753 - Deklarisana promenljiva s1
INFO  06:02:47,753 - Deklarisan je niz nizbool
INFO  06:02:47,753 - Obradjuje se funkcija main na liniji 13
INFO  06:02:47,753 - Deklarisana promenljiva bodovi
INFO  06:02:47,753 - Deklarisana promenljiva bt
INFO  06:02:47,754 - Deklarisana promenljiva s
INFO  06:02:47,754 - Izvrsena negacija  na liniji 22
INFO  06:02:47,754 -  Print count calls = 1
INFO  06:02:47,754 -  Deklarisanih promenljivih ima = 11
INFO  06:02:47,754 - ===================================
INFO  06:02:47,759 - Parsiranje uspesno zavrseno!
INFO  06:03:26,555 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:03:26,620 - #2 program
INFO  06:03:26,620 - #27 MJProgram
INFO  06:03:26,621 - #23 const
INFO  06:03:26,622 - #27 int
INFO  06:03:26,623 - #27 nula
INFO  06:03:26,623 - #12 =
INFO  06:03:26,624 - #26 0
INFO  06:03:26,624 - #5 ;
INFO  06:03:26,624 - #23 const
INFO  06:03:26,624 - #27 int
INFO  06:03:26,625 - #27 jedan
INFO  06:03:26,625 - #12 =
INFO  06:03:26,625 - #26 1
INFO  06:03:26,625 - #5 ;
INFO  06:03:26,625 - #23 const
INFO  06:03:26,625 - #27 int
INFO  06:03:26,625 - #27 pet
INFO  06:03:26,625 - #12 =
INFO  06:03:26,626 - #26 5
INFO  06:03:26,626 - #5 ;
INFO  06:03:26,626 - #23 const
INFO  06:03:26,626 - #27 char
INFO  06:03:26,626 - #27 pet1
INFO  06:03:26,626 - #12 =
INFO  06:03:26,626 - #28 c
INFO  06:03:26,626 - #5 ;
INFO  06:03:26,627 - #27 int
INFO  06:03:26,627 - #27 niz
INFO  06:03:26,627 - #20 [
INFO  06:03:26,627 - #21 ]
INFO  06:03:26,627 - #8 ,
INFO  06:03:26,627 - #27 niz2
INFO  06:03:26,627 - #20 [
INFO  06:03:26,627 - #21 ]
INFO  06:03:26,627 - #8 ,
INFO  06:03:26,628 - #27 a
INFO  06:03:26,628 - #8 ,
INFO  06:03:26,628 - #27 b
INFO  06:03:26,628 - #5 ;
INFO  06:03:26,628 - #27 char
INFO  06:03:26,629 - #27 nizch
INFO  06:03:26,629 - #20 [
INFO  06:03:26,629 - #21 ]
INFO  06:03:26,629 - #8 ,
INFO  06:03:26,629 - #27 c
INFO  06:03:26,629 - #5 ;
INFO  06:03:26,629 - #27 bool
INFO  06:03:26,629 - #27 s1
INFO  06:03:26,629 - #5 ;
INFO  06:03:26,630 - #27 bool
INFO  06:03:26,630 - #27 nizbool
INFO  06:03:26,630 - #20 [
INFO  06:03:26,630 - #21 ]
INFO  06:03:26,630 - #5 ;
INFO  06:03:26,630 - #3 {
INFO  06:03:26,630 - #13 void
INFO  06:03:26,631 - #27 main
INFO  06:03:26,632 - #6 (
INFO  06:03:26,632 - #7 )
INFO  06:03:26,632 - #27 int
INFO  06:03:26,632 - #27 bodovi
INFO  06:03:26,632 - #5 ;
INFO  06:03:26,632 - #27 bool
INFO  06:03:26,632 - #27 bt
INFO  06:03:26,632 - #5 ;
INFO  06:03:26,633 - #27 int
INFO  06:03:26,633 - #27 s
INFO  06:03:26,633 - #5 ;
INFO  06:03:26,633 - #3 {
INFO  06:03:26,633 - #27 bodovi
INFO  06:03:26,634 - #12 =
INFO  06:03:26,634 - #26 9
INFO  06:03:26,634 - #5 ;
INFO  06:03:26,635 - #27 bodovi
INFO  06:03:26,635 - #12 =
INFO  06:03:26,635 - #19 -
INFO  06:03:26,635 - #27 bodovi
INFO  06:03:26,635 - #11 +
INFO  06:03:26,636 - #6 (
INFO  06:03:26,637 - #27 pet
INFO  06:03:26,638 - #14 *
INFO  06:03:26,638 - #27 a
INFO  06:03:26,640 - #17 /
INFO  06:03:26,640 - #26 2
INFO  06:03:26,641 - #19 -
INFO  06:03:26,641 - #27 jedan
INFO  06:03:26,642 - #7 )
INFO  06:03:26,642 - #14 *
INFO  06:03:26,643 - #27 bodovi
INFO  06:03:26,643 - #19 -
INFO  06:03:26,643 - #6 (
INFO  06:03:26,643 - #26 3
INFO  06:03:26,643 - #18 %
INFO  06:03:26,643 - #26 2
INFO  06:03:26,644 - #11 +
INFO  06:03:26,644 - #26 3
INFO  06:03:26,645 - #14 *
INFO  06:03:26,645 - #26 2
INFO  06:03:26,645 - #19 -
INFO  06:03:26,645 - #26 3
INFO  06:03:26,645 - #7 )
INFO  06:03:26,645 - #5 ;
INFO  06:03:26,645 - #9 print
INFO  06:03:26,645 - #6 (
INFO  06:03:26,645 - #27 bodovi
INFO  06:03:26,645 - #7 )
INFO  06:03:26,647 - #5 ;
INFO  06:03:26,647 - #4 }
INFO  06:03:26,647 - #4 }
INFO  06:03:26,658 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            DesignatorStmt(
              Assignment(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     9
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:03:26,659 - ===================================
INFO  06:03:26,662 - Deklarisana je konsanta int nula = 0
INFO  06:03:26,662 - Deklarisana je konsanta int jedan = 1
INFO  06:03:26,663 - Deklarisana je konsanta int pet = 5
INFO  06:03:26,663 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:03:26,663 - Deklarisan je niz niz
INFO  06:03:26,663 - Deklarisan je niz niz2
INFO  06:03:26,663 - Deklarisana promenljiva a
INFO  06:03:26,663 - Deklarisana promenljiva b
INFO  06:03:26,663 - Deklarisan je niz nizch
INFO  06:03:26,663 - Deklarisana promenljiva c
INFO  06:03:26,663 - Deklarisana promenljiva s1
INFO  06:03:26,663 - Deklarisan je niz nizbool
INFO  06:03:26,664 - Obradjuje se funkcija main na liniji 13
INFO  06:03:26,664 - Deklarisana promenljiva bodovi
INFO  06:03:26,664 - Deklarisana promenljiva bt
INFO  06:03:26,664 - Deklarisana promenljiva s
INFO  06:03:26,664 - Izvrsena negacija  na liniji 22
INFO  06:03:26,664 -  Print count calls = 1
INFO  06:03:26,664 -  Deklarisanih promenljivih ima = 11
INFO  06:03:26,664 - ===================================
INFO  06:03:26,671 - Parsiranje uspesno zavrseno!
INFO  06:23:40,277 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:23:40,316 - #2 program
INFO  06:23:40,316 - #27 MJProgram
INFO  06:23:40,316 - #23 const
INFO  06:23:40,317 - #27 int
INFO  06:23:40,318 - #27 nula
INFO  06:23:40,318 - #12 =
INFO  06:23:40,318 - #26 0
INFO  06:23:40,318 - #5 ;
INFO  06:23:40,319 - #23 const
INFO  06:23:40,319 - #27 int
INFO  06:23:40,319 - #27 jedan
INFO  06:23:40,319 - #12 =
INFO  06:23:40,319 - #26 1
INFO  06:23:40,319 - #5 ;
INFO  06:23:40,319 - #23 const
INFO  06:23:40,319 - #27 int
INFO  06:23:40,319 - #27 pet
INFO  06:23:40,319 - #12 =
INFO  06:23:40,320 - #26 5
INFO  06:23:40,320 - #5 ;
INFO  06:23:40,320 - #23 const
INFO  06:23:40,320 - #27 char
INFO  06:23:40,320 - #27 pet1
INFO  06:23:40,320 - #12 =
INFO  06:23:40,320 - #28 c
INFO  06:23:40,320 - #5 ;
INFO  06:23:40,320 - #27 int
INFO  06:23:40,320 - #27 niz
INFO  06:23:40,320 - #20 [
INFO  06:23:40,320 - #21 ]
INFO  06:23:40,321 - #8 ,
INFO  06:23:40,321 - #27 niz2
INFO  06:23:40,321 - #20 [
INFO  06:23:40,321 - #21 ]
INFO  06:23:40,321 - #8 ,
INFO  06:23:40,321 - #27 a
INFO  06:23:40,321 - #8 ,
INFO  06:23:40,321 - #27 b
INFO  06:23:40,321 - #5 ;
INFO  06:23:40,321 - #27 char
INFO  06:23:40,322 - #27 nizch
INFO  06:23:40,322 - #20 [
INFO  06:23:40,322 - #21 ]
INFO  06:23:40,322 - #8 ,
INFO  06:23:40,322 - #27 c
INFO  06:23:40,322 - #5 ;
INFO  06:23:40,322 - #27 bool
INFO  06:23:40,322 - #27 s1
INFO  06:23:40,322 - #5 ;
INFO  06:23:40,322 - #27 bool
INFO  06:23:40,322 - #27 nizbool
INFO  06:23:40,322 - #20 [
INFO  06:23:40,322 - #21 ]
INFO  06:23:40,323 - #5 ;
INFO  06:23:40,323 - #3 {
INFO  06:23:40,323 - #13 void
INFO  06:23:40,323 - #27 main
INFO  06:23:40,324 - #6 (
INFO  06:23:40,324 - #7 )
INFO  06:23:40,324 - #27 int
INFO  06:23:40,324 - #27 bodovi
INFO  06:23:40,324 - #5 ;
INFO  06:23:40,324 - #27 bool
INFO  06:23:40,324 - #27 bt
INFO  06:23:40,324 - #5 ;
INFO  06:23:40,324 - #27 int
INFO  06:23:40,324 - #27 s
INFO  06:23:40,324 - #5 ;
INFO  06:23:40,325 - #3 {
INFO  06:23:40,325 - #27 bodovi
INFO  06:23:40,325 - #12 =
INFO  06:23:40,326 - #26 0
INFO  06:23:40,326 - #5 ;
INFO  06:23:40,326 - #27 bodovi
INFO  06:23:40,326 - #15 ++
INFO  06:23:40,326 - #5 ;
INFO  06:23:40,326 - #27 bodovi
INFO  06:23:40,326 - #12 =
INFO  06:23:40,326 - #27 bodovi
INFO  06:23:40,326 - #11 +
INFO  06:23:40,327 - #27 jedan
INFO  06:23:40,328 - #5 ;
INFO  06:23:40,328 - #27 bodovi
INFO  06:23:40,328 - #12 =
INFO  06:23:40,328 - #27 bodovi
INFO  06:23:40,328 - #14 *
INFO  06:23:40,328 - #27 pet
INFO  06:23:40,329 - #5 ;
INFO  06:23:40,330 - #27 bodovi
INFO  06:23:40,330 - #16 --
INFO  06:23:40,330 - #5 ;
INFO  06:23:40,330 - #9 print
INFO  06:23:40,330 - #6 (
INFO  06:23:40,330 - #27 bodovi
INFO  06:23:40,330 - #7 )
INFO  06:23:40,331 - #5 ;
INFO  06:23:40,331 - #27 niz
INFO  06:23:40,331 - #12 =
INFO  06:23:40,331 - #32 new
INFO  06:23:40,331 - #27 int
INFO  06:23:40,332 - #20 [
INFO  06:23:40,333 - #26 3
INFO  06:23:40,333 - #21 ]
INFO  06:23:40,333 - #5 ;
INFO  06:23:40,333 - #22 read
INFO  06:23:40,333 - #6 (
INFO  06:23:40,333 - #27 bodovi
INFO  06:23:40,333 - #7 )
INFO  06:23:40,333 - #5 ;
INFO  06:23:40,333 - #27 bodovi
INFO  06:23:40,333 - #12 =
INFO  06:23:40,333 - #19 -
INFO  06:23:40,334 - #27 bodovi
INFO  06:23:40,334 - #11 +
INFO  06:23:40,334 - #6 (
INFO  06:23:40,334 - #27 pet
INFO  06:23:40,334 - #14 *
INFO  06:23:40,334 - #27 a
INFO  06:23:40,334 - #17 /
INFO  06:23:40,334 - #26 2
INFO  06:23:40,335 - #19 -
INFO  06:23:40,335 - #27 jedan
INFO  06:23:40,336 - #7 )
INFO  06:23:40,336 - #14 *
INFO  06:23:40,336 - #27 bodovi
INFO  06:23:40,336 - #19 -
INFO  06:23:40,336 - #6 (
INFO  06:23:40,336 - #26 3
INFO  06:23:40,336 - #18 %
INFO  06:23:40,336 - #26 2
INFO  06:23:40,337 - #11 +
INFO  06:23:40,338 - #26 3
INFO  06:23:40,338 - #14 *
INFO  06:23:40,338 - #26 2
INFO  06:23:40,338 - #19 -
INFO  06:23:40,338 - #26 3
INFO  06:23:40,338 - #7 )
INFO  06:23:40,338 - #5 ;
INFO  06:23:40,338 - #9 print
INFO  06:23:40,338 - #6 (
INFO  06:23:40,338 - #27 bodovi
INFO  06:23:40,338 - #7 )
INFO  06:23:40,338 - #5 ;
INFO  06:23:40,338 - #4 }
INFO  06:23:40,338 - #4 }
INFO  06:23:40,346 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          DesignatorStmt(
                            Assignment(
                              DesignatorIDENT(
                               bodovi
                              ) [DesignatorIDENT]
                              TermExpr(
                                TermFactor(
                                  FactorNUMBER(
                                   0
                                  ) [FactorNUMBER]
                                ) [TermFactor]
                              ) [TermExpr]
                            ) [Assignment]
                          ) [DesignatorStmt]
                        ) [Statements]
                        DesignatorStmt(
                          DesignatorINC(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                          ) [DesignatorINC]
                        ) [DesignatorStmt]
                      ) [Statements]
                      DesignatorStmt(
                        Assignment(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                          AddExpr(
                            TermExpr(
                              TermFactor(
                                Var(
                                  DesignatorIDENT(
                                   bodovi
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermFactor]
                            ) [TermExpr]
                            AddopPlus(
                            ) [AddopPlus]
                            TermFactor(
                              Var(
                                DesignatorIDENT(
                                 jedan
                                ) [DesignatorIDENT]
                              ) [Var]
                            ) [TermFactor]
                          ) [AddExpr]
                        ) [Assignment]
                      ) [DesignatorStmt]
                    ) [Statements]
                    DesignatorStmt(
                      Assignment(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              Var(
                                DesignatorIDENT(
                                 bodovi
                                ) [DesignatorIDENT]
                              ) [Var]
                            ) [TermFactor]
                            MulopMUL(
                            ) [MulopMUL]
                            Var(
                              DesignatorIDENT(
                               pet
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermMulop]
                        ) [TermExpr]
                      ) [Assignment]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    DesignatorDEC(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [DesignatorDEC]
                  ) [DesignatorStmt]
                ) [Statements]
                MatchedStmt(
                  PrintStmt(
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           bodovi
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                    NoConst(
                    ) [NoConst]
                  ) [PrintStmt]
                ) [MatchedStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   niz
                  ) [DesignatorIDENT]
                  TermExpr(
                    TermFactor(
                      FactorNEW(
                        Type(
                         int
                        ) [Type]
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [FactorNEW]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            MatchedStmt(
              StatementRead(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
              ) [StatementRead]
            ) [MatchedStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:23:40,346 - ===================================
INFO  06:23:40,349 - Deklarisana je konsanta int nula = 0
INFO  06:23:40,349 - Deklarisana je konsanta int jedan = 1
INFO  06:23:40,349 - Deklarisana je konsanta int pet = 5
INFO  06:23:40,349 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:23:40,349 - Deklarisan je niz niz
INFO  06:23:40,349 - Deklarisan je niz niz2
INFO  06:23:40,349 - Deklarisana promenljiva a
INFO  06:23:40,349 - Deklarisana promenljiva b
INFO  06:23:40,349 - Deklarisan je niz nizch
INFO  06:23:40,349 - Deklarisana promenljiva c
INFO  06:23:40,350 - Deklarisana promenljiva s1
INFO  06:23:40,350 - Deklarisan je niz nizbool
INFO  06:23:40,350 - Obradjuje se funkcija main na liniji 13
INFO  06:23:40,350 - Deklarisana promenljiva bodovi
INFO  06:23:40,350 - Deklarisana promenljiva bt
INFO  06:23:40,350 - Deklarisana promenljiva s
INFO  06:23:40,350 - Deklarisana je niz (uz pomoc NEW) na liniji 29
INFO  06:23:40,350 - Izvrsena negacija  na liniji 48
INFO  06:23:40,350 -  Print count calls = 2
INFO  06:23:40,350 -  Deklarisanih promenljivih ima = 12
INFO  06:23:40,350 - ===================================
INFO  06:23:40,356 - Parsiranje uspesno zavrseno!
INFO  06:30:56,101 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:30:56,143 - #2 program
INFO  06:30:56,143 - #27 MJProgram
INFO  06:30:56,143 - #23 const
INFO  06:30:56,144 - #27 int
INFO  06:30:56,144 - #27 nula
INFO  06:30:56,145 - #12 =
INFO  06:30:56,145 - #26 0
INFO  06:30:56,145 - #5 ;
INFO  06:30:56,146 - #23 const
INFO  06:30:56,146 - #27 int
INFO  06:30:56,146 - #27 jedan
INFO  06:30:56,146 - #12 =
INFO  06:30:56,146 - #26 1
INFO  06:30:56,146 - #5 ;
INFO  06:30:56,146 - #23 const
INFO  06:30:56,146 - #27 int
INFO  06:30:56,146 - #27 pet
INFO  06:30:56,146 - #12 =
INFO  06:30:56,147 - #26 5
INFO  06:30:56,147 - #5 ;
INFO  06:30:56,147 - #23 const
INFO  06:30:56,147 - #27 char
INFO  06:30:56,147 - #27 pet1
INFO  06:30:56,147 - #12 =
INFO  06:30:56,147 - #28 c
INFO  06:30:56,147 - #5 ;
INFO  06:30:56,147 - #27 int
INFO  06:30:56,147 - #27 niz
INFO  06:30:56,147 - #20 [
INFO  06:30:56,147 - #21 ]
INFO  06:30:56,148 - #8 ,
INFO  06:30:56,148 - #27 niz2
INFO  06:30:56,148 - #20 [
INFO  06:30:56,148 - #21 ]
INFO  06:30:56,148 - #8 ,
INFO  06:30:56,148 - #27 a
INFO  06:30:56,148 - #8 ,
INFO  06:30:56,148 - #27 b
INFO  06:30:56,148 - #5 ;
INFO  06:30:56,148 - #27 char
INFO  06:30:56,149 - #27 nizch
INFO  06:30:56,149 - #20 [
INFO  06:30:56,149 - #21 ]
INFO  06:30:56,149 - #8 ,
INFO  06:30:56,149 - #27 c
INFO  06:30:56,149 - #5 ;
INFO  06:30:56,149 - #27 bool
INFO  06:30:56,149 - #27 s1
INFO  06:30:56,149 - #5 ;
INFO  06:30:56,149 - #27 bool
INFO  06:30:56,149 - #27 nizbool
INFO  06:30:56,150 - #20 [
INFO  06:30:56,150 - #21 ]
INFO  06:30:56,150 - #5 ;
INFO  06:30:56,150 - #3 {
INFO  06:30:56,150 - #13 void
INFO  06:30:56,151 - #27 main
INFO  06:30:56,151 - #6 (
INFO  06:30:56,151 - #7 )
INFO  06:30:56,151 - #27 int
INFO  06:30:56,151 - #27 bodovi
INFO  06:30:56,151 - #5 ;
INFO  06:30:56,151 - #27 bool
INFO  06:30:56,152 - #27 bt
INFO  06:30:56,152 - #5 ;
INFO  06:30:56,152 - #27 int
INFO  06:30:56,152 - #27 s
INFO  06:30:56,152 - #5 ;
INFO  06:30:56,152 - #3 {
INFO  06:30:56,152 - #27 bodovi
INFO  06:30:56,153 - #12 =
INFO  06:30:56,153 - #26 9
INFO  06:30:56,153 - #5 ;
INFO  06:30:56,154 - #27 niz
INFO  06:30:56,154 - #12 =
INFO  06:30:56,154 - #32 new
INFO  06:30:56,154 - #27 int
INFO  06:30:56,154 - #20 [
INFO  06:30:56,154 - #26 3
INFO  06:30:56,154 - #21 ]
INFO  06:30:56,154 - #5 ;
INFO  06:30:56,154 - #27 niz
INFO  06:30:56,155 - #20 [
INFO  06:30:56,155 - #27 nula
INFO  06:30:56,155 - #21 ]
INFO  06:30:56,155 - #12 =
INFO  06:30:56,155 - #27 jedan
INFO  06:30:56,155 - #5 ;
INFO  06:30:56,155 - #27 niz
INFO  06:30:56,155 - #20 [
INFO  06:30:56,155 - #26 1
INFO  06:30:56,155 - #21 ]
INFO  06:30:56,155 - #12 =
INFO  06:30:56,155 - #26 2
INFO  06:30:56,155 - #5 ;
INFO  06:30:56,156 - #27 bodovi
INFO  06:30:56,156 - #12 =
INFO  06:30:56,156 - #27 niz
INFO  06:30:56,156 - #20 [
INFO  06:30:56,156 - #26 1
INFO  06:30:56,156 - #21 ]
INFO  06:30:56,156 - #17 /
INFO  06:30:56,156 - #27 niz
INFO  06:30:56,158 - #20 [
INFO  06:30:56,158 - #26 0
INFO  06:30:56,158 - #21 ]
INFO  06:30:56,158 - #5 ;
INFO  06:30:56,158 - #9 print
INFO  06:30:56,158 - #6 (
INFO  06:30:56,158 - #27 bodovi
INFO  06:30:56,158 - #7 )
INFO  06:30:56,159 - #5 ;
INFO  06:30:56,159 - #22 read
INFO  06:30:56,159 - #6 (
INFO  06:30:56,160 - #27 bodovi
INFO  06:30:56,160 - #7 )
INFO  06:30:56,160 - #5 ;
INFO  06:30:56,160 - #27 bodovi
INFO  06:30:56,160 - #12 =
INFO  06:30:56,160 - #19 -
INFO  06:30:56,160 - #27 bodovi
INFO  06:30:56,160 - #11 +
INFO  06:30:56,160 - #6 (
INFO  06:30:56,162 - #27 pet
INFO  06:30:56,162 - #14 *
INFO  06:30:56,162 - #27 a
INFO  06:30:56,163 - #17 /
INFO  06:30:56,163 - #26 2
INFO  06:30:56,163 - #19 -
INFO  06:30:56,163 - #27 jedan
INFO  06:30:56,163 - #7 )
INFO  06:30:56,164 - #14 *
INFO  06:30:56,164 - #27 bodovi
INFO  06:30:56,164 - #19 -
INFO  06:30:56,164 - #6 (
INFO  06:30:56,164 - #26 3
INFO  06:30:56,164 - #18 %
INFO  06:30:56,164 - #26 2
INFO  06:30:56,165 - #11 +
INFO  06:30:56,165 - #26 3
INFO  06:30:56,165 - #14 *
INFO  06:30:56,165 - #26 2
INFO  06:30:56,165 - #19 -
INFO  06:30:56,165 - #26 3
INFO  06:30:56,165 - #7 )
INFO  06:30:56,165 - #5 ;
INFO  06:30:56,165 - #9 print
INFO  06:30:56,165 - #6 (
INFO  06:30:56,165 - #27 bodovi
INFO  06:30:56,165 - #7 )
INFO  06:30:56,165 - #5 ;
INFO  06:30:56,166 - #4 }
INFO  06:30:56,166 - #4 }
INFO  06:30:56,172 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        DesignatorStmt(
                          Assignment(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 9
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [Assignment]
                        ) [DesignatorStmt]
                      ) [Statements]
                      DesignatorStmt(
                        Assignment(
                          DesignatorIDENT(
                           niz
                          ) [DesignatorIDENT]
                          TermExpr(
                            TermFactor(
                              FactorNEW(
                                Type(
                                 int
                                ) [Type]
                                TermExpr(
                                  TermFactor(
                                    FactorNUMBER(
                                     3
                                    ) [FactorNUMBER]
                                  ) [TermFactor]
                                ) [TermExpr]
                              ) [FactorNEW]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [Assignment]
                      ) [DesignatorStmt]
                    ) [Statements]
                    DesignatorStmt(
                      Assignment(
                        DesignatorExpr(
                         niz
                          TermExpr(
                            TermFactor(
                              Var(
                                DesignatorIDENT(
                                 nula
                                ) [DesignatorIDENT]
                              ) [Var]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [DesignatorExpr]
                        TermExpr(
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [Assignment]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    Assignment(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermMulop(
                        TermFactor(
                          Var(
                            DesignatorExpr(
                             niz
                              TermExpr(
                                TermFactor(
                                  FactorNUMBER(
                                   1
                                  ) [FactorNUMBER]
                                ) [TermFactor]
                              ) [TermExpr]
                            ) [DesignatorExpr]
                          ) [Var]
                        ) [TermFactor]
                        MulopDIV(
                        ) [MulopDIV]
                        Var(
                          DesignatorExpr(
                           niz
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 0
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [DesignatorExpr]
                        ) [Var]
                      ) [TermMulop]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              MatchedStmt(
                PrintStmt(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  NoConst(
                  ) [NoConst]
                ) [PrintStmt]
              ) [MatchedStmt]
            ) [Statements]
            MatchedStmt(
              StatementRead(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
              ) [StatementRead]
            ) [MatchedStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:30:56,173 - ===================================
INFO  06:30:56,175 - Deklarisana je konsanta int nula = 0
INFO  06:30:56,176 - Deklarisana je konsanta int jedan = 1
INFO  06:30:56,176 - Deklarisana je konsanta int pet = 5
INFO  06:30:56,176 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:30:56,176 - Deklarisan je niz niz
INFO  06:30:56,176 - Deklarisan je niz niz2
INFO  06:30:56,176 - Deklarisana promenljiva a
INFO  06:30:56,176 - Deklarisana promenljiva b
INFO  06:30:56,176 - Deklarisan je niz nizch
INFO  06:30:56,177 - Deklarisana promenljiva c
INFO  06:30:56,177 - Deklarisana promenljiva s1
INFO  06:30:56,177 - Deklarisan je niz nizbool
INFO  06:30:56,177 - Obradjuje se funkcija main na liniji 13
INFO  06:30:56,178 - Deklarisana promenljiva bodovi
INFO  06:30:56,178 - Deklarisana promenljiva bt
INFO  06:30:56,178 - Deklarisana promenljiva s
INFO  06:30:56,178 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:30:56,178 - Izvrsena negacija  na liniji 49
INFO  06:30:56,178 -  Print count calls = 2
INFO  06:30:56,178 -  Deklarisanih promenljivih ima = 12
INFO  06:30:56,178 - ===================================
INFO  06:30:56,183 - Parsiranje uspesno zavrseno!
INFO  06:32:23,174 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:32:23,229 - #2 program
INFO  06:32:23,229 - #27 MJProgram
INFO  06:32:23,229 - #23 const
INFO  06:32:23,231 - #27 int
INFO  06:32:23,231 - #27 nula
INFO  06:32:23,232 - #12 =
INFO  06:32:23,232 - #26 0
INFO  06:32:23,232 - #5 ;
INFO  06:32:23,232 - #23 const
INFO  06:32:23,232 - #27 int
INFO  06:32:23,233 - #27 jedan
INFO  06:32:23,233 - #12 =
INFO  06:32:23,233 - #26 1
INFO  06:32:23,233 - #5 ;
INFO  06:32:23,233 - #23 const
INFO  06:32:23,233 - #27 int
INFO  06:32:23,233 - #27 pet
INFO  06:32:23,233 - #12 =
INFO  06:32:23,233 - #26 5
INFO  06:32:23,233 - #5 ;
INFO  06:32:23,233 - #23 const
INFO  06:32:23,233 - #27 char
INFO  06:32:23,233 - #27 pet1
INFO  06:32:23,233 - #12 =
INFO  06:32:23,233 - #28 c
INFO  06:32:23,234 - #5 ;
INFO  06:32:23,234 - #27 int
INFO  06:32:23,234 - #27 niz
INFO  06:32:23,234 - #20 [
INFO  06:32:23,234 - #21 ]
INFO  06:32:23,234 - #8 ,
INFO  06:32:23,234 - #27 niz2
INFO  06:32:23,234 - #20 [
INFO  06:32:23,234 - #21 ]
INFO  06:32:23,234 - #8 ,
INFO  06:32:23,234 - #27 a
INFO  06:32:23,234 - #8 ,
INFO  06:32:23,235 - #27 b
INFO  06:32:23,235 - #5 ;
INFO  06:32:23,235 - #27 char
INFO  06:32:23,235 - #27 nizch
INFO  06:32:23,235 - #20 [
INFO  06:32:23,236 - #21 ]
INFO  06:32:23,236 - #8 ,
INFO  06:32:23,236 - #27 c
INFO  06:32:23,236 - #5 ;
INFO  06:32:23,236 - #27 bool
INFO  06:32:23,236 - #27 s1
INFO  06:32:23,236 - #5 ;
INFO  06:32:23,236 - #27 bool
INFO  06:32:23,236 - #27 nizbool
INFO  06:32:23,236 - #20 [
INFO  06:32:23,236 - #21 ]
INFO  06:32:23,236 - #5 ;
INFO  06:32:23,236 - #3 {
INFO  06:32:23,237 - #13 void
INFO  06:32:23,237 - #27 main
INFO  06:32:23,238 - #6 (
INFO  06:32:23,238 - #7 )
INFO  06:32:23,238 - #27 int
INFO  06:32:23,238 - #27 bodovi
INFO  06:32:23,238 - #5 ;
INFO  06:32:23,238 - #27 bool
INFO  06:32:23,239 - #27 bt
INFO  06:32:23,239 - #5 ;
INFO  06:32:23,239 - #27 int
INFO  06:32:23,239 - #27 s
INFO  06:32:23,239 - #5 ;
INFO  06:32:23,239 - #3 {
INFO  06:32:23,240 - #27 bodovi
INFO  06:32:23,241 - #12 =
INFO  06:32:23,241 - #26 9
INFO  06:32:23,241 - #5 ;
INFO  06:32:23,242 - #27 niz
INFO  06:32:23,242 - #12 =
INFO  06:32:23,242 - #32 new
INFO  06:32:23,242 - #27 int
INFO  06:32:23,242 - #20 [
INFO  06:32:23,242 - #26 3
INFO  06:32:23,242 - #21 ]
INFO  06:32:23,242 - #5 ;
INFO  06:32:23,243 - #27 niz
INFO  06:32:23,243 - #20 [
INFO  06:32:23,243 - #27 nula
INFO  06:32:23,243 - #21 ]
INFO  06:32:23,243 - #12 =
INFO  06:32:23,243 - #27 jedan
INFO  06:32:23,243 - #5 ;
INFO  06:32:23,244 - #27 niz
INFO  06:32:23,244 - #20 [
INFO  06:32:23,244 - #26 1
INFO  06:32:23,244 - #21 ]
INFO  06:32:23,244 - #12 =
INFO  06:32:23,244 - #26 2
INFO  06:32:23,244 - #5 ;
INFO  06:32:23,244 - #27 bodovi
INFO  06:32:23,244 - #12 =
INFO  06:32:23,245 - #27 niz
INFO  06:32:23,245 - #20 [
INFO  06:32:23,245 - #26 1
INFO  06:32:23,246 - #21 ]
INFO  06:32:23,247 - #17 /
INFO  06:32:23,247 - #27 niz
INFO  06:32:23,248 - #20 [
INFO  06:32:23,249 - #26 0
INFO  06:32:23,249 - #21 ]
INFO  06:32:23,249 - #5 ;
INFO  06:32:23,249 - #9 print
INFO  06:32:23,249 - #6 (
INFO  06:32:23,249 - #27 bodovi
INFO  06:32:23,249 - #7 )
INFO  06:32:23,250 - #5 ;
INFO  06:32:23,250 - #22 read
INFO  06:32:23,251 - #6 (
INFO  06:32:23,251 - #27 bodovi
INFO  06:32:23,251 - #7 )
INFO  06:32:23,251 - #5 ;
INFO  06:32:23,251 - #27 bodovi
INFO  06:32:23,251 - #12 =
INFO  06:32:23,251 - #19 -
INFO  06:32:23,251 - #27 bodovi
INFO  06:32:23,251 - #11 +
INFO  06:32:23,251 - #6 (
INFO  06:32:23,253 - #27 pet
INFO  06:32:23,253 - #14 *
INFO  06:32:23,253 - #27 a
INFO  06:32:23,254 - #17 /
INFO  06:32:23,254 - #26 2
INFO  06:32:23,254 - #19 -
INFO  06:32:23,255 - #27 jedan
INFO  06:32:23,256 - #7 )
INFO  06:32:23,256 - #14 *
INFO  06:32:23,256 - #27 bodovi
INFO  06:32:23,256 - #19 -
INFO  06:32:23,256 - #6 (
INFO  06:32:23,256 - #26 3
INFO  06:32:23,256 - #18 %
INFO  06:32:23,256 - #26 2
INFO  06:32:23,257 - #11 +
INFO  06:32:23,257 - #26 3
INFO  06:32:23,258 - #14 *
INFO  06:32:23,258 - #26 2
INFO  06:32:23,258 - #19 -
INFO  06:32:23,258 - #26 3
INFO  06:32:23,258 - #7 )
INFO  06:32:23,258 - #5 ;
INFO  06:32:23,258 - #9 print
INFO  06:32:23,258 - #6 (
INFO  06:32:23,258 - #27 bodovi
INFO  06:32:23,258 - #7 )
INFO  06:32:23,258 - #5 ;
INFO  06:32:23,258 - #4 }
INFO  06:32:23,258 - #4 }
INFO  06:32:23,271 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        DesignatorStmt(
                          Assignment(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 9
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [Assignment]
                        ) [DesignatorStmt]
                      ) [Statements]
                      DesignatorStmt(
                        Assignment(
                          DesignatorIDENT(
                           niz
                          ) [DesignatorIDENT]
                          TermExpr(
                            TermFactor(
                              FactorNEW(
                                Type(
                                 int
                                ) [Type]
                                TermExpr(
                                  TermFactor(
                                    FactorNUMBER(
                                     3
                                    ) [FactorNUMBER]
                                  ) [TermFactor]
                                ) [TermExpr]
                              ) [FactorNEW]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [Assignment]
                      ) [DesignatorStmt]
                    ) [Statements]
                    DesignatorStmt(
                      Assignment(
                        DesignatorExpr(
                         niz
                          TermExpr(
                            TermFactor(
                              Var(
                                DesignatorIDENT(
                                 nula
                                ) [DesignatorIDENT]
                              ) [Var]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [DesignatorExpr]
                        TermExpr(
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [Assignment]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    Assignment(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermMulop(
                        TermFactor(
                          Var(
                            DesignatorExpr(
                             niz
                              TermExpr(
                                TermFactor(
                                  FactorNUMBER(
                                   1
                                  ) [FactorNUMBER]
                                ) [TermFactor]
                              ) [TermExpr]
                            ) [DesignatorExpr]
                          ) [Var]
                        ) [TermFactor]
                        MulopDIV(
                        ) [MulopDIV]
                        Var(
                          DesignatorExpr(
                           niz
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 0
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [DesignatorExpr]
                        ) [Var]
                      ) [TermMulop]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              MatchedStmt(
                PrintStmt(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  NoConst(
                  ) [NoConst]
                ) [PrintStmt]
              ) [MatchedStmt]
            ) [Statements]
            MatchedStmt(
              StatementRead(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
              ) [StatementRead]
            ) [MatchedStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:32:23,273 - ===================================
INFO  06:32:23,288 - Deklarisana je konsanta int nula = 0
INFO  06:32:23,288 - Deklarisana je konsanta int jedan = 1
INFO  06:32:23,288 - Deklarisana je konsanta int pet = 5
INFO  06:32:23,288 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:32:23,288 - Deklarisan je niz niz
INFO  06:32:23,288 - Deklarisan je niz niz2
INFO  06:32:23,288 - Deklarisana promenljiva a
INFO  06:32:23,288 - Deklarisana promenljiva b
INFO  06:32:23,288 - Deklarisan je niz nizch
INFO  06:32:23,288 - Deklarisana promenljiva c
INFO  06:32:23,288 - Deklarisana promenljiva s1
INFO  06:32:23,288 - Deklarisan je niz nizbool
INFO  06:32:23,289 - Obradjuje se funkcija main na liniji 13
INFO  06:32:23,289 - Deklarisana promenljiva bodovi
INFO  06:32:23,289 - Deklarisana promenljiva bt
INFO  06:32:23,289 - Deklarisana promenljiva s
INFO  06:32:23,289 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:32:35,674 - Izvrsena negacija  na liniji 49
INFO  06:32:35,674 -  Print count calls = 2
INFO  06:32:35,674 -  Deklarisanih promenljivih ima = 12
INFO  06:32:35,675 - ===================================
INFO  06:39:40,032 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:39:40,071 - #2 program
INFO  06:39:40,072 - #27 MJProgram
INFO  06:39:40,072 - #23 const
INFO  06:39:40,073 - #27 int
INFO  06:39:40,073 - #27 nula
INFO  06:39:40,074 - #12 =
INFO  06:39:40,074 - #26 0
INFO  06:39:40,074 - #5 ;
INFO  06:39:40,075 - #23 const
INFO  06:39:40,075 - #27 int
INFO  06:39:40,075 - #27 jedan
INFO  06:39:40,075 - #12 =
INFO  06:39:40,075 - #26 1
INFO  06:39:40,075 - #5 ;
INFO  06:39:40,075 - #23 const
INFO  06:39:40,075 - #27 int
INFO  06:39:40,075 - #27 pet
INFO  06:39:40,075 - #12 =
INFO  06:39:40,075 - #26 5
INFO  06:39:40,076 - #5 ;
INFO  06:39:40,076 - #23 const
INFO  06:39:40,076 - #27 char
INFO  06:39:40,076 - #27 pet1
INFO  06:39:40,076 - #12 =
INFO  06:39:40,076 - #28 c
INFO  06:39:40,076 - #5 ;
INFO  06:39:40,076 - #27 int
INFO  06:39:40,076 - #27 niz
INFO  06:39:40,076 - #20 [
INFO  06:39:40,076 - #21 ]
INFO  06:39:40,076 - #8 ,
INFO  06:39:40,077 - #27 niz2
INFO  06:39:40,077 - #20 [
INFO  06:39:40,077 - #21 ]
INFO  06:39:40,077 - #8 ,
INFO  06:39:40,077 - #27 a
INFO  06:39:40,077 - #8 ,
INFO  06:39:40,077 - #27 b
INFO  06:39:40,077 - #5 ;
INFO  06:39:40,077 - #27 char
INFO  06:39:40,077 - #27 nizch
INFO  06:39:40,078 - #20 [
INFO  06:39:40,078 - #21 ]
INFO  06:39:40,078 - #8 ,
INFO  06:39:40,078 - #27 c
INFO  06:39:40,078 - #5 ;
INFO  06:39:40,078 - #27 bool
INFO  06:39:40,078 - #27 s1
INFO  06:39:40,078 - #5 ;
INFO  06:39:40,078 - #27 bool
INFO  06:39:40,078 - #27 nizbool
INFO  06:39:40,078 - #20 [
INFO  06:39:40,078 - #21 ]
INFO  06:39:40,078 - #5 ;
INFO  06:39:40,078 - #3 {
INFO  06:39:40,078 - #13 void
INFO  06:39:40,079 - #27 main
INFO  06:39:40,080 - #6 (
INFO  06:39:40,080 - #7 )
INFO  06:39:40,080 - #27 int
INFO  06:39:40,080 - #27 bodovi
INFO  06:39:40,080 - #5 ;
INFO  06:39:40,080 - #27 bool
INFO  06:39:40,080 - #27 bt
INFO  06:39:40,080 - #5 ;
INFO  06:39:40,081 - #27 int
INFO  06:39:40,081 - #27 s
INFO  06:39:40,081 - #5 ;
INFO  06:39:40,081 - #3 {
INFO  06:39:40,081 - #27 bodovi
INFO  06:39:40,082 - #12 =
INFO  06:39:40,083 - #26 9
INFO  06:39:40,083 - #5 ;
INFO  06:39:40,083 - #27 niz
INFO  06:39:40,084 - #12 =
INFO  06:39:40,084 - #32 new
INFO  06:39:40,084 - #27 int
INFO  06:39:40,084 - #20 [
INFO  06:39:40,084 - #26 3
INFO  06:39:40,084 - #21 ]
INFO  06:39:40,084 - #5 ;
INFO  06:39:40,085 - #27 niz
INFO  06:39:40,085 - #20 [
INFO  06:39:40,085 - #27 nula
INFO  06:39:40,085 - #21 ]
INFO  06:39:40,085 - #12 =
INFO  06:39:40,086 - #27 jedan
INFO  06:39:40,086 - #5 ;
INFO  06:39:40,086 - #27 niz
INFO  06:39:40,086 - #20 [
INFO  06:39:40,086 - #26 1
INFO  06:39:40,086 - #21 ]
INFO  06:39:40,086 - #12 =
INFO  06:39:40,086 - #26 2
INFO  06:39:40,086 - #5 ;
INFO  06:39:40,087 - #27 bodovi
INFO  06:39:40,087 - #12 =
INFO  06:39:40,087 - #27 niz
INFO  06:39:40,087 - #20 [
INFO  06:39:40,087 - #26 1
INFO  06:39:40,089 - #21 ]
INFO  06:39:40,089 - #17 /
INFO  06:39:40,089 - #27 niz
INFO  06:39:40,091 - #20 [
INFO  06:39:40,091 - #26 0
INFO  06:39:40,091 - #21 ]
INFO  06:39:40,091 - #5 ;
INFO  06:39:40,091 - #9 print
INFO  06:39:40,092 - #6 (
INFO  06:39:40,092 - #27 bodovi
INFO  06:39:40,092 - #7 )
INFO  06:39:40,093 - #5 ;
INFO  06:39:40,093 - #22 read
INFO  06:39:40,093 - #6 (
INFO  06:39:40,093 - #27 bodovi
INFO  06:39:40,093 - #7 )
INFO  06:39:40,093 - #5 ;
INFO  06:39:40,094 - #27 bodovi
INFO  06:39:40,094 - #12 =
INFO  06:39:40,094 - #19 -
INFO  06:39:40,094 - #27 bodovi
INFO  06:39:40,094 - #11 +
INFO  06:39:40,094 - #6 (
INFO  06:39:40,095 - #27 pet
INFO  06:39:40,096 - #14 *
INFO  06:39:40,096 - #27 a
INFO  06:39:40,096 - #17 /
INFO  06:39:40,097 - #26 2
INFO  06:39:40,097 - #19 -
INFO  06:39:40,097 - #27 jedan
INFO  06:39:40,098 - #7 )
INFO  06:39:40,098 - #14 *
INFO  06:39:40,098 - #27 bodovi
INFO  06:39:40,098 - #19 -
INFO  06:39:40,098 - #6 (
INFO  06:39:40,098 - #26 3
INFO  06:39:40,099 - #18 %
INFO  06:39:40,099 - #26 2
INFO  06:39:40,100 - #11 +
INFO  06:39:40,100 - #26 3
INFO  06:39:40,100 - #14 *
INFO  06:39:40,100 - #26 2
INFO  06:39:40,100 - #19 -
INFO  06:39:40,100 - #26 3
INFO  06:39:40,100 - #7 )
INFO  06:39:40,100 - #5 ;
INFO  06:39:40,100 - #9 print
INFO  06:39:40,100 - #6 (
INFO  06:39:40,100 - #27 bodovi
INFO  06:39:40,100 - #7 )
INFO  06:39:40,100 - #5 ;
INFO  06:39:40,100 - #4 }
INFO  06:39:40,101 - #4 }
INFO  06:39:40,109 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        DesignatorStmt(
                          Assignment(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 9
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [Assignment]
                        ) [DesignatorStmt]
                      ) [Statements]
                      DesignatorStmt(
                        Assignment(
                          DesignatorIDENT(
                           niz
                          ) [DesignatorIDENT]
                          TermExpr(
                            TermFactor(
                              FactorNEW(
                                Type(
                                 int
                                ) [Type]
                                TermExpr(
                                  TermFactor(
                                    FactorNUMBER(
                                     3
                                    ) [FactorNUMBER]
                                  ) [TermFactor]
                                ) [TermExpr]
                              ) [FactorNEW]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [Assignment]
                      ) [DesignatorStmt]
                    ) [Statements]
                    DesignatorStmt(
                      Assignment(
                        DesignatorExpr(
                         niz
                          TermExpr(
                            TermFactor(
                              Var(
                                DesignatorIDENT(
                                 nula
                                ) [DesignatorIDENT]
                              ) [Var]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [DesignatorExpr]
                        TermExpr(
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [Assignment]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    Assignment(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermMulop(
                        TermFactor(
                          Var(
                            DesignatorExpr(
                             niz
                              TermExpr(
                                TermFactor(
                                  FactorNUMBER(
                                   1
                                  ) [FactorNUMBER]
                                ) [TermFactor]
                              ) [TermExpr]
                            ) [DesignatorExpr]
                          ) [Var]
                        ) [TermFactor]
                        MulopDIV(
                        ) [MulopDIV]
                        Var(
                          DesignatorExpr(
                           niz
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 0
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [DesignatorExpr]
                        ) [Var]
                      ) [TermMulop]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              MatchedStmt(
                PrintStmt(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  NoConst(
                  ) [NoConst]
                ) [PrintStmt]
              ) [MatchedStmt]
            ) [Statements]
            MatchedStmt(
              StatementRead(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
              ) [StatementRead]
            ) [MatchedStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:39:40,110 - ===================================
INFO  06:39:40,114 - Deklarisana je konsanta int nula = 0
INFO  06:39:40,114 - Deklarisana je konsanta int jedan = 1
INFO  06:39:40,114 - Deklarisana je konsanta int pet = 5
INFO  06:39:40,114 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:39:40,114 - Deklarisan je niz niz
INFO  06:39:40,114 - Deklarisan je niz niz2
INFO  06:39:40,114 - Deklarisana promenljiva a
INFO  06:39:40,114 - Deklarisana promenljiva b
INFO  06:39:40,115 - Deklarisan je niz nizch
INFO  06:39:40,115 - Deklarisana promenljiva c
INFO  06:39:40,115 - Deklarisana promenljiva s1
INFO  06:39:40,115 - Deklarisan je niz nizbool
INFO  06:39:40,115 - Obradjuje se funkcija main na liniji 13
INFO  06:39:40,115 - Deklarisana promenljiva bodovi
INFO  06:39:40,115 - Deklarisana promenljiva bt
INFO  06:39:40,115 - Deklarisana promenljiva s
INFO  06:39:40,115 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:39:40,116 - Izvrsena negacija  na liniji 49
INFO  06:39:40,116 -  Print count calls = 2
INFO  06:39:40,116 -  Deklarisanih promenljivih ima = 12
INFO  06:39:40,116 - ===================================
INFO  06:39:40,122 - Parsiranje uspesno zavrseno!
INFO  06:39:48,938 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:39:48,974 - #2 program
INFO  06:39:48,974 - #27 MJProgram
INFO  06:39:48,974 - #23 const
INFO  06:39:48,976 - #27 int
INFO  06:39:48,976 - #27 nula
INFO  06:39:48,976 - #12 =
INFO  06:39:48,976 - #26 0
INFO  06:39:48,976 - #5 ;
INFO  06:39:48,977 - #23 const
INFO  06:39:48,977 - #27 int
INFO  06:39:48,977 - #27 jedan
INFO  06:39:48,977 - #12 =
INFO  06:39:48,977 - #26 1
INFO  06:39:48,977 - #5 ;
INFO  06:39:48,977 - #23 const
INFO  06:39:48,977 - #27 int
INFO  06:39:48,978 - #27 pet
INFO  06:39:48,978 - #12 =
INFO  06:39:48,978 - #26 5
INFO  06:39:48,978 - #5 ;
INFO  06:39:48,978 - #23 const
INFO  06:39:48,978 - #27 char
INFO  06:39:48,978 - #27 pet1
INFO  06:39:48,978 - #12 =
INFO  06:39:48,978 - #28 c
INFO  06:39:48,978 - #5 ;
INFO  06:39:48,978 - #27 int
INFO  06:39:48,978 - #27 niz
INFO  06:39:48,978 - #20 [
INFO  06:39:48,979 - #21 ]
INFO  06:39:48,979 - #8 ,
INFO  06:39:48,979 - #27 niz2
INFO  06:39:48,979 - #20 [
INFO  06:39:48,979 - #21 ]
INFO  06:39:48,979 - #8 ,
INFO  06:39:48,979 - #27 a
INFO  06:39:48,979 - #8 ,
INFO  06:39:48,979 - #27 b
INFO  06:39:48,979 - #5 ;
INFO  06:39:48,979 - #27 char
INFO  06:39:48,980 - #27 nizch
INFO  06:39:48,980 - #20 [
INFO  06:39:48,980 - #21 ]
INFO  06:39:48,980 - #8 ,
INFO  06:39:48,980 - #27 c
INFO  06:39:48,980 - #5 ;
INFO  06:39:48,980 - #27 bool
INFO  06:39:48,980 - #27 s1
INFO  06:39:48,980 - #5 ;
INFO  06:39:48,980 - #27 bool
INFO  06:39:48,980 - #27 nizbool
INFO  06:39:48,980 - #20 [
INFO  06:39:48,981 - #21 ]
INFO  06:39:48,981 - #5 ;
INFO  06:39:48,981 - #3 {
INFO  06:39:48,981 - #13 void
INFO  06:39:48,981 - #27 main
INFO  06:39:48,982 - #6 (
INFO  06:39:48,982 - #7 )
INFO  06:39:48,982 - #27 int
INFO  06:39:48,982 - #27 bodovi
INFO  06:39:48,982 - #5 ;
INFO  06:39:48,982 - #27 bool
INFO  06:39:48,982 - #27 bt
INFO  06:39:48,982 - #5 ;
INFO  06:39:48,982 - #27 int
INFO  06:39:48,982 - #27 s
INFO  06:39:48,982 - #5 ;
INFO  06:39:48,983 - #3 {
INFO  06:39:48,983 - #27 bodovi
INFO  06:39:48,983 - #12 =
INFO  06:39:48,983 - #26 9
INFO  06:39:48,984 - #5 ;
INFO  06:39:48,984 - #27 niz
INFO  06:39:48,984 - #12 =
INFO  06:39:48,984 - #32 new
INFO  06:39:48,984 - #27 int
INFO  06:39:48,984 - #20 [
INFO  06:39:48,984 - #26 3
INFO  06:39:48,984 - #21 ]
INFO  06:39:48,984 - #5 ;
INFO  06:39:48,985 - #27 niz
INFO  06:39:48,985 - #20 [
INFO  06:39:48,985 - #27 nula
INFO  06:39:48,985 - #21 ]
INFO  06:39:48,985 - #12 =
INFO  06:39:48,985 - #27 jedan
INFO  06:39:48,985 - #5 ;
INFO  06:39:48,985 - #27 niz
INFO  06:39:48,985 - #20 [
INFO  06:39:48,985 - #26 1
INFO  06:39:48,985 - #21 ]
INFO  06:39:48,985 - #12 =
INFO  06:39:48,985 - #26 2
INFO  06:39:48,986 - #5 ;
INFO  06:39:48,986 - #27 bodovi
INFO  06:39:48,986 - #12 =
INFO  06:39:48,986 - #27 niz
INFO  06:39:48,986 - #20 [
INFO  06:39:48,986 - #26 1
INFO  06:39:48,986 - #21 ]
INFO  06:39:48,986 - #17 /
INFO  06:39:48,986 - #27 niz
INFO  06:39:48,987 - #20 [
INFO  06:39:48,988 - #26 0
INFO  06:39:48,988 - #21 ]
INFO  06:39:48,988 - #5 ;
INFO  06:39:48,988 - #9 print
INFO  06:39:48,988 - #6 (
INFO  06:39:48,988 - #27 bodovi
INFO  06:39:48,988 - #7 )
INFO  06:39:48,989 - #5 ;
INFO  06:39:48,989 - #22 read
INFO  06:39:48,989 - #6 (
INFO  06:39:48,989 - #27 bodovi
INFO  06:39:48,990 - #7 )
INFO  06:39:48,990 - #5 ;
INFO  06:39:48,990 - #27 bodovi
INFO  06:39:48,990 - #12 =
INFO  06:39:48,990 - #19 -
INFO  06:39:48,990 - #27 bodovi
INFO  06:39:48,990 - #11 +
INFO  06:39:48,990 - #6 (
INFO  06:39:48,992 - #27 pet
INFO  06:39:48,992 - #14 *
INFO  06:39:48,992 - #27 a
INFO  06:39:48,992 - #17 /
INFO  06:39:48,993 - #26 2
INFO  06:39:48,993 - #19 -
INFO  06:39:48,993 - #27 jedan
INFO  06:39:48,993 - #7 )
INFO  06:39:48,994 - #14 *
INFO  06:39:48,994 - #27 bodovi
INFO  06:39:48,994 - #19 -
INFO  06:39:48,994 - #6 (
INFO  06:39:48,994 - #26 3
INFO  06:39:48,994 - #18 %
INFO  06:39:48,994 - #26 2
INFO  06:39:48,995 - #11 +
INFO  06:39:48,995 - #26 3
INFO  06:39:48,995 - #14 *
INFO  06:39:48,995 - #26 2
INFO  06:39:48,995 - #19 -
INFO  06:39:48,995 - #26 3
INFO  06:39:48,995 - #7 )
INFO  06:39:48,995 - #5 ;
INFO  06:39:48,995 - #9 print
INFO  06:39:48,995 - #6 (
INFO  06:39:48,995 - #27 bodovi
INFO  06:39:48,995 - #7 )
INFO  06:39:48,995 - #5 ;
INFO  06:39:48,995 - #4 }
INFO  06:39:48,996 - #4 }
INFO  06:39:49,002 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        DesignatorStmt(
                          Assignment(
                            DesignatorIDENT(
                             bodovi
                            ) [DesignatorIDENT]
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 9
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [Assignment]
                        ) [DesignatorStmt]
                      ) [Statements]
                      DesignatorStmt(
                        Assignment(
                          DesignatorIDENT(
                           niz
                          ) [DesignatorIDENT]
                          TermExpr(
                            TermFactor(
                              FactorNEW(
                                Type(
                                 int
                                ) [Type]
                                TermExpr(
                                  TermFactor(
                                    FactorNUMBER(
                                     3
                                    ) [FactorNUMBER]
                                  ) [TermFactor]
                                ) [TermExpr]
                              ) [FactorNEW]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [Assignment]
                      ) [DesignatorStmt]
                    ) [Statements]
                    DesignatorStmt(
                      Assignment(
                        DesignatorExpr(
                         niz
                          TermExpr(
                            TermFactor(
                              Var(
                                DesignatorIDENT(
                                 nula
                                ) [DesignatorIDENT]
                              ) [Var]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [DesignatorExpr]
                        TermExpr(
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [Assignment]
                    ) [DesignatorStmt]
                  ) [Statements]
                  DesignatorStmt(
                    Assignment(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [Assignment]
                  ) [DesignatorStmt]
                ) [Statements]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     bodovi
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermMulop(
                        TermFactor(
                          Var(
                            DesignatorExpr(
                             niz
                              TermExpr(
                                TermFactor(
                                  FactorNUMBER(
                                   1
                                  ) [FactorNUMBER]
                                ) [TermFactor]
                              ) [TermExpr]
                            ) [DesignatorExpr]
                          ) [Var]
                        ) [TermFactor]
                        MulopDIV(
                        ) [MulopDIV]
                        Var(
                          DesignatorExpr(
                           niz
                            TermExpr(
                              TermFactor(
                                FactorNUMBER(
                                 0
                                ) [FactorNUMBER]
                              ) [TermFactor]
                            ) [TermExpr]
                          ) [DesignatorExpr]
                        ) [Var]
                      ) [TermMulop]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              MatchedStmt(
                PrintStmt(
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                  NoConst(
                  ) [NoConst]
                ) [PrintStmt]
              ) [MatchedStmt]
            ) [Statements]
            MatchedStmt(
              StatementRead(
                DesignatorIDENT(
                 bodovi
                ) [DesignatorIDENT]
              ) [StatementRead]
            ) [MatchedStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              AddExpr(
                AddExpr(
                  TermExprMinus(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         bodovi
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExprMinus]
                  AddopPlus(
                  ) [AddopPlus]
                  TermMulop(
                    TermFactor(
                      FactorExpr(
                        AddExpr(
                          TermExpr(
                            TermMulop(
                              TermMulop(
                                TermFactor(
                                  Var(
                                    DesignatorIDENT(
                                     pet
                                    ) [DesignatorIDENT]
                                  ) [Var]
                                ) [TermFactor]
                                MulopMUL(
                                ) [MulopMUL]
                                Var(
                                  DesignatorIDENT(
                                   a
                                  ) [DesignatorIDENT]
                                ) [Var]
                              ) [TermMulop]
                              MulopDIV(
                              ) [MulopDIV]
                              FactorNUMBER(
                               2
                              ) [FactorNUMBER]
                            ) [TermMulop]
                          ) [TermExpr]
                          AddopMinus(
                          ) [AddopMinus]
                          TermFactor(
                            Var(
                              DesignatorIDENT(
                               jedan
                              ) [DesignatorIDENT]
                            ) [Var]
                          ) [TermFactor]
                        ) [AddExpr]
                      ) [FactorExpr]
                    ) [TermFactor]
                    MulopMUL(
                    ) [MulopMUL]
                    Var(
                      DesignatorIDENT(
                       bodovi
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermMulop]
                ) [AddExpr]
                AddopMinus(
                ) [AddopMinus]
                TermFactor(
                  FactorExpr(
                    AddExpr(
                      AddExpr(
                        TermExpr(
                          TermMulop(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                            MulopMOD(
                            ) [MulopMOD]
                            FactorNUMBER(
                             2
                            ) [FactorNUMBER]
                          ) [TermMulop]
                        ) [TermExpr]
                        AddopPlus(
                        ) [AddopPlus]
                        TermMulop(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                          MulopMUL(
                          ) [MulopMUL]
                          FactorNUMBER(
                           2
                          ) [FactorNUMBER]
                        ) [TermMulop]
                      ) [AddExpr]
                      AddopMinus(
                      ) [AddopMinus]
                      TermFactor(
                        FactorNUMBER(
                         3
                        ) [FactorNUMBER]
                      ) [TermFactor]
                    ) [AddExpr]
                  ) [FactorExpr]
                ) [TermFactor]
              ) [AddExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:39:49,003 - ===================================
INFO  06:39:49,006 - Deklarisana je konsanta int nula = 0
INFO  06:39:49,006 - Deklarisana je konsanta int jedan = 1
INFO  06:39:49,006 - Deklarisana je konsanta int pet = 5
INFO  06:39:49,006 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:39:49,006 - Deklarisan je niz niz
INFO  06:39:49,006 - Deklarisan je niz niz2
INFO  06:39:49,006 - Deklarisana promenljiva a
INFO  06:39:49,006 - Deklarisana promenljiva b
INFO  06:39:49,006 - Deklarisan je niz nizch
INFO  06:39:49,007 - Deklarisana promenljiva c
INFO  06:39:49,008 - Deklarisana promenljiva s1
INFO  06:39:49,008 - Deklarisan je niz nizbool
INFO  06:39:49,008 - Obradjuje se funkcija main na liniji 13
INFO  06:39:49,008 - Deklarisana promenljiva bodovi
INFO  06:39:49,008 - Deklarisana promenljiva bt
INFO  06:39:49,008 - Deklarisana promenljiva s
INFO  06:39:49,008 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:39:49,008 - Izvrsena negacija  na liniji 49
INFO  06:39:49,008 -  Print count calls = 2
INFO  06:39:49,008 -  Deklarisanih promenljivih ima = 12
INFO  06:39:49,008 - ===================================
INFO  06:39:49,014 - Parsiranje uspesno zavrseno!
INFO  06:40:47,889 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:40:47,925 - #2 program
INFO  06:40:47,925 - #27 MJProgram
INFO  06:40:47,925 - #23 const
INFO  06:40:47,926 - #27 int
INFO  06:40:47,926 - #27 nula
INFO  06:40:47,927 - #12 =
INFO  06:40:47,927 - #26 0
INFO  06:40:47,927 - #5 ;
INFO  06:40:47,927 - #23 const
INFO  06:40:47,928 - #27 int
INFO  06:40:47,928 - #27 jedan
INFO  06:40:47,928 - #12 =
INFO  06:40:47,928 - #26 1
INFO  06:40:47,928 - #5 ;
INFO  06:40:47,928 - #23 const
INFO  06:40:47,928 - #27 int
INFO  06:40:47,928 - #27 pet
INFO  06:40:47,928 - #12 =
INFO  06:40:47,928 - #26 5
INFO  06:40:47,928 - #5 ;
INFO  06:40:47,928 - #23 const
INFO  06:40:47,929 - #27 char
INFO  06:40:47,929 - #27 pet1
INFO  06:40:47,929 - #12 =
INFO  06:40:47,929 - #28 c
INFO  06:40:47,929 - #5 ;
INFO  06:40:47,929 - #27 int
INFO  06:40:47,929 - #27 niz
INFO  06:40:47,929 - #20 [
INFO  06:40:47,929 - #21 ]
INFO  06:40:47,929 - #8 ,
INFO  06:40:47,929 - #27 niz2
INFO  06:40:47,930 - #20 [
INFO  06:40:47,930 - #21 ]
INFO  06:40:47,930 - #8 ,
INFO  06:40:47,930 - #27 a
INFO  06:40:47,930 - #8 ,
INFO  06:40:47,930 - #27 b
INFO  06:40:47,930 - #5 ;
INFO  06:40:47,930 - #27 char
INFO  06:40:47,930 - #27 nizch
INFO  06:40:47,931 - #20 [
INFO  06:40:47,931 - #21 ]
INFO  06:40:47,931 - #8 ,
INFO  06:40:47,931 - #27 c
INFO  06:40:47,931 - #5 ;
INFO  06:40:47,931 - #27 bool
INFO  06:40:47,931 - #27 s1
INFO  06:40:47,931 - #5 ;
INFO  06:40:47,931 - #27 bool
INFO  06:40:47,931 - #27 nizbool
INFO  06:40:47,931 - #20 [
INFO  06:40:47,931 - #21 ]
INFO  06:40:47,931 - #5 ;
INFO  06:40:47,931 - #3 {
INFO  06:40:47,931 - #13 void
INFO  06:40:47,932 - #27 main
INFO  06:40:47,932 - #6 (
INFO  06:40:47,933 - #7 )
INFO  06:40:47,933 - #27 int
INFO  06:40:47,933 - #27 bodovi
INFO  06:40:47,933 - #5 ;
INFO  06:40:47,933 - #27 bool
INFO  06:40:47,933 - #27 bt
INFO  06:40:47,933 - #5 ;
INFO  06:40:47,933 - #27 int
INFO  06:40:47,933 - #27 s
INFO  06:40:47,933 - #5 ;
INFO  06:40:47,933 - #3 {
INFO  06:40:47,934 - #27 niz
INFO  06:40:47,934 - #12 =
INFO  06:40:47,934 - #32 new
INFO  06:40:47,935 - #27 int
INFO  06:40:47,935 - #20 [
INFO  06:40:47,935 - #26 3
INFO  06:40:47,935 - #21 ]
INFO  06:40:47,935 - #5 ;
INFO  06:40:47,935 - #27 niz
INFO  06:40:47,935 - #20 [
INFO  06:40:47,935 - #27 nula
INFO  06:40:47,935 - #21 ]
INFO  06:40:47,936 - #12 =
INFO  06:40:47,936 - #27 jedan
INFO  06:40:47,936 - #5 ;
INFO  06:40:47,936 - #27 niz
INFO  06:40:47,936 - #20 [
INFO  06:40:47,936 - #26 1
INFO  06:40:47,936 - #21 ]
INFO  06:40:47,936 - #12 =
INFO  06:40:47,936 - #26 2
INFO  06:40:47,936 - #5 ;
INFO  06:40:47,936 - #27 bodovi
INFO  06:40:47,936 - #12 =
INFO  06:40:47,936 - #27 niz
INFO  06:40:47,937 - #20 [
INFO  06:40:47,937 - #26 1
INFO  06:40:47,937 - #21 ]
INFO  06:40:47,937 - #17 /
INFO  06:40:47,937 - #27 niz
INFO  06:40:47,938 - #20 [
INFO  06:40:47,939 - #26 0
INFO  06:40:47,940 - #21 ]
INFO  06:40:47,940 - #5 ;
INFO  06:40:47,940 - #9 print
INFO  06:40:47,940 - #6 (
INFO  06:40:47,940 - #27 bodovi
INFO  06:40:47,940 - #7 )
INFO  06:40:47,941 - #5 ;
INFO  06:40:47,941 - #4 }
INFO  06:40:47,941 - #4 }
INFO  06:40:47,949 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     niz
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermFactor(
                        FactorNEW(
                          Type(
                           int
                          ) [Type]
                          TermExpr(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [FactorNEW]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorExpr(
                   niz
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           nula
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [DesignatorExpr]
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         jedan
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorExpr(
                 niz
                  TermExpr(
                    TermFactor(
                      FactorNUMBER(
                       1
                      ) [FactorNUMBER]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [DesignatorExpr]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     2
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    Var(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                    ) [Var]
                  ) [TermFactor]
                  MulopDIV(
                  ) [MulopDIV]
                  Var(
                    DesignatorExpr(
                     niz
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           0
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [DesignatorExpr]
                  ) [Var]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:40:47,950 - ===================================
INFO  06:40:47,952 - Deklarisana je konsanta int nula = 0
INFO  06:40:47,952 - Deklarisana je konsanta int jedan = 1
INFO  06:40:47,952 - Deklarisana je konsanta int pet = 5
INFO  06:40:47,952 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:40:47,953 - Deklarisan je niz niz
INFO  06:40:47,953 - Deklarisan je niz niz2
INFO  06:40:47,953 - Deklarisana promenljiva a
INFO  06:40:47,953 - Deklarisana promenljiva b
INFO  06:40:47,953 - Deklarisan je niz nizch
INFO  06:40:47,953 - Deklarisana promenljiva c
INFO  06:40:47,953 - Deklarisana promenljiva s1
INFO  06:40:47,953 - Deklarisan je niz nizbool
INFO  06:40:47,953 - Obradjuje se funkcija main na liniji 13
INFO  06:40:47,953 - Deklarisana promenljiva bodovi
INFO  06:40:47,953 - Deklarisana promenljiva bt
INFO  06:40:47,953 - Deklarisana promenljiva s
INFO  06:40:47,953 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:40:47,954 -  Print count calls = 1
INFO  06:40:47,954 -  Deklarisanih promenljivih ima = 12
INFO  06:40:47,954 - ===================================
INFO  06:40:47,959 - Parsiranje uspesno zavrseno!
INFO  06:42:02,262 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:42:02,302 - #2 program
INFO  06:42:02,302 - #27 MJProgram
INFO  06:42:02,302 - #23 const
INFO  06:42:02,304 - #27 int
INFO  06:42:02,304 - #27 nula
INFO  06:42:02,304 - #12 =
INFO  06:42:02,305 - #26 0
INFO  06:42:02,305 - #5 ;
INFO  06:42:02,305 - #23 const
INFO  06:42:02,305 - #27 int
INFO  06:42:02,305 - #27 jedan
INFO  06:42:02,305 - #12 =
INFO  06:42:02,305 - #26 1
INFO  06:42:02,305 - #5 ;
INFO  06:42:02,305 - #23 const
INFO  06:42:02,306 - #27 int
INFO  06:42:02,306 - #27 pet
INFO  06:42:02,306 - #12 =
INFO  06:42:02,306 - #26 5
INFO  06:42:02,306 - #5 ;
INFO  06:42:02,306 - #23 const
INFO  06:42:02,306 - #27 char
INFO  06:42:02,306 - #27 pet1
INFO  06:42:02,306 - #12 =
INFO  06:42:02,306 - #28 c
INFO  06:42:02,306 - #5 ;
INFO  06:42:02,306 - #27 int
INFO  06:42:02,306 - #27 niz
INFO  06:42:02,307 - #20 [
INFO  06:42:02,307 - #21 ]
INFO  06:42:02,307 - #8 ,
INFO  06:42:02,307 - #27 niz2
INFO  06:42:02,307 - #20 [
INFO  06:42:02,307 - #21 ]
INFO  06:42:02,307 - #8 ,
INFO  06:42:02,307 - #27 a
INFO  06:42:02,307 - #8 ,
INFO  06:42:02,307 - #27 b
INFO  06:42:02,307 - #5 ;
INFO  06:42:02,307 - #27 char
INFO  06:42:02,308 - #27 nizch
INFO  06:42:02,308 - #20 [
INFO  06:42:02,308 - #21 ]
INFO  06:42:02,308 - #8 ,
INFO  06:42:02,308 - #27 c
INFO  06:42:02,308 - #5 ;
INFO  06:42:02,308 - #27 bool
INFO  06:42:02,308 - #27 s1
INFO  06:42:02,308 - #5 ;
INFO  06:42:02,308 - #27 bool
INFO  06:42:02,308 - #27 nizbool
INFO  06:42:02,308 - #20 [
INFO  06:42:02,308 - #21 ]
INFO  06:42:02,309 - #5 ;
INFO  06:42:02,309 - #3 {
INFO  06:42:02,309 - #13 void
INFO  06:42:02,309 - #27 main
INFO  06:42:02,310 - #6 (
INFO  06:42:02,310 - #7 )
INFO  06:42:02,310 - #27 int
INFO  06:42:02,310 - #27 bodovi
INFO  06:42:02,310 - #5 ;
INFO  06:42:02,310 - #27 bool
INFO  06:42:02,310 - #27 bt
INFO  06:42:02,310 - #5 ;
INFO  06:42:02,310 - #27 int
INFO  06:42:02,310 - #27 s
INFO  06:42:02,310 - #5 ;
INFO  06:42:02,311 - #3 {
INFO  06:42:02,311 - #27 niz
INFO  06:42:02,312 - #12 =
INFO  06:42:02,312 - #32 new
INFO  06:42:02,312 - #27 int
INFO  06:42:02,312 - #20 [
INFO  06:42:02,312 - #26 3
INFO  06:42:02,312 - #21 ]
INFO  06:42:02,312 - #5 ;
INFO  06:42:02,313 - #27 niz
INFO  06:42:02,313 - #20 [
INFO  06:42:02,313 - #27 nula
INFO  06:42:02,313 - #21 ]
INFO  06:42:02,313 - #12 =
INFO  06:42:02,313 - #26 2
INFO  06:42:02,313 - #5 ;
INFO  06:42:02,313 - #27 niz
INFO  06:42:02,313 - #20 [
INFO  06:42:02,314 - #26 1
INFO  06:42:02,314 - #21 ]
INFO  06:42:02,314 - #12 =
INFO  06:42:02,314 - #26 2
INFO  06:42:02,314 - #5 ;
INFO  06:42:02,314 - #27 bodovi
INFO  06:42:02,314 - #12 =
INFO  06:42:02,314 - #27 niz
INFO  06:42:02,314 - #20 [
INFO  06:42:02,314 - #26 1
INFO  06:42:02,314 - #21 ]
INFO  06:42:02,314 - #17 /
INFO  06:42:02,314 - #27 niz
INFO  06:42:02,316 - #20 [
INFO  06:42:02,317 - #26 0
INFO  06:42:02,317 - #21 ]
INFO  06:42:02,317 - #5 ;
INFO  06:42:02,318 - #9 print
INFO  06:42:02,318 - #6 (
INFO  06:42:02,318 - #27 bodovi
INFO  06:42:02,318 - #7 )
INFO  06:42:02,319 - #5 ;
INFO  06:42:02,319 - #4 }
INFO  06:42:02,320 - #4 }
INFO  06:42:02,329 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     niz
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermFactor(
                        FactorNEW(
                          Type(
                           int
                          ) [Type]
                          TermExpr(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [FactorNEW]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorExpr(
                   niz
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           nula
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [DesignatorExpr]
                  TermExpr(
                    TermFactor(
                      FactorNUMBER(
                       2
                      ) [FactorNUMBER]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorExpr(
                 niz
                  TermExpr(
                    TermFactor(
                      FactorNUMBER(
                       1
                      ) [FactorNUMBER]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [DesignatorExpr]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     2
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    Var(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                    ) [Var]
                  ) [TermFactor]
                  MulopDIV(
                  ) [MulopDIV]
                  Var(
                    DesignatorExpr(
                     niz
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           0
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [DesignatorExpr]
                  ) [Var]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:42:02,330 - ===================================
INFO  06:42:02,334 - Deklarisana je konsanta int nula = 0
INFO  06:42:02,334 - Deklarisana je konsanta int jedan = 1
INFO  06:42:02,334 - Deklarisana je konsanta int pet = 5
INFO  06:42:02,334 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:42:02,334 - Deklarisan je niz niz
INFO  06:42:02,334 - Deklarisan je niz niz2
INFO  06:42:02,334 - Deklarisana promenljiva a
INFO  06:42:02,335 - Deklarisana promenljiva b
INFO  06:42:02,335 - Deklarisan je niz nizch
INFO  06:42:02,335 - Deklarisana promenljiva c
INFO  06:42:02,335 - Deklarisana promenljiva s1
INFO  06:42:02,335 - Deklarisan je niz nizbool
INFO  06:42:02,335 - Obradjuje se funkcija main na liniji 13
INFO  06:42:02,335 - Deklarisana promenljiva bodovi
INFO  06:42:02,335 - Deklarisana promenljiva bt
INFO  06:42:02,336 - Deklarisana promenljiva s
INFO  06:42:02,336 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:42:02,336 -  Print count calls = 1
INFO  06:42:02,336 -  Deklarisanih promenljivih ima = 12
INFO  06:42:02,336 - ===================================
INFO  06:42:02,344 - Parsiranje uspesno zavrseno!
INFO  06:42:32,131 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:42:32,191 - #2 program
INFO  06:42:32,192 - #27 MJProgram
INFO  06:42:32,192 - #23 const
INFO  06:42:32,194 - #27 int
INFO  06:42:32,194 - #27 nula
INFO  06:42:32,195 - #12 =
INFO  06:42:32,195 - #26 0
INFO  06:42:32,195 - #5 ;
INFO  06:42:32,195 - #23 const
INFO  06:42:32,196 - #27 int
INFO  06:42:32,196 - #27 jedan
INFO  06:42:32,196 - #12 =
INFO  06:42:32,196 - #26 1
INFO  06:42:32,196 - #5 ;
INFO  06:42:32,196 - #23 const
INFO  06:42:32,196 - #27 int
INFO  06:42:32,196 - #27 pet
INFO  06:42:32,196 - #12 =
INFO  06:42:32,196 - #26 5
INFO  06:42:32,197 - #5 ;
INFO  06:42:32,197 - #23 const
INFO  06:42:32,197 - #27 char
INFO  06:42:32,197 - #27 pet1
INFO  06:42:32,197 - #12 =
INFO  06:42:32,197 - #28 c
INFO  06:42:32,197 - #5 ;
INFO  06:42:32,197 - #27 int
INFO  06:42:32,197 - #27 niz
INFO  06:42:32,198 - #20 [
INFO  06:42:32,198 - #21 ]
INFO  06:42:32,198 - #8 ,
INFO  06:42:32,198 - #27 niz2
INFO  06:42:32,198 - #20 [
INFO  06:42:32,198 - #21 ]
INFO  06:42:32,198 - #8 ,
INFO  06:42:32,198 - #27 a
INFO  06:42:32,198 - #8 ,
INFO  06:42:32,198 - #27 b
INFO  06:42:32,199 - #5 ;
INFO  06:42:32,199 - #27 char
INFO  06:42:32,199 - #27 nizch
INFO  06:42:32,199 - #20 [
INFO  06:42:32,199 - #21 ]
INFO  06:42:32,199 - #8 ,
INFO  06:42:32,199 - #27 c
INFO  06:42:32,200 - #5 ;
INFO  06:42:32,200 - #27 bool
INFO  06:42:32,200 - #27 s1
INFO  06:42:32,200 - #5 ;
INFO  06:42:32,200 - #27 bool
INFO  06:42:32,200 - #27 nizbool
INFO  06:42:32,200 - #20 [
INFO  06:42:32,200 - #21 ]
INFO  06:42:32,200 - #5 ;
INFO  06:42:32,200 - #3 {
INFO  06:42:32,200 - #13 void
INFO  06:42:32,201 - #27 main
INFO  06:42:32,202 - #6 (
INFO  06:42:32,202 - #7 )
INFO  06:42:32,202 - #27 int
INFO  06:42:32,202 - #27 bodovi
INFO  06:42:32,202 - #5 ;
INFO  06:42:32,202 - #27 bool
INFO  06:42:32,203 - #27 bt
INFO  06:42:32,203 - #5 ;
INFO  06:42:32,203 - #27 int
INFO  06:42:32,203 - #27 s
INFO  06:42:32,203 - #5 ;
INFO  06:42:32,203 - #3 {
INFO  06:42:32,203 - #27 niz
INFO  06:42:32,204 - #12 =
INFO  06:42:32,205 - #32 new
INFO  06:42:32,205 - #27 int
INFO  06:42:32,205 - #20 [
INFO  06:42:32,205 - #26 3
INFO  06:42:32,205 - #21 ]
INFO  06:42:32,205 - #5 ;
INFO  06:42:32,205 - #27 niz
INFO  06:42:32,206 - #20 [
INFO  06:42:32,206 - #27 nula
INFO  06:42:32,206 - #21 ]
INFO  06:42:32,206 - #12 =
INFO  06:42:32,206 - #27 jedan
INFO  06:42:32,206 - #5 ;
INFO  06:42:32,206 - #27 niz
INFO  06:42:32,206 - #20 [
INFO  06:42:32,207 - #26 1
INFO  06:42:32,207 - #21 ]
INFO  06:42:32,207 - #12 =
INFO  06:42:32,207 - #26 2
INFO  06:42:32,207 - #5 ;
INFO  06:42:32,207 - #27 bodovi
INFO  06:42:32,207 - #12 =
INFO  06:42:32,207 - #27 niz
INFO  06:42:32,207 - #20 [
INFO  06:42:32,207 - #26 1
INFO  06:42:32,207 - #21 ]
INFO  06:42:32,207 - #17 /
INFO  06:42:32,207 - #27 niz
INFO  06:42:32,209 - #20 [
INFO  06:42:32,210 - #26 0
INFO  06:42:32,211 - #21 ]
INFO  06:42:32,211 - #5 ;
INFO  06:42:32,211 - #9 print
INFO  06:42:32,211 - #6 (
INFO  06:42:32,211 - #27 bodovi
INFO  06:42:32,211 - #7 )
INFO  06:42:32,212 - #5 ;
INFO  06:42:32,212 - #4 }
INFO  06:42:32,213 - #4 }
INFO  06:42:32,221 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                DesignatorStmt(
                  Assignment(
                    DesignatorIDENT(
                     niz
                    ) [DesignatorIDENT]
                    TermExpr(
                      TermFactor(
                        FactorNEW(
                          Type(
                           int
                          ) [Type]
                          TermExpr(
                            TermFactor(
                              FactorNUMBER(
                               3
                              ) [FactorNUMBER]
                            ) [TermFactor]
                          ) [TermExpr]
                        ) [FactorNEW]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [Assignment]
                ) [DesignatorStmt]
              ) [Statements]
              DesignatorStmt(
                Assignment(
                  DesignatorExpr(
                   niz
                    TermExpr(
                      TermFactor(
                        Var(
                          DesignatorIDENT(
                           nula
                          ) [DesignatorIDENT]
                        ) [Var]
                      ) [TermFactor]
                    ) [TermExpr]
                  ) [DesignatorExpr]
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         jedan
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorExpr(
                 niz
                  TermExpr(
                    TermFactor(
                      FactorNUMBER(
                       1
                      ) [FactorNUMBER]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [DesignatorExpr]
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     2
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorIDENT(
               bodovi
              ) [DesignatorIDENT]
              TermExpr(
                TermMulop(
                  TermFactor(
                    Var(
                      DesignatorExpr(
                       niz
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             1
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [DesignatorExpr]
                    ) [Var]
                  ) [TermFactor]
                  MulopDIV(
                  ) [MulopDIV]
                  Var(
                    DesignatorExpr(
                     niz
                      TermExpr(
                        TermFactor(
                          FactorNUMBER(
                           0
                          ) [FactorNUMBER]
                        ) [TermFactor]
                      ) [TermExpr]
                    ) [DesignatorExpr]
                  ) [Var]
                ) [TermMulop]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:42:32,222 - ===================================
INFO  06:42:32,225 - Deklarisana je konsanta int nula = 0
INFO  06:42:32,225 - Deklarisana je konsanta int jedan = 1
INFO  06:42:32,225 - Deklarisana je konsanta int pet = 5
INFO  06:42:32,225 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:42:32,225 - Deklarisan je niz niz
INFO  06:42:32,225 - Deklarisan je niz niz2
INFO  06:42:32,225 - Deklarisana promenljiva a
INFO  06:42:32,225 - Deklarisana promenljiva b
INFO  06:42:32,225 - Deklarisan je niz nizch
INFO  06:42:32,225 - Deklarisana promenljiva c
INFO  06:42:32,225 - Deklarisana promenljiva s1
INFO  06:42:32,225 - Deklarisan je niz nizbool
INFO  06:42:32,226 - Obradjuje se funkcija main na liniji 13
INFO  06:42:32,226 - Deklarisana promenljiva bodovi
INFO  06:42:32,226 - Deklarisana promenljiva bt
INFO  06:42:32,226 - Deklarisana promenljiva s
INFO  06:42:32,226 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:42:32,226 -  Print count calls = 1
INFO  06:42:32,226 -  Deklarisanih promenljivih ima = 12
INFO  06:42:32,226 - ===================================
INFO  06:54:40,858 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:54:40,952 - #2 program
INFO  06:54:40,952 - #27 MJProgram
INFO  06:54:40,952 - #23 const
INFO  06:54:40,956 - #27 int
INFO  06:54:40,956 - #27 nula
INFO  06:54:40,957 - #12 =
INFO  06:54:40,957 - #26 0
INFO  06:54:40,958 - #5 ;
INFO  06:54:40,958 - #23 const
INFO  06:54:40,958 - #27 int
INFO  06:54:40,959 - #27 jedan
INFO  06:54:40,959 - #12 =
INFO  06:54:40,959 - #26 1
INFO  06:54:40,959 - #5 ;
INFO  06:54:40,959 - #23 const
INFO  06:54:40,960 - #27 int
INFO  06:54:40,960 - #27 pet
INFO  06:54:40,960 - #12 =
INFO  06:54:40,960 - #26 5
INFO  06:54:40,960 - #5 ;
INFO  06:54:40,960 - #23 const
INFO  06:54:40,960 - #27 char
INFO  06:54:40,961 - #27 pet1
INFO  06:54:40,961 - #12 =
INFO  06:54:40,961 - #28 c
INFO  06:54:40,961 - #5 ;
INFO  06:54:40,962 - #27 int
INFO  06:54:40,962 - #27 niz
INFO  06:54:40,962 - #20 [
INFO  06:54:40,962 - #21 ]
INFO  06:54:40,962 - #8 ,
INFO  06:54:40,963 - #27 niz2
INFO  06:54:40,963 - #20 [
INFO  06:54:40,963 - #21 ]
INFO  06:54:40,963 - #8 ,
INFO  06:54:40,964 - #27 a
INFO  06:54:40,964 - #8 ,
INFO  06:54:40,964 - #27 b
INFO  06:54:40,964 - #5 ;
INFO  06:54:40,965 - #27 char
INFO  06:54:40,965 - #27 nizch
INFO  06:54:40,965 - #20 [
INFO  06:54:40,966 - #21 ]
INFO  06:54:40,966 - #8 ,
INFO  06:54:40,966 - #27 c
INFO  06:54:40,966 - #5 ;
INFO  06:54:40,966 - #27 bool
INFO  06:54:40,966 - #27 s1
INFO  06:54:40,966 - #5 ;
INFO  06:54:40,967 - #27 bool
INFO  06:54:40,967 - #27 nizbool
INFO  06:54:40,967 - #20 [
INFO  06:54:40,967 - #21 ]
INFO  06:54:40,967 - #5 ;
INFO  06:54:40,968 - #3 {
INFO  06:54:40,968 - #13 void
INFO  06:54:40,970 - #27 main
INFO  06:54:40,971 - #6 (
INFO  06:54:40,972 - #7 )
INFO  06:54:40,972 - #27 int
INFO  06:54:40,972 - #27 bodovi
INFO  06:54:40,973 - #5 ;
INFO  06:54:40,973 - #27 bool
INFO  06:54:40,973 - #27 bt
INFO  06:54:40,973 - #5 ;
INFO  06:54:40,973 - #27 int
INFO  06:54:40,973 - #27 s
INFO  06:54:40,973 - #5 ;
INFO  06:54:40,974 - #3 {
INFO  06:54:40,974 - #27 niz
INFO  06:54:40,975 - #12 =
INFO  06:54:40,976 - #32 new
INFO  06:54:40,976 - #27 int
INFO  06:54:40,976 - #20 [
INFO  06:54:40,976 - #26 3
INFO  06:54:40,976 - #21 ]
INFO  06:54:40,977 - #5 ;
INFO  06:54:40,977 - #27 niz
INFO  06:54:40,978 - #20 [
INFO  06:54:40,978 - #27 nula
INFO  06:54:40,978 - #21 ]
INFO  06:54:40,979 - #12 =
INFO  06:54:40,979 - #27 jedan
INFO  06:54:40,979 - #5 ;
INFO  06:54:40,979 - #27 niz
INFO  06:54:40,979 - #20 [
INFO  06:54:40,979 - #26 1
INFO  06:54:40,979 - #21 ]
INFO  06:54:40,980 - #12 =
INFO  06:54:40,980 - #26 2
INFO  06:54:40,980 - #5 ;
INFO  06:54:40,980 - #9 print
INFO  06:54:40,980 - #6 (
INFO  06:54:40,980 - #27 bodovi
INFO  06:54:40,980 - #7 )
INFO  06:54:40,982 - #5 ;
INFO  06:54:40,982 - #4 }
INFO  06:54:40,983 - #4 }
INFO  06:54:41,001 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   niz
                  ) [DesignatorIDENT]
                  TermExpr(
                    TermFactor(
                      FactorNEW(
                        Type(
                         int
                        ) [Type]
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [FactorNEW]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorExpr(
                 niz
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         nula
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [DesignatorExpr]
                TermExpr(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       jedan
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorExpr(
               niz
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     1
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [DesignatorExpr]
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:54:41,002 - ===================================
INFO  06:54:41,009 - Deklarisana je konsanta int nula = 0
INFO  06:54:41,010 - Deklarisana je konsanta int jedan = 1
INFO  06:54:41,010 - Deklarisana je konsanta int pet = 5
INFO  06:54:41,010 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:54:41,010 - Deklarisan je niz niz
INFO  06:54:41,010 - Deklarisan je niz niz2
INFO  06:54:41,010 - Deklarisana promenljiva a
INFO  06:54:41,011 - Deklarisana promenljiva b
INFO  06:54:41,011 - Deklarisan je niz nizch
INFO  06:54:41,011 - Deklarisana promenljiva c
INFO  06:54:41,011 - Deklarisana promenljiva s1
INFO  06:54:41,011 - Deklarisan je niz nizbool
INFO  06:54:41,011 - Obradjuje se funkcija main na liniji 13
INFO  06:54:41,011 - Deklarisana promenljiva bodovi
INFO  06:54:41,012 - Deklarisana promenljiva bt
INFO  06:54:41,012 - Deklarisana promenljiva s
INFO  06:54:41,012 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:54:41,013 -  Print count calls = 1
INFO  06:54:41,013 -  Deklarisanih promenljivih ima = 12
INFO  06:54:41,013 - ===================================
INFO  06:54:41,027 - Parsiranje uspesno zavrseno!
INFO  06:54:51,935 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:54:52,006 - #2 program
INFO  06:54:52,006 - #27 MJProgram
INFO  06:54:52,006 - #23 const
INFO  06:54:52,009 - #27 int
INFO  06:54:52,009 - #27 nula
INFO  06:54:52,010 - #12 =
INFO  06:54:52,011 - #26 0
INFO  06:54:52,011 - #5 ;
INFO  06:54:52,011 - #23 const
INFO  06:54:52,011 - #27 int
INFO  06:54:52,011 - #27 jedan
INFO  06:54:52,012 - #12 =
INFO  06:54:52,012 - #26 1
INFO  06:54:52,012 - #5 ;
INFO  06:54:52,012 - #23 const
INFO  06:54:52,012 - #27 int
INFO  06:54:52,012 - #27 pet
INFO  06:54:52,012 - #12 =
INFO  06:54:52,012 - #26 5
INFO  06:54:52,012 - #5 ;
INFO  06:54:52,012 - #23 const
INFO  06:54:52,013 - #27 char
INFO  06:54:52,013 - #27 pet1
INFO  06:54:52,013 - #12 =
INFO  06:54:52,013 - #28 c
INFO  06:54:52,013 - #5 ;
INFO  06:54:52,014 - #27 int
INFO  06:54:52,014 - #27 niz
INFO  06:54:52,014 - #20 [
INFO  06:54:52,014 - #21 ]
INFO  06:54:52,014 - #8 ,
INFO  06:54:52,015 - #27 niz2
INFO  06:54:52,015 - #20 [
INFO  06:54:52,015 - #21 ]
INFO  06:54:52,015 - #8 ,
INFO  06:54:52,015 - #27 a
INFO  06:54:52,015 - #8 ,
INFO  06:54:52,015 - #27 b
INFO  06:54:52,015 - #5 ;
INFO  06:54:52,016 - #27 char
INFO  06:54:52,016 - #27 nizch
INFO  06:54:52,016 - #20 [
INFO  06:54:52,017 - #21 ]
INFO  06:54:52,017 - #8 ,
INFO  06:54:52,017 - #27 c
INFO  06:54:52,017 - #5 ;
INFO  06:54:52,017 - #27 bool
INFO  06:54:52,017 - #27 s1
INFO  06:54:52,017 - #5 ;
INFO  06:54:52,017 - #27 bool
INFO  06:54:52,018 - #27 nizbool
INFO  06:54:52,018 - #20 [
INFO  06:54:52,018 - #21 ]
INFO  06:54:52,018 - #5 ;
INFO  06:54:52,018 - #3 {
INFO  06:54:52,018 - #13 void
INFO  06:54:52,020 - #27 main
INFO  06:54:52,020 - #6 (
INFO  06:54:52,020 - #7 )
INFO  06:54:52,020 - #27 int
INFO  06:54:52,020 - #27 bodovi
INFO  06:54:52,021 - #5 ;
INFO  06:54:52,021 - #27 bool
INFO  06:54:52,021 - #27 bt
INFO  06:54:52,021 - #5 ;
INFO  06:54:52,021 - #27 int
INFO  06:54:52,021 - #27 s
INFO  06:54:52,021 - #5 ;
INFO  06:54:52,021 - #3 {
INFO  06:54:52,022 - #27 niz
INFO  06:54:52,023 - #12 =
INFO  06:54:52,023 - #32 new
INFO  06:54:52,023 - #27 int
INFO  06:54:52,023 - #20 [
INFO  06:54:52,024 - #26 3
INFO  06:54:52,024 - #21 ]
INFO  06:54:52,024 - #5 ;
INFO  06:54:52,024 - #27 niz
INFO  06:54:52,025 - #20 [
INFO  06:54:52,025 - #27 nula
INFO  06:54:52,025 - #21 ]
INFO  06:54:52,025 - #12 =
INFO  06:54:52,025 - #27 jedan
INFO  06:54:52,025 - #5 ;
INFO  06:54:52,025 - #27 niz
INFO  06:54:52,025 - #20 [
INFO  06:54:52,025 - #26 1
INFO  06:54:52,025 - #21 ]
INFO  06:54:52,026 - #12 =
INFO  06:54:52,026 - #26 2
INFO  06:54:52,026 - #5 ;
INFO  06:54:52,026 - #9 print
INFO  06:54:52,026 - #6 (
INFO  06:54:52,026 - #27 bodovi
INFO  06:54:52,026 - #7 )
INFO  06:54:52,027 - #5 ;
INFO  06:54:52,028 - #4 }
INFO  06:54:52,028 - #4 }
INFO  06:54:52,042 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   niz
                  ) [DesignatorIDENT]
                  TermExpr(
                    TermFactor(
                      FactorNEW(
                        Type(
                         int
                        ) [Type]
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [FactorNEW]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorExpr(
                 niz
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         nula
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [DesignatorExpr]
                TermExpr(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       jedan
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorExpr(
               niz
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     1
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [DesignatorExpr]
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:54:52,043 - ===================================
INFO  06:54:52,049 - Deklarisana je konsanta int nula = 0
INFO  06:54:52,049 - Deklarisana je konsanta int jedan = 1
INFO  06:54:52,049 - Deklarisana je konsanta int pet = 5
INFO  06:54:52,049 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:54:52,050 - Deklarisan je niz niz
INFO  06:54:52,050 - Deklarisan je niz niz2
INFO  06:54:52,050 - Deklarisana promenljiva a
INFO  06:54:52,050 - Deklarisana promenljiva b
INFO  06:54:52,050 - Deklarisan je niz nizch
INFO  06:54:52,050 - Deklarisana promenljiva c
INFO  06:54:52,050 - Deklarisana promenljiva s1
INFO  06:54:52,050 - Deklarisan je niz nizbool
INFO  06:54:52,051 - Obradjuje se funkcija main na liniji 13
INFO  06:54:52,051 - Deklarisana promenljiva bodovi
INFO  06:54:52,051 - Deklarisana promenljiva bt
INFO  06:54:52,051 - Deklarisana promenljiva s
INFO  06:54:52,051 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:54:52,052 -  Print count calls = 1
INFO  06:54:52,052 -  Deklarisanih promenljivih ima = 12
INFO  06:54:52,052 - ===================================
INFO  06:54:52,064 - Parsiranje uspesno zavrseno!
INFO  06:55:34,334 - Compiling source file: C:\Users\Neca\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  06:55:34,391 - #2 program
INFO  06:55:34,392 - #27 MJProgram
INFO  06:55:34,392 - #23 const
INFO  06:55:34,394 - #27 int
INFO  06:55:34,394 - #27 nula
INFO  06:55:34,395 - #12 =
INFO  06:55:34,395 - #26 0
INFO  06:55:34,395 - #5 ;
INFO  06:55:34,395 - #23 const
INFO  06:55:34,396 - #27 int
INFO  06:55:34,396 - #27 jedan
INFO  06:55:34,396 - #12 =
INFO  06:55:34,396 - #26 1
INFO  06:55:34,396 - #5 ;
INFO  06:55:34,396 - #23 const
INFO  06:55:34,396 - #27 int
INFO  06:55:34,396 - #27 pet
INFO  06:55:34,396 - #12 =
INFO  06:55:34,397 - #26 5
INFO  06:55:34,397 - #5 ;
INFO  06:55:34,397 - #23 const
INFO  06:55:34,397 - #27 char
INFO  06:55:34,397 - #27 pet1
INFO  06:55:34,397 - #12 =
INFO  06:55:34,397 - #28 c
INFO  06:55:34,397 - #5 ;
INFO  06:55:34,397 - #27 int
INFO  06:55:34,398 - #27 niz
INFO  06:55:34,398 - #20 [
INFO  06:55:34,398 - #21 ]
INFO  06:55:34,398 - #8 ,
INFO  06:55:34,398 - #27 niz2
INFO  06:55:34,398 - #20 [
INFO  06:55:34,398 - #21 ]
INFO  06:55:34,399 - #8 ,
INFO  06:55:34,399 - #27 a
INFO  06:55:34,399 - #8 ,
INFO  06:55:34,399 - #27 b
INFO  06:55:34,399 - #5 ;
INFO  06:55:34,399 - #27 char
INFO  06:55:34,400 - #27 nizch
INFO  06:55:34,400 - #20 [
INFO  06:55:34,400 - #21 ]
INFO  06:55:34,400 - #8 ,
INFO  06:55:34,400 - #27 c
INFO  06:55:34,400 - #5 ;
INFO  06:55:34,400 - #27 bool
INFO  06:55:34,401 - #27 s1
INFO  06:55:34,401 - #5 ;
INFO  06:55:34,401 - #27 bool
INFO  06:55:34,401 - #27 nizbool
INFO  06:55:34,401 - #20 [
INFO  06:55:34,401 - #21 ]
INFO  06:55:34,401 - #5 ;
INFO  06:55:34,401 - #3 {
INFO  06:55:34,401 - #13 void
INFO  06:55:34,403 - #27 main
INFO  06:55:34,403 - #6 (
INFO  06:55:34,403 - #7 )
INFO  06:55:34,403 - #27 int
INFO  06:55:34,403 - #27 bodovi
INFO  06:55:34,403 - #5 ;
INFO  06:55:34,403 - #27 bool
INFO  06:55:34,404 - #27 bt
INFO  06:55:34,404 - #5 ;
INFO  06:55:34,404 - #27 int
INFO  06:55:34,404 - #27 s
INFO  06:55:34,404 - #5 ;
INFO  06:55:34,404 - #3 {
INFO  06:55:34,404 - #27 niz
INFO  06:55:34,405 - #12 =
INFO  06:55:34,406 - #32 new
INFO  06:55:34,406 - #27 int
INFO  06:55:34,406 - #20 [
INFO  06:55:34,406 - #26 3
INFO  06:55:34,406 - #21 ]
INFO  06:55:34,406 - #5 ;
INFO  06:55:34,407 - #27 niz
INFO  06:55:34,407 - #20 [
INFO  06:55:34,407 - #27 nula
INFO  06:55:34,407 - #21 ]
INFO  06:55:34,407 - #12 =
INFO  06:55:34,407 - #27 jedan
INFO  06:55:34,408 - #5 ;
INFO  06:55:34,408 - #27 niz
INFO  06:55:34,408 - #20 [
INFO  06:55:34,408 - #26 1
INFO  06:55:34,408 - #21 ]
INFO  06:55:34,408 - #12 =
INFO  06:55:34,408 - #26 2
INFO  06:55:34,408 - #5 ;
INFO  06:55:34,408 - #9 print
INFO  06:55:34,408 - #6 (
INFO  06:55:34,408 - #27 bodovi
INFO  06:55:34,409 - #7 )
INFO  06:55:34,410 - #5 ;
INFO  06:55:34,410 - #4 }
INFO  06:55:34,410 - #4 }
INFO  06:55:34,422 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  DeclarationL(
    DeclarationL(
      DeclarationL(
        DeclarationL(
          DeclarationL(
            DeclarationL(
              DeclarationL(
                DeclarationL(
                  NoDecl(
                  ) [NoDecl]
                  DeclarationConst(
                    ConstDeclarations(
                      Type(
                       int
                      ) [Type]
                      ConstDeclNumber(
                       nula
                       0
                      ) [ConstDeclNumber]
                    ) [ConstDeclarations]
                  ) [DeclarationConst]
                ) [DeclarationL]
                DeclarationConst(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    ConstDeclNumber(
                     jedan
                     1
                    ) [ConstDeclNumber]
                  ) [ConstDeclarations]
                ) [DeclarationConst]
              ) [DeclarationL]
              DeclarationConst(
                ConstDeclarations(
                  Type(
                   int
                  ) [Type]
                  ConstDeclNumber(
                   pet
                   5
                  ) [ConstDeclNumber]
                ) [ConstDeclarations]
              ) [DeclarationConst]
            ) [DeclarationL]
            DeclarationConst(
              ConstDeclarations(
                Type(
                 char
                ) [Type]
                ConstDeclChar(
                 pet1
                 c
                ) [ConstDeclChar]
              ) [ConstDeclarations]
            ) [DeclarationConst]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               int
              ) [Type]
              VarMul(
                VarItemArr(
                 niz
                ) [VarItemArr]
                VarMul(
                  VarItemArr(
                   niz2
                  ) [VarItemArr]
                  VarMul(
                    VarItemIdent(
                     a
                    ) [VarItemIdent]
                    VarOne(
                      VarItemIdent(
                       b
                      ) [VarItemIdent]
                    ) [VarOne]
                  ) [VarMul]
                ) [VarMul]
              ) [VarMul]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             char
            ) [Type]
            VarMul(
              VarItemArr(
               nizch
              ) [VarItemArr]
              VarOne(
                VarItemIdent(
                 c
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarMul]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      DeclarationVar(
        VarDeclarations(
          Type(
           bool
          ) [Type]
          VarOne(
            VarItemIdent(
             s1
            ) [VarItemIdent]
          ) [VarOne]
        ) [VarDeclarations]
      ) [DeclarationVar]
    ) [DeclarationL]
    DeclarationVar(
      VarDeclarations(
        Type(
         bool
        ) [Type]
        VarOne(
          VarItemArr(
           nizbool
          ) [VarItemArr]
        ) [VarOne]
      ) [VarDeclarations]
    ) [DeclarationVar]
  ) [DeclarationL]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodVoid(
       main
      ) [MethodVoid]
      DeclarationL(
        DeclarationL(
          DeclarationL(
            NoDecl(
            ) [NoDecl]
            DeclarationVar(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                VarOne(
                  VarItemIdent(
                   bodovi
                  ) [VarItemIdent]
                ) [VarOne]
              ) [VarDeclarations]
            ) [DeclarationVar]
          ) [DeclarationL]
          DeclarationVar(
            VarDeclarations(
              Type(
               bool
              ) [Type]
              VarOne(
                VarItemIdent(
                 bt
                ) [VarItemIdent]
              ) [VarOne]
            ) [VarDeclarations]
          ) [DeclarationVar]
        ) [DeclarationL]
        DeclarationVar(
          VarDeclarations(
            Type(
             int
            ) [Type]
            VarOne(
              VarItemIdent(
               s
              ) [VarItemIdent]
            ) [VarOne]
          ) [VarDeclarations]
        ) [DeclarationVar]
      ) [DeclarationL]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              DesignatorStmt(
                Assignment(
                  DesignatorIDENT(
                   niz
                  ) [DesignatorIDENT]
                  TermExpr(
                    TermFactor(
                      FactorNEW(
                        Type(
                         int
                        ) [Type]
                        TermExpr(
                          TermFactor(
                            FactorNUMBER(
                             3
                            ) [FactorNUMBER]
                          ) [TermFactor]
                        ) [TermExpr]
                      ) [FactorNEW]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [Assignment]
              ) [DesignatorStmt]
            ) [Statements]
            DesignatorStmt(
              Assignment(
                DesignatorExpr(
                 niz
                  TermExpr(
                    TermFactor(
                      Var(
                        DesignatorIDENT(
                         nula
                        ) [DesignatorIDENT]
                      ) [Var]
                    ) [TermFactor]
                  ) [TermExpr]
                ) [DesignatorExpr]
                TermExpr(
                  TermFactor(
                    Var(
                      DesignatorIDENT(
                       jedan
                      ) [DesignatorIDENT]
                    ) [Var]
                  ) [TermFactor]
                ) [TermExpr]
              ) [Assignment]
            ) [DesignatorStmt]
          ) [Statements]
          DesignatorStmt(
            Assignment(
              DesignatorExpr(
               niz
                TermExpr(
                  TermFactor(
                    FactorNUMBER(
                     1
                    ) [FactorNUMBER]
                  ) [TermFactor]
                ) [TermExpr]
              ) [DesignatorExpr]
              TermExpr(
                TermFactor(
                  FactorNUMBER(
                   2
                  ) [FactorNUMBER]
                ) [TermFactor]
              ) [TermExpr]
            ) [Assignment]
          ) [DesignatorStmt]
        ) [Statements]
        MatchedStmt(
          PrintStmt(
            TermExpr(
              TermFactor(
                Var(
                  DesignatorIDENT(
                   bodovi
                  ) [DesignatorIDENT]
                ) [Var]
              ) [TermFactor]
            ) [TermExpr]
            NoConst(
            ) [NoConst]
          ) [PrintStmt]
        ) [MatchedStmt]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  06:55:34,422 - ===================================
INFO  06:55:34,427 - Deklarisana je konsanta int nula = 0
INFO  06:55:34,427 - Deklarisana je konsanta int jedan = 1
INFO  06:55:34,427 - Deklarisana je konsanta int pet = 5
INFO  06:55:34,428 - Deklarisana je konsanta char pet1 = 99 na liniji 6
INFO  06:55:34,428 - Deklarisan je niz niz
INFO  06:55:34,428 - Deklarisan je niz niz2
INFO  06:55:34,428 - Deklarisana promenljiva a
INFO  06:55:34,428 - Deklarisana promenljiva b
INFO  06:55:34,428 - Deklarisan je niz nizch
INFO  06:55:34,428 - Deklarisana promenljiva c
INFO  06:55:34,428 - Deklarisana promenljiva s1
INFO  06:55:34,428 - Deklarisan je niz nizbool
INFO  06:55:34,428 - Obradjuje se funkcija main na liniji 13
INFO  06:55:34,429 - Deklarisana promenljiva bodovi
INFO  06:55:34,429 - Deklarisana promenljiva bt
INFO  06:55:34,429 - Deklarisana promenljiva s
INFO  06:55:34,429 - Deklarisana je niz (uz pomoc NEW) na liniji 30
INFO  06:55:34,429 -  Print count calls = 1
INFO  06:55:34,429 -  Deklarisanih promenljivih ima = 12
INFO  06:55:34,429 - ===================================
INFO  06:55:34,442 - Parsiranje uspesno zavrseno!
